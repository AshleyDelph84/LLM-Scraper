
================================================================================
Section 1: Content from https://mastra.ai/docs
================================================================================

Title: Introduction | Mastra Docs

URL Source: https://mastra.ai/docs

Markdown Content:
Introduction | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[About Mastra](https://mastra.ai/docs#)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/index.mdx)

DocsIntroduction

About Mastra
============

Mastra is an open-source Typescript agent framework.

It’s designed to give you the primitives you need to build AI applications and features.

You can use Mastra to build [AI agents](https://mastra.ai/docs/agents/00-overview) that have memory and can execute functions, or chain LLM calls in deterministic [workflows](https://mastra.ai/docs/workflows/00-overview). You can chat with your agents in Mastra’s [local dev environment](https://mastra.ai/docs/local-dev/mastra-dev), feed them application-specific knowledge with [RAG](https://mastra.ai/docs/rag/overview), and score their outputs with Mastra’s [evals](https://mastra.ai/docs/08-running-evals).

The main features include:

*   **[Model routing](https://sdk.vercel.ai/docs/introduction)**: Mastra uses the [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction) for model routing, providing a unified interface to interact with any LLM provider including OpenAI, Anthropic, and Google Gemini.
*   **[Agent memory and tool calling](https://mastra.ai/docs/agents/01-agent-memory)**: With Mastra, you can give your agent tools (functions) that it can call. You can persist agent memory and retrieve it based on recency, semantic similarity, or conversation thread.
*   **[Workflow graphs](https://mastra.ai/docs/workflows/00-overview)**: When you want to execute LLM calls in a deterministic way, Mastra gives you a graph-based workflow engine. You can define discrete steps, log inputs and outputs at each step of each run, and pipe them into an observability tool. Mastra workflows have a simple syntax for control flow (`step()`, `.then()`, `.after()`) that allows branching and chaining.
*   **[Agent development environment](https://mastra.ai/docs/local-dev/mastra-dev)**: When you’re developing an agent locally, you can chat with it and see its state and memory in Mastra’s agent development environment.
*   **[Retrieval-augmented generation (RAG)](https://mastra.ai/docs/rag/overview)**: Mastra gives you APIs to process documents (text, HTML, Markdown, JSON) into chunks, create embeddings, and store them in a vector database. At query time, it retrieves relevant chunks to ground LLM responses in your data, with a unified API on top of multiple vector stores (Pinecone, pgvector, etc) and embedding providers (OpenAI, Cohere, etc).
*   **[Deployment](https://mastra.ai/docs/deployment/deployment)**: Mastra supports bundling your agents and workflows within an existing React, Next.js, or Node.js application, or into standalone endpoints. The Mastra deploy helper lets you easily bundle agents and workflows into a Node.js server using Hono, or deploy it onto a serverless platform like Vercel, Cloudflare Workers, or Netlify.
*   **[Evals](https://mastra.ai/docs/evals/00-overview)**: Mastra provides automated evaluation metrics that use model-graded, rule-based, and statistical methods to assess LLM outputs, with built-in metrics for toxicity, bias, relevance, and factual accuracy. You can also define your own evals.

Last updated on February 25, 2025

[Installation](https://mastra.ai/docs/getting-started/installation "Installation")



================================================================================
Section 2: Content from https://mastra.ai/docs/getting-started/installation
================================================================================

Title: Installing Mastra Locally | Getting Started | Mastra Docs

URL Source: https://mastra.ai/docs/getting-started/installation

Markdown Content:
Installing Mastra Locally | Getting Started | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Installing Mastra Locally](https://mastra.ai/docs/getting-started/installation#)[Prerequisites](https://mastra.ai/docs/getting-started/installation#prerequisites)[Automatic Installation](https://mastra.ai/docs/getting-started/installation#automatic-installation)[Create a New Project](https://mastra.ai/docs/getting-started/installation#create-a-new-project)[Set Up your API Key](https://mastra.ai/docs/getting-started/installation#set-up-your-api-key)[Manual Installation](https://mastra.ai/docs/getting-started/installation#manual-installation)[Create a New Project](https://mastra.ai/docs/getting-started/installation#create-a-new-project-1)[Initialize TypeScript](https://mastra.ai/docs/getting-started/installation#initialize-typescript)[Set Up your API Key](https://mastra.ai/docs/getting-started/installation#set-up-your-api-key-1)[Create a Tool](https://mastra.ai/docs/getting-started/installation#create-a-tool)[Create an Agent](https://mastra.ai/docs/getting-started/installation#create-an-agent)[Register Agent](https://mastra.ai/docs/getting-started/installation#register-agent)[Start the Mastra Server](https://mastra.ai/docs/getting-started/installation#start-the-mastra-server)[Development Server](https://mastra.ai/docs/getting-started/installation#development-server)[Test the Endpoint](https://mastra.ai/docs/getting-started/installation#test-the-endpoint)[Run from the command line](https://mastra.ai/docs/getting-started/installation#run-from-the-command-line)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/getting-started/installation.mdx)

[Docs](https://mastra.ai/docs "Docs")Getting StartedInstallation

Installing Mastra Locally
=========================

To run Mastra, you need access to an LLM. Typically, you’ll want to get an API key from an LLM provider such as [OpenAI](https://platform.openai.com/), [Anthropic](https://console.anthropic.com/settings/keys), or [Google Gemini](https://ai.google.dev/gemini-api/docs). You can also run Mastra with a local LLM using [Ollama](https://ollama.ai/).

Prerequisites[](https://mastra.ai/docs/getting-started/installation#prerequisites)
----------------------------------------------------------------------------------

*   Node.js `v20.0` or higher
*   Access to a [supported large language model (LLM)](https://mastra.ai/docs/reference/llm/providers-and-models)

Automatic Installation[](https://mastra.ai/docs/getting-started/installation#automatic-installation)
----------------------------------------------------------------------------------------------------

### Create a New Project[](https://mastra.ai/docs/getting-started/installation#create-a-new-project)

We recommend starting a new Mastra project using `create-mastra`, which will scaffold your project. To create a project, run:

npxnpmyarnpnpm

```
npx create-mastra@latest
```

```
npm create mastra
```

```
yarn create mastra
```

```
pnpm create mastra
```

On installation, you’ll be guided through the following prompts:

```
What do you want to name your project? my-mastra-app
Choose components to install:
  ◯ Agents (recommended)
  ◯ Tools
  ◯ Workflows
Select default provider:
  ◯ OpenAI (recommended)
  ◯ Anthropic
  ◯ Groq
Would you like to include example code? No / Yes
```

After the prompts, `create-mastra` will set up your project directory with TypeScript, install dependencies, and configure your selected components and LLM provider.

### Set Up your API Key[](https://mastra.ai/docs/getting-started/installation#set-up-your-api-key)

Add the API key for your configured LLM provider in your `.env` file.

.env

```
OPENAI_API_KEY=<your-openai-key>
```

Note: If you prefer to run the command with flags (non-interactive mode) and include the example code, you can use:

```
npx create-mastra@latest --components agents,tools --llm openai --example
```

This allows you to specify your preferences upfront without being prompted.

Manual Installation[](https://mastra.ai/docs/getting-started/installation#manual-installation)
----------------------------------------------------------------------------------------------

  

If you prefer to set up your Mastra project manually, follow these steps:

### Create a New Project[](https://mastra.ai/docs/getting-started/installation#create-a-new-project-1)

Create a project directory and navigate into it:

```
mkdir hello-mastra
cd hello-mastra
```

Then, initialize a TypeScript project including the `@mastra/core` package:

npmpnpmyarnbun

```
npm init -y
npm install typescript tsx @types/node mastra@alpha --save-dev
npm install @mastra/core@alpha zod
npx tsc --init
```

```
pnpm init
pnpm add typescript tsx @types/node mastra@alpha --save-dev
pnpm add @mastra/core@alpha zod
pnpm dlx tsc --init
```

```
yarn init -y
yarn add typescript tsx @types/node mastra@alpha --dev
yarn add @mastra/core@alpha zod
yarn dlx tsc --init
```

```
bun init -y
bun add typescript tsx @types/node mastra@alpha --dev
bun add @mastra/core@alpha zod
bunx tsc --init
```

### Initialize TypeScript[](https://mastra.ai/docs/getting-started/installation#initialize-typescript)

Create a `tsconfig.json` file in your project root with the following configuration:

```
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "dist"
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "dist",
    ".mastra"
  ]
}
```

This TypeScript configuration is optimized for Mastra projects, using modern module resolution and strict type checking.

### Set Up your API Key[](https://mastra.ai/docs/getting-started/installation#set-up-your-api-key-1)

Create a `.env` file in your project root directory and add your API key:

.env

```
OPENAI_API_KEY=<your-openai-key>
```

Replace your\_openai\_api\_key with your actual API key.

### Create a Tool[](https://mastra.ai/docs/getting-started/installation#create-a-tool)

Create a `weather-tool` tool file:

```
mkdir -p src/mastra/tools && touch src/mastra/tools/weather-tool.ts
```

Then, add the following code to `src/mastra/tools/weather-tool.ts`:

src/mastra/tools/weather-tool.ts

```
import { createTool } from "@mastra/core/tools";
import { z } from "zod";
 
interface WeatherResponse {
  current: {
    time: string;
    temperature_2m: number;
    apparent_temperature: number;
    relative_humidity_2m: number;
    wind_speed_10m: number;
    wind_gusts_10m: number;
    weather_code: number;
  };
}
 
export const weatherTool = createTool({
  id: "get-weather",
  description: "Get current weather for a location",
  inputSchema: z.object({
    location: z.string().describe("City name"),
  }),
  outputSchema: z.object({
    temperature: z.number(),
    feelsLike: z.number(),
    humidity: z.number(),
    windSpeed: z.number(),
    windGust: z.number(),
    conditions: z.string(),
    location: z.string(),
  }),
  execute: async ({ context }) => {
    return await getWeather(context.location);
  },
});
 
const getWeather = async (location: string) => {
  const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=1`;
  const geocodingResponse = await fetch(geocodingUrl);
  const geocodingData = await geocodingResponse.json();
 
  if (!geocodingData.results?.[0]) {
    throw new Error(`Location '${location}' not found`);
  }
 
  const { latitude, longitude, name } = geocodingData.results[0];
 
  const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,apparent_temperature,relative_humidity_2m,wind_speed_10m,wind_gusts_10m,weather_code`;
 
  const response = await fetch(weatherUrl);
  const data: WeatherResponse = await response.json();
 
  return {
    temperature: data.current.temperature_2m,
    feelsLike: data.current.apparent_temperature,
    humidity: data.current.relative_humidity_2m,
    windSpeed: data.current.wind_speed_10m,
    windGust: data.current.wind_gusts_10m,
    conditions: getWeatherCondition(data.current.weather_code),
    location: name,
  };
};
 
function getWeatherCondition(code: number): string {
  const conditions: Record<number, string> = {
    0: "Clear sky",
    1: "Mainly clear",
    2: "Partly cloudy",
    3: "Overcast",
    45: "Foggy",
    48: "Depositing rime fog",
    51: "Light drizzle",
    53: "Moderate drizzle",
    55: "Dense drizzle",
    56: "Light freezing drizzle",
    57: "Dense freezing drizzle",
    61: "Slight rain",
    63: "Moderate rain",
    65: "Heavy rain",
    66: "Light freezing rain",
    67: "Heavy freezing rain",
    71: "Slight snow fall",
    73: "Moderate snow fall",
    75: "Heavy snow fall",
    77: "Snow grains",
    80: "Slight rain showers",
    81: "Moderate rain showers",
    82: "Violent rain showers",
    85: "Slight snow showers",
    86: "Heavy snow showers",
    95: "Thunderstorm",
    96: "Thunderstorm with slight hail",
    99: "Thunderstorm with heavy hail",
  };
  return conditions[code] || "Unknown";
}
```

### Create an Agent[](https://mastra.ai/docs/getting-started/installation#create-an-agent)

Create a `weather` agent file:

```
mkdir -p src/mastra/agents && touch src/mastra/agents/weather.ts
```

Then, add the following code to `src/mastra/agents/weather.ts`:

src/mastra/agents/weather.ts

```
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";
import { weatherTool } from "../tools/weather-tool";
 
export const weatherAgent = new Agent({
  name: "Weather Agent",
  instructions: `You are a helpful weather assistant that provides accurate weather information.
 
Your primary function is to help users get weather details for specific locations. When responding:
- Always ask for a location if none is provided
- Include relevant details like humidity, wind conditions, and precipitation
- Keep responses concise but informative
 
Use the weatherTool to fetch current weather data.`,
  model: openai("gpt-4o-mini"),
  tools: { weatherTool },
});
```

### Register Agent[](https://mastra.ai/docs/getting-started/installation#register-agent)

Finally, create the Mastra entry point in `src/mastra/index.ts` and register agent:

src/mastra/index.ts

```
import { Mastra } from "@mastra/core";
 
import { weatherAgent } from "./agents/weather";
 
export const mastra = new Mastra({
  agents: { weatherAgent },
});
```

This registers your agent with Mastra so that `mastra dev` can discover and serve it.

To add Mastra to an existing project, see our Local dev docs on [mastra init](https://mastra.ai/docs/local-dev/creating-projects).

Start the Mastra Server[](https://mastra.ai/docs/getting-started/installation#start-the-mastra-server)
------------------------------------------------------------------------------------------------------

Mastra provides commands to serve your agents via REST endpoints

### Development Server[](https://mastra.ai/docs/getting-started/installation#development-server)

Run the following command to start the Mastra server:

```
npm run dev
```

If you have the mastra CLI installed, run:

```
mastra dev
```

This command creates REST API endpoints for your agents.

### Test the Endpoint[](https://mastra.ai/docs/getting-started/installation#test-the-endpoint)

You can test the agent’s endpoint using `curl` or `fetch`:

curlfetch

```
curl -X POST http://localhost:4111/api/agents/weatherAgent/generate \
-H "Content-Type: application/json" \
-d '{"messages": ["What is the weather in London?"]}'
```

```
fetch('http://localhost:4111/api/agents/weatherAgent/generate', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    messages: ['What is the weather in London?'],
  }),
})
  .then(response => response.json())
  .then(data => {
    console.log('Agent response:', data.text);
  })
  .catch(error => {
    console.error('Error:', error);
  });
```

Run from the command line[](https://mastra.ai/docs/getting-started/installation#run-from-the-command-line)
----------------------------------------------------------------------------------------------------------

If you’d like to directly call agents from the command line, you can create a script to get an agent and call it:

src/index.ts

```
import { mastra } from "./mastra";
 
async function main() {
  const agent = await mastra.getAgent("weatherAgent");
 
  const result = await agent.generate("What is the weather in London?");
 
  console.log("Agent response:", result.text);
}
 
main();
```

Then, run the script to test that everything is set up correctly:

```
npx tsx src/index.ts
```

This should output the agent’s response to your console.

* * *

Last updated on February 25, 2025

[Introduction](https://mastra.ai/docs "Introduction")[Project Structure](https://mastra.ai/docs/getting-started/project-structure "Project Structure")



================================================================================
Section 3: Content from https://mastra.ai/docs/getting-started/project-structure
================================================================================

Title: Local Project Structure | Getting Started | Mastra Docs

URL Source: https://mastra.ai/docs/getting-started/project-structure

Markdown Content:
Local Project Structure | Getting Started | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Project Structure](https://mastra.ai/docs/getting-started/project-structure#)[Using the CLI](https://mastra.ai/docs/getting-started/project-structure#using-the-cli)[Example Project Structure](https://mastra.ai/docs/getting-started/project-structure#example-project-structure)[Top-level Folders](https://mastra.ai/docs/getting-started/project-structure#top-level-folders)[Top-level Files](https://mastra.ai/docs/getting-started/project-structure#top-level-files)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/getting-started/project-structure.mdx)

[Docs](https://mastra.ai/docs "Docs")[Getting Started](https://mastra.ai/docs/getting-started/installation "Getting Started")Project Structure

Project Structure
=================

This page provides a guide for organizing folders and files in Mastra. Mastra is a modular framework, and you can use any of the modules separately or together.

You could write everything in a single file (as we showed in the quick start), or separate each agent, tool, and workflow into their own files.

We don’t enforce a specific folder structure, but we do recommend some best practices, and the CLI will scaffold a project with a sensible structure.

Using the CLI[](https://mastra.ai/docs/getting-started/project-structure#using-the-cli)
---------------------------------------------------------------------------------------

`mastra init` is an interactive CLI that allows you to:

*   **Choose a directory for Mastra files**: Specify where you want the Mastra files to be placed (default is `src/mastra`).
*   **Select components to install**: Choose which components you want to include in your project:
    *   Agents
    *   Tools
    *   Workflows
*   **Select a default LLM provider**: Choose from supported providers like OpenAI, Anthropic, or Groq.
*   **Include example code**: Decide whether to include example code to help you get started.

### Example Project Structure[](https://mastra.ai/docs/getting-started/project-structure#example-project-structure)

Assuming you select all components and include example code, your project structure will look like this:

*   root
    *   src
        *   mastra
            *   agents
                *   index.ts
            *   tools
                *   index.ts
            *   workflows
                *   index.ts
            *   index.ts
    *   .env

### Top-level Folders[](https://mastra.ai/docs/getting-started/project-structure#top-level-folders)

| Folder | Description |
| --- | --- |
| `src/mastra` | Core application folder |
| `src/mastra/agents` | Agent configurations and definitions |
| `src/mastra/tools` | Custom tool definitions |
| `src/mastra/workflows` | Workflow definitions |

### Top-level Files[](https://mastra.ai/docs/getting-started/project-structure#top-level-files)

| File | Description |
| --- | --- |
| `src/mastra/index.ts` | Main configuration file for Mastra |
| `.env` | Environment variables |

Last updated on February 25, 2025

[Installation](https://mastra.ai/docs/getting-started/installation "Installation")[Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel "Agents: Chef Michel")



================================================================================
Section 4: Content from https://mastra.ai/docs/guides/01-chef-michel
================================================================================

Title: Building an AI Chef Assistant | Mastra Agent Guides

URL Source: https://mastra.ai/docs/guides/01-chef-michel

Markdown Content:
[Docs](https://mastra.ai/docs "Docs")

Guides

Agents: Chef Michel

Agents Guide: Building a Chef Assistant
---------------------------------------

In this guide, we’ll walk through creating a “Chef Assistant” agent that helps users cook meals with available ingredients.

Prerequisites[](https://mastra.ai/docs/guides/01-chef-michel#prerequisites)
---------------------------------------------------------------------------

*   Node.js installed
*   Mastra installed: `npm install @mastra/core`

* * *

Create the Agent[](https://mastra.ai/docs/guides/01-chef-michel#create-the-agent)
---------------------------------------------------------------------------------

### Define the Agent[](https://mastra.ai/docs/guides/01-chef-michel#define-the-agent)

Create a new file `src/mastra/agents/chefAgent.ts` and define your agent:

src/mastra/agents/chefAgent.ts

```
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";
 
export const chefAgent = new Agent({
  name: "chef-agent",
  instructions:
    "You are Michel, a practical and experienced home chef" +
    "You help people cook with whatever ingredients they have available.",
  model: openai("gpt-4o-mini"),
});
```

* * *

Set Up Environment Variables[](https://mastra.ai/docs/guides/01-chef-michel#set-up-environment-variables)
---------------------------------------------------------------------------------------------------------

Create a `.env` file in your project root and add your OpenAI API key:

```
OPENAI_API_KEY=your_openai_api_key
```

* * *

Register the Agent with Mastra[](https://mastra.ai/docs/guides/01-chef-michel#register-the-agent-with-mastra)
-------------------------------------------------------------------------------------------------------------

In your main file, register the agent:

```
import { Mastra } from "@mastra/core";
 
import { chefAgent } from "./agents/chefAgent";
 
export const mastra = new Mastra({
  agents: { chefAgent },
});
```

* * *

Interacting with the Agent[](https://mastra.ai/docs/guides/01-chef-michel#interacting-with-the-agent)
-----------------------------------------------------------------------------------------------------

### Generating Text Responses[](https://mastra.ai/docs/guides/01-chef-michel#generating-text-responses)

```
async function main() {
  const query =
    "In my kitchen I have: pasta, canned tomatoes, garlic, olive oil, and some dried herbs (basil and oregano). What can I make?";
  console.log(`Query: ${query}`);
 
  const response = await chefAgent.generate([{ role: "user", content: query }]);
  console.log("\n👨‍🍳 Chef Michel:", response.text);
}
 
main();
```

Run the script:

Output:

```
Query: In my kitchen I have: pasta, canned tomatoes, garlic, olive oil, and some dried herbs (basil and oregano). What can I make?

👨‍🍳 Chef Michel: You can make a delicious pasta al pomodoro! Here's how...
```

* * *

### Streaming Responses[](https://mastra.ai/docs/guides/01-chef-michel#streaming-responses)

```
async function main() {
  const query =
    "Now I'm over at my friend's house, and they have: chicken thighs, coconut milk, sweet potatoes, and some curry powder.";
  console.log(`Query: ${query}`);
 
  const stream = await chefAgent.stream([{ role: "user", content: query }]);
 
  console.log("\n Chef Michel: ");
 
  for await (const chunk of stream.textStream) {
    process.stdout.write(chunk);
  }
 
  console.log("\n\n✅ Recipe complete!");
}
 
main();
```

Output:

```
Query: Now I'm over at my friend's house, and they have: chicken thighs, coconut milk, sweet potatoes, and some curry powder.

👨‍🍳 Chef Michel:
Great! You can make a comforting chicken curry...

✅ Recipe complete!
```

* * *

### Generating a Recipe with Structured Data[](https://mastra.ai/docs/guides/01-chef-michel#generating-a-recipe-with-structured-data)

```
import { z } from "zod";
 
async function main() {
  const query =
    "I want to make lasagna, can you generate a lasagna recipe for me?";
  console.log(`Query: ${query}`);
 
  // Define the Zod schema
  const schema = z.object({
    ingredients: z.array(
      z.object({
        name: z.string(),
        amount: z.string(),
      }),
    ),
    steps: z.array(z.string()),
  });
 
  const response = await chefAgent.generate(
    [{ role: "user", content: query }],
    { output: schema },
  );
  console.log("\n👨‍🍳 Chef Michel:", response.object);
}
 
main();
```

Output:

```
Query: I want to make lasagna, can you generate a lasagna recipe for me?

👨‍🍳 Chef Michel: {
  ingredients: [
    { name: "Lasagna noodles", amount: "12 sheets" },
    { name: "Ground beef", amount: "1 pound" },
    // ...
  ],
  steps: [
    "Preheat oven to 375°F (190°C).",
    "Cook the lasagna noodles according to package instructions.",
    // ...
  ]
}
```

* * *

Running the Agent Server[](https://mastra.ai/docs/guides/01-chef-michel#running-the-agent-server)
-------------------------------------------------------------------------------------------------

### Using `mastra dev`[](https://mastra.ai/docs/guides/01-chef-michel#using-mastra-dev)

You can run your agent as a service using the `mastra dev` command:

This will start a server exposing endpoints to interact with your registered agents.

### Accessing the Chef Assistant API[](https://mastra.ai/docs/guides/01-chef-michel#accessing-the-chef-assistant-api)

By default, `mastra dev` runs on `http://localhost:4111`. Your Chef Assistant agent will be available at:

```
POST http://localhost:4111/api/agents/chefAgent/generate
```

### Interacting with the Agent via `curl`[](https://mastra.ai/docs/guides/01-chef-michel#interacting-with-the-agent-via-curl)

You can interact with the agent using `curl` from the command line:

```
curl -X POST http://localhost:4111/api/agents/chefAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      {
        "role": "user",
        "content": "I have eggs, flour, and milk. What can I make?"
      }
    ]
  }'
```

**Sample Response:**

```
{
  "text": "You can make delicious pancakes! Here's a simple recipe..."
}
```

Last updated on February 25, 2025

[Project Structure](https://mastra.ai/docs/getting-started/project-structure "Project Structure")[Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent "Tools: Stock Agent")



================================================================================
Section 5: Content from https://mastra.ai/docs/guides/02-stock-agent
================================================================================

Title: Building an AI Stock Agent | Mastra Agents | Guides

URL Source: https://mastra.ai/docs/guides/02-stock-agent

Markdown Content:
We’re going to create a simple agent that fetches the last day’s closing stock price for a given symbol. This example will show you how to create a tool, add it to an agent, and use the agent to fetch stock prices.

Project Structure[](https://mastra.ai/docs/guides/02-stock-agent#project-structure)
-----------------------------------------------------------------------------------

```
stock-price-agent/
├── src/
│   ├── agents/
│   │   └── stockAgent.ts
│   ├── tools/
│   │   └── stockPrices.ts
│   └── index.ts
├── package.json
└── .env
```

* * *

Initialize the Project and Install Dependencies[](https://mastra.ai/docs/guides/02-stock-agent#initialize-the-project-and-install-dependencies)
-----------------------------------------------------------------------------------------------------------------------------------------------

First, create a new directory for your project and navigate into it:

```
mkdir stock-price-agent
cd stock-price-agent
```

Initialize a new Node.js project and install the required dependencies:

```
npm init -y
npm install @mastra/core zod
```

Set Up Environment Variables

Create a `.env` file at the root of your project to store your OpenAI API key.

```
OPENAI_API_KEY=your_openai_api_key
```

Create the necessary directories and files:

```
mkdir -p src/agents src/tools
touch src/agents/stockAgent.ts src/tools/stockPrices.ts src/index.ts
```

* * *

Create the Stock Price Tool[](https://mastra.ai/docs/guides/02-stock-agent#create-the-stock-price-tool)
-------------------------------------------------------------------------------------------------------

Next, we’ll create a tool that fetches the last day’s closing stock price for a given symbol.

```
import { createTool } from "@mastra/core/tools";
import { z } from "zod";
 
const getStockPrice = async (symbol: string) => {
  const data = await fetch(
    `https://mastra-stock-data.vercel.app/api/stock-data?symbol=${symbol}`,
  ).then((r) => r.json());
  return data.prices["4. close"];
};
 
export const stockPrices = createTool({
  id: "Get Stock Price",
  inputSchema: z.object({
    symbol: z.string(),
  }),
  description: `Fetches the last day's closing stock price for a given symbol`,
  execute: async ({ context: { symbol } }) => {
    console.log("Using tool to fetch stock price for", symbol);
    return {
      symbol,
      currentPrice: await getStockPrice(symbol),
    };
  },
});
```

* * *

Add the Tool to an Agent[](https://mastra.ai/docs/guides/02-stock-agent#add-the-tool-to-an-agent)
-------------------------------------------------------------------------------------------------

We’ll create an agent and add the `stockPrices` tool to it.

```
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
 
import * as tools from "../tools/stockPrices";
 
export const stockAgent = new Agent<typeof tools>({
  name: "Stock Agent",
  instructions:
    "You are a helpful assistant that provides current stock prices. When asked about a stock, use the stock price tool to fetch the stock price.",
  model: openai("gpt-4o-mini"),
  tools: {
    stockPrices: tools.stockPrices,
  },
});
```

* * *

Set Up the Mastra Instance[](https://mastra.ai/docs/guides/02-stock-agent#set-up-the-mastra-instance)
-----------------------------------------------------------------------------------------------------

We need to initialize the Mastra instance with our agent and tool.

```
import { Mastra } from "@mastra/core";
 
import { stockAgent } from "./agents/stockAgent";
 
export const mastra = new Mastra({
  agents: { stockAgent },
});
```

Serve the Application[](https://mastra.ai/docs/guides/02-stock-agent#serve-the-application)
-------------------------------------------------------------------------------------------

Instead of running the application directly, we’ll use the `mastra dev` command to start the server. This will expose your agent via REST API endpoints, allowing you to interact with it over HTTP.

In your terminal, start the Mastra server by running:

This command will allow you to test your stockPrices tool and your stockAgent within the playground.

This will also start the server and make your agent available at:

```
http://localhost:4111/api/agents/stockAgent/generate
```

* * *

Test the Agent with cURL[](https://mastra.ai/docs/guides/02-stock-agent#test-the-agent-with-curl)
-------------------------------------------------------------------------------------------------

Now that your server is running, you can test your agent’s endpoint using `curl`:

```
curl -X POST http://localhost:4111/api/agents/stockAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      { "role": "user", "content": "What is the current stock price of Apple (AAPL)?" }
    ]
  }'
```

**Expected Response:**

You should receive a JSON response similar to:

```
{
  "text": "The current price of Apple (AAPL) is $174.55.",
  "agent": "Stock Agent"
}
```

This indicates that your agent successfully processed the request, used the `stockPrices` tool to fetch the stock price, and returned the result.

Last updated on February 25, 2025

[Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel "Agents: Chef Michel")[Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter "Workflows: AI Recruiter")



================================================================================
Section 6: Content from https://mastra.ai/docs/guides/03-recruiter
================================================================================

Title: Building an AI Recruiter | Mastra Workflows | Guides

URL Source: https://mastra.ai/docs/guides/03-recruiter

Markdown Content:
Building an AI Recruiter | Mastra Workflows | Guides
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Introduction](https://mastra.ai/docs/guides/03-recruiter#)[1\. Imports and Setup](https://mastra.ai/docs/guides/03-recruiter#1-imports-and-setup)[2\. Step One: Gather Candidate Info](https://mastra.ai/docs/guides/03-recruiter#2-step-one-gather-candidate-info)[3\. Technical Question Step](https://mastra.ai/docs/guides/03-recruiter#3-technical-question-step)[4\. Behavioral Question Step](https://mastra.ai/docs/guides/03-recruiter#4-behavioral-question-step)[5\. Define the Workflow](https://mastra.ai/docs/guides/03-recruiter#5-define-the-workflow)[6\. Execute the Workflow](https://mastra.ai/docs/guides/03-recruiter#6-execute-the-workflow)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/guides/03-recruiter.mdx)

[Docs](https://mastra.ai/docs "Docs")[Guides](https://mastra.ai/docs/guides/01-chef-michel "Guides")Workflows: AI Recruiter

Introduction
============

In this guide, you’ll learn how Mastra helps you build workflows with LLMs.

We’ll walk through creating a workflow that gathers information from a candidate’s resume, then branches to either a technical or behavioral question based on the candidate’s profile. Along the way, you’ll see how to structure workflow steps, handle branching, and integrate LLM calls.

Below is a concise version of the workflow. It starts by importing the necessary modules, sets up Mastra, defines steps to extract and classify candidate data, and then asks suitable follow-up questions. Each code block is followed by a short explanation of what it does and why it’s useful.

1\. Imports and Setup[](https://mastra.ai/docs/guides/03-recruiter#1-imports-and-setup)
---------------------------------------------------------------------------------------

You need to import Mastra tools and Zod to handle workflow definitions and data validation.

src/mastra/index.ts

```
 
import { Mastra } from "@mastra/core";
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";
```

Add your `OPENAI_API_KEY` to the `.env` file.

.env

```
OPENAI_API_KEY=<your-openai-key>
```

2\. Step One: Gather Candidate Info[](https://mastra.ai/docs/guides/03-recruiter#2-step-one-gather-candidate-info)
------------------------------------------------------------------------------------------------------------------

You want to extract candidate details from the resume text and classify them as technical or non-technical. This step calls an LLM to parse the resume and return structured JSON, including the name, technical status, specialty, and the original resume text. The code reads resumeText from trigger data, prompts the LLM, and returns organized fields for use in subsequent steps.

src/mastra/index.ts

```
import { Agent } from '@mastra/core/agent';
import { openai } from "@ai-sdk/openai";
 
const recruiter = new Agent({
  instructions: `You are a recruiter.`,
  model: openai("gpt-4o-mini"),
})
 
const gatherCandidateInfo = new Step({
  id: "gatherCandidateInfo",
  inputSchema: z.object({
    resumeText: z.string(),
  }),
  outputSchema: z.object({
    candidateName: z.string(),
    isTechnical: z.boolean(),
    specialty: z.string(),
    resumeText: z.string(),
  }),
  execute: async ({ context }) => {
    const resumeText = context?.getStepResult<{
      resumeText: string;
    }>("trigger")?.resumeText;
 
    const prompt = `
          Extract details from the resume text:
          "${resumeText}"
        `;
 
    const res = await recruiter.generate(prompt, {
      output: z.object({
        candidateName: z.string(),
        isTechnical: z.boolean(),
        specialty: z.string(),
        resumeText: z.string(),
      }),
    });
 
    return res.object;
  },
});
```

3\. Technical Question Step[](https://mastra.ai/docs/guides/03-recruiter#3-technical-question-step)
---------------------------------------------------------------------------------------------------

This step prompts a candidate who is identified as technical for more information about how they got into their specialty. It uses the entire resume text so the LLM can craft a relevant follow-up question. The code generates a question about the candidate’s specialty.

src/mastra/index.ts

```
interface CandidateInfo {
  candidateName: string;
  isTechnical: boolean;
  specialty: string;
  resumeText: string;
}
 
const askAboutSpecialty = new Step({
  id: "askAboutSpecialty",
  outputSchema: z.object({
    question: z.string(),
  }),
  execute: async ({ context }) => {
    const candidateInfo = context?.getStepResult<CandidateInfo>(
      "gatherCandidateInfo",
    );
 
    const prompt = `
          You are a recruiter. Given the resume below, craft a short question
          for ${candidateInfo?.candidateName} about how they got into "${candidateInfo?.specialty}".
          Resume: ${candidateInfo?.resumeText}
        `;
    const res = await recruiter.generate(prompt);
 
    return { question: res?.text?.trim() || "" };
  },
});
```

4\. Behavioral Question Step[](https://mastra.ai/docs/guides/03-recruiter#4-behavioral-question-step)
-----------------------------------------------------------------------------------------------------

If the candidate is non-technical, you want a different follow-up question. This step asks what interests them most about the role, again referencing their complete resume text. The code solicits a role-focused query from the LLM.

src/mastra/index.ts

```
const askAboutRole = new Step({
  id: "askAboutRole",
  outputSchema: z.object({
    question: z.string(),
  }),
  execute: async ({ context }) => {
    const candidateInfo = context?.getStepResult<CandidateInfo>(
      "gatherCandidateInfo",
    );
 
    const prompt = `
          You are a recruiter. Given the resume below, craft a short question
          for ${candidateInfo?.candidateName} asking what interests them most about this role.
          Resume: ${candidateInfo?.resumeText}
        `;
    const res = await recruiter.generate(prompt);
    return { question: res?.text?.trim() || "" };
  },
});
```

5\. Define the Workflow[](https://mastra.ai/docs/guides/03-recruiter#5-define-the-workflow)
-------------------------------------------------------------------------------------------

You now combine the steps to implement branching logic based on the candidate’s technical status. The workflow first gathers candidate data, then either asks about their specialty or about their role, depending on isTechnical. The code chains gatherCandidateInfo with askAboutSpecialty and askAboutRole, and commits the workflow.

src/mastra/index.ts

```
const candidateWorkflow = new Workflow({
  name: "candidate-workflow",
  triggerSchema: z.object({
    resumeText: z.string(),
  }),
});
 
candidateWorkflow
  .step(gatherCandidateInfo)
  .then(askAboutSpecialty, {
    when: { "gatherCandidateInfo.isTechnical": true },
  })
  .after(gatherCandidateInfo)
  .step(askAboutRole, {
    when: { "gatherCandidateInfo.isTechnical": false },
  });
 
candidateWorkflow.commit();
```

6\. Execute the Workflow[](https://mastra.ai/docs/guides/03-recruiter#6-execute-the-workflow)
---------------------------------------------------------------------------------------------

src/mastra/index.ts

```
const mastra = new Mastra({
  workflows: {
    candidateWorkflow,
  },
});
 
(async () => {
  const { runId, start } = mastra.getWorkflow("candidateWorkflow").createRun();
 
  console.log("Run", runId);
 
  const runResult = await start({
    triggerData: { resumeText: "Simulated resume content..." },
  });
 
  console.log("Final output:", runResult.results);
})();
```

You’ve just built a workflow to parse a resume and decide which question to ask based on the candidate’s technical abilities. Congrats and happy hacking!

Last updated on February 25, 2025

[Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent "Tools: Stock Agent")[Overview](https://mastra.ai/docs/agents/00-overview "Overview")



================================================================================
Section 7: Content from https://mastra.ai/docs/agents/00-overview
================================================================================

Title: Creating and Calling Agents | Agent Documentation | Mastra

URL Source: https://mastra.ai/docs/agents/00-overview

Markdown Content:
Creating and Calling Agents | Agent Documentation | Mastra
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

[](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

Light

### On This Page

[1\. Creating an Agent](https://mastra.ai/docs/agents/00-overview#1-creating-an-agent)[Registering the Agent](https://mastra.ai/docs/agents/00-overview#registering-the-agent)[2\. Generating and streaming text](https://mastra.ai/docs/agents/00-overview#2-generating-and-streaming-text)[Generating text](https://mastra.ai/docs/agents/00-overview#generating-text)[Streaming responses](https://mastra.ai/docs/agents/00-overview#streaming-responses)[**3\. Structured Output**](https://mastra.ai/docs/agents/00-overview#3-structured-output)[Using JSON Schema](https://mastra.ai/docs/agents/00-overview#using-json-schema)[Using Zod](https://mastra.ai/docs/agents/00-overview#using-zod)[**4\. Running Agents**](https://mastra.ai/docs/agents/00-overview#4-running-agents)[Starting the Server](https://mastra.ai/docs/agents/00-overview#starting-the-server)[Interacting with the Agent](https://mastra.ai/docs/agents/00-overview#interacting-with-the-agent)[Next Steps](https://mastra.ai/docs/agents/00-overview#next-steps)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/agents/00-overview.mdx)

[Docs](https://mastra.ai/docs "Docs")AgentsOverview

Creating and Calling Agents
===========================

Agents in Mastra are systems where the language model can autonomously decide on a sequence of actions to perform tasks. They have access to tools, workflows, and synced data, enabling them to perform complex tasks and interact with external systems. Agents can invoke your custom functions, utilize third-party APIs through integrations, and access knowledge bases you have built.

Agents are like employees who can be used for ongoing projects. They have names, persistent memory, consistent model configurations, and instructions across calls, as well as a set of enabled tools.

1\. Creating an Agent[](https://mastra.ai/docs/agents/00-overview#1-creating-an-agent)
--------------------------------------------------------------------------------------

To create an agent in Mastra, you use the `Agent` class and define its properties:

src/mastra/agents/index.ts

```
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
 
export const myAgent = new Agent({
  name: "My Agent",
  instructions: "You are a helpful assistant.",
  model: openai("gpt-4o-mini"),
});
```

**Note:** Ensure that you have set the necessary environment variables, such as your OpenAI API key, in your `.env` file:

.env

```
OPENAI_API_KEY=your_openai_api_key
```

Also, make sure you have the `@mastra/core` package installed:

npmpnpmyarnbun

```
npm install @mastra/core
```

```
pnpm add @mastra/core
```

```
yarn add @mastra/core
```

```
bun add @mastra/core
```

### Registering the Agent[](https://mastra.ai/docs/agents/00-overview#registering-the-agent)

Register your agent with Mastra to enable logging and access to configured tools and integrations:

src/mastra/index.ts

```
import { Mastra } from "@mastra/core";
import { myAgent } from "./agents";
 
export const mastra = new Mastra({
  agents: { myAgent },
});
```

2\. Generating and streaming text[](https://mastra.ai/docs/agents/00-overview#2-generating-and-streaming-text)
--------------------------------------------------------------------------------------------------------------

### Generating text[](https://mastra.ai/docs/agents/00-overview#generating-text)

Use the `.generate()` method to have your agent produce text responses:

src/mastra/index.ts

```
const response = await myAgent.generate([
  { role: "user", content: "Hello, how can you assist me today?" },
]);
 
console.log("Agent:", response.text);
```

### Streaming responses[](https://mastra.ai/docs/agents/00-overview#streaming-responses)

For more real-time responses, you can stream the agent’s response:

src/mastra/index.ts

```
const stream = await myAgent.stream([
  { role: "user", content: "Tell me a story." },
]);
 
console.log("Agent:");
 
for await (const chunk of stream.textStream) {
  process.stdout.write(chunk);
}
```

**3\. Structured Output**[](https://mastra.ai/docs/agents/00-overview#3-structured-output)
------------------------------------------------------------------------------------------

Agents can return structured data by providing a JSON Schema or using a Zod schema.

### Using JSON Schema[](https://mastra.ai/docs/agents/00-overview#using-json-schema)

```
const schema = {
  type: "object",
  properties: {
    summary: { type: "string" },
    keywords: { type: "array", items: { type: "string" } },
  },
  additionalProperties: false,
  required: ["summary", "keywords"],
};
 
const response = await myAgent.generate(
  [
    {
      role: "user",
      content:
        "Please provide a summary and keywords for the following text: ...",
    },
  ],
  {
    output: schema,
  },
);
 
console.log("Structured Output:", response.object);
```

### Using Zod[](https://mastra.ai/docs/agents/00-overview#using-zod)

You can also use Zod schemas for type-safe structured outputs.

First, install Zod:

npmpnpmyarnbun

```
npm install zod
```

```
pnpm add zod
```

```
yarn add zod
```

```
bun add zod
```

Then, define a Zod schema and use it with the agent:

src/mastra/index.ts

```
import { z } from "zod";
 
// Define the Zod schema
const schema = z.object({
  summary: z.string(),
  keywords: z.array(z.string()),
});
 
// Use the schema with the agent
const response = await myAgent.generate(
  [
    {
      role: "user",
      content:
        "Please provide a summary and keywords for the following text: ...",
    },
  ],
  {
    output: schema,
  },
);
 
console.log("Structured Output:", response.object);
```

This allows you to have strong typing and validation for the structured data returned by the agent.

**4\. Running Agents**[](https://mastra.ai/docs/agents/00-overview#4-running-agents)
------------------------------------------------------------------------------------

Mastra provides a CLI command `mastra dev` to run your agents behind an API. By default, this looks for exported agents in files in the `src/mastra/agents` directory.

### Starting the Server[](https://mastra.ai/docs/agents/00-overview#starting-the-server)

```
mastra dev
```

This will start the server and make your agent available at `http://localhost:4111/api/agents/myAgent/generate`.

### Interacting with the Agent[](https://mastra.ai/docs/agents/00-overview#interacting-with-the-agent)

You can interact with the agent using `curl` from the command line:

```
curl -X POST http://localhost:4111/api/agents/myAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      { "role": "user", "content": "Hello, how can you assist me today?" }
    ]
  }'
```

Next Steps[](https://mastra.ai/docs/agents/00-overview#next-steps)
------------------------------------------------------------------

*   Learn about Agent Memory in the [Agent Memory](https://mastra.ai/docs/agents/01-agent-memory) guide.
*   Learn about Agent Tools in the [Agent Tools](https://mastra.ai/docs/agents/02-adding-tools) guide.
*   See an example agent in the [Chef Michel](https://mastra.ai/docs/guides/01-chef-michel) example.

[Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter "Workflows: AI Recruiter")[Memory](https://mastra.ai/docs/agents/01-agent-memory "Memory")



================================================================================
Section 8: Content from https://mastra.ai/docs/agents/01-agent-memory
================================================================================

Title: Using Agent Memory | Agents | Mastra Docs

URL Source: https://mastra.ai/docs/agents/01-agent-memory

Markdown Content:
Agents in Mastra have a sophisticated memory system that stores conversation history and contextual information. This memory system supports both traditional message storage and vector-based semantic search, enabling agents to maintain state across interactions and retrieve relevant historical context.

Threads and Resources[](https://mastra.ai/docs/agents/01-agent-memory#threads-and-resources)
--------------------------------------------------------------------------------------------

In Mastra, you can organize conversations by a . This allows the system to maintain context and retrieve historical messages that belong to the same discussion.

Mastra also supports the concept of a , which typically represents the user involved in the conversation, ensuring that the agent’s memory and context are correctly associated with the right entity.

This separation allows you to manage multiple conversations (threads) for a single user or even share conversation context across users if needed.

Managing Conversation Context[](https://mastra.ai/docs/agents/01-agent-memory#managing-conversation-context)
------------------------------------------------------------------------------------------------------------

The key to getting good responses from LLMs is feeding them the right context.

Mastra has a Memory API that stores and manages conversation history and contextual information. The Memory API uses a storage backend to persist conversation history and contextual information (more on this later).

The Memory API uses two main mechanisms to maintain context in conversations, recent message history and semantic search.

### Recent Message History[](https://mastra.ai/docs/agents/01-agent-memory#recent-message-history)

By default, Memory keeps track of the 40 most recent messages in a conversation. You can customize this with the setting:

### Semantic Search[](https://mastra.ai/docs/agents/01-agent-memory#semantic-search)

Semantic search is enabled by default in Mastra. While FastEmbed (bge-small-en-v1.5) and LibSQL are included by default, you can use any embedder (like OpenAI or Cohere) and vector database (like PostgreSQL, Pinecone, or Chroma) that fits your needs.

This allows your agent to find and recall relevant information from earlier in the conversation:

When semantic search is used:

1.  The message is converted to a vector embedding
2.  Similar messages are found using vector similarity search
3.  Surrounding context is included based on
4.  All relevant context is provided to the agent

You can also customize the vector database and embedder:

Memory Configuration[](https://mastra.ai/docs/agents/01-agent-memory#memory-configuration)
------------------------------------------------------------------------------------------

The Mastra memory system is highly configurable and supports multiple storage backends. By default, it uses LibSQL for storage and vector search, and FastEmbed for embeddings.

### Basic Configuration[](https://mastra.ai/docs/agents/01-agent-memory#basic-configuration)

For most use cases, you can use the default configuration:

### Custom Configuration[](https://mastra.ai/docs/agents/01-agent-memory#custom-configuration)

For more control, you can customize the storage backend, vector database, and memory options:

### Overriding Memory Settings[](https://mastra.ai/docs/agents/01-agent-memory#overriding-memory-settings)

When you initialize a Mastra instance with memory configuration, all agents will automatically use these memory settings when you call their or methods. You can override these default settings for individual calls:

### Configuring Memory for Different Use Cases[](https://mastra.ai/docs/agents/01-agent-memory#configuring-memory-for-different-use-cases)

You can adjust memory settings based on your agent’s needs:

Storage Options[](https://mastra.ai/docs/agents/01-agent-memory#storage-options)
--------------------------------------------------------------------------------

Mastra currently supports several storage backends:

### LibSQL Storage[](https://mastra.ai/docs/agents/01-agent-memory#libsql-storage)

### PostgreSQL Storage[](https://mastra.ai/docs/agents/01-agent-memory#postgresql-storage)

### Upstash KV Storage[](https://mastra.ai/docs/agents/01-agent-memory#upstash-kv-storage)

Vector Search[](https://mastra.ai/docs/agents/01-agent-memory#vector-search)
----------------------------------------------------------------------------

Mastra supports semantic search through vector embeddings. When configured with a vector store, agents can find relevant historical messages based on semantic similarity. To enable vector search:

1.  Configure a vector store (currently supports PostgreSQL):

2.  Configure embedding options:

3.  Enable vector search in memory configuration options:

Using Memory in Agents[](https://mastra.ai/docs/agents/01-agent-memory#using-memory-in-agents)
----------------------------------------------------------------------------------------------

Once configured, the memory system is automatically used by agents. Here’s how to use it:

The memory system will automatically:

1.  Store all messages in the configured storage backend
2.  Create vector embeddings for semantic search (if configured)
3.  Inject relevant historical context into new conversations
4.  Maintain conversation threads and context

Manually Managing Threads[](https://mastra.ai/docs/agents/01-agent-memory#manually-managing-threads)
----------------------------------------------------------------------------------------------------

While threads are automatically managed when using agent methods, you can also manually manage threads using the memory API directly. This is useful for advanced use cases like:

*   Creating threads before starting conversations
*   Managing thread metadata
*   Explicitly saving or retrieving messages
*   Cleaning up old threads

Here’s how to manually work with threads:

Note that in most cases, you won’t need to manage threads manually since the agent’s and methods handle thread management automatically. Manual thread management is primarily useful for advanced use cases or when you need more fine-grained control over the conversation history.

### Working Memory[](https://mastra.ai/docs/agents/01-agent-memory#working-memory)

Working memory is a powerful feature that allows agents to maintain persistent information across conversations, even with minimal context. This is particularly useful for remembering user preferences, personal details, or any other contextual information that should persist throughout interactions.

Inspired by the working memory concept from the MemGPT whitepaper, our implementation improves upon it in several key ways:

*   No extra roundtrips or tool calls required
*   Full support for streaming messages
*   Seamless integration with the agent’s natural response flow

#### How It Works[](https://mastra.ai/docs/agents/01-agent-memory#how-it-works)

Working memory operates through a system of XML tags and automatic updates:

1.  **Template Structure**: Define what information should be remembered using XML tags. The Memory class comes with a comprehensive default template for user information, or you can create your own template to match your specific needs.
    
2.  **Automatic Updates**: The Memory class injects special instructions into the agent’s system prompt that tell it to:
    
    *   Store relevant information by including tags in its responses
    *   Update information proactively when anything changes
    *   Maintain the XML structure while updating values
    *   Keep this process invisible to users
3.  **Memory Management**: The system:
    
    *   Extracts working memory blocks from agent responses
    *   Stores them for future use
    *   Injects working memory into the system prompt on the next agent call

The agent is instructed to be proactive about storing information - if there’s any doubt about whether something might be useful later, it should be stored. This helps maintain conversation context even when using very small context windows.

#### Basic Usage[](https://mastra.ai/docs/agents/01-agent-memory#basic-usage)

Working memory becomes particularly powerful when combined with specialized system prompts. For example, you could create a TODO list manager that maintains state even though it only has access to the previous message:

### Handling Memory Updates in Streaming[](https://mastra.ai/docs/agents/01-agent-memory#handling-memory-updates-in-streaming)

When an agent responds, it includes working memory updates directly in its response stream. These updates appear as XML blocks in the text:

To prevent these memory blocks from being visible to users while still allowing the system to process them, use the utility:

You can also hook into memory update events:

The utility:

*   Removes content between specified XML tags in a streaming response
*   Optionally provides lifecycle callbacks for memory updates
*   Handles tags that might be split across stream chunks

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/agents/00-overview "Overview")[Tools](https://mastra.ai/docs/agents/02-adding-tools "Tools")



================================================================================
Section 9: Content from https://mastra.ai/docs/agents/02-adding-tools
================================================================================

Title: Agent Tool Selection | Agent Documentation | Mastra

URL Source: https://mastra.ai/docs/agents/02-adding-tools

Markdown Content:
Agent Tool Selection | Agent Documentation | Mastra
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Agent Tool Selection](https://mastra.ai/docs/agents/02-adding-tools#)[Creating Tools](https://mastra.ai/docs/agents/02-adding-tools#creating-tools)[Adding Tools to an Agent](https://mastra.ai/docs/agents/02-adding-tools#adding-tools-to-an-agent)[Registering the Agent](https://mastra.ai/docs/agents/02-adding-tools#registering-the-agent)[Debugging Tools](https://mastra.ai/docs/agents/02-adding-tools#debugging-tools)[Calling an Agent with a Tool](https://mastra.ai/docs/agents/02-adding-tools#calling-an-agent-with-a-tool)[Example: Interacting with the Agent](https://mastra.ai/docs/agents/02-adding-tools#example-interacting-with-the-agent)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/agents/02-adding-tools.mdx)

[Docs](https://mastra.ai/docs "Docs")[Agents](https://mastra.ai/docs/agents/00-overview "Agents")Tools

Agent Tool Selection
====================

Tools are typed functions that can be executed by agents or workflows, with built-in integration access and parameter validation. Each tool has a schema that defines its inputs, an executor function that implements its logic, and access to configured integrations.

Creating Tools[](https://mastra.ai/docs/agents/02-adding-tools#creating-tools)
------------------------------------------------------------------------------

In this section, we’ll walk through the process of creating a tool that can be used by your agents. Let’s create a simple tool that fetches current weather information for a given city.

src/mastra/tools/weatherInfo.ts

```
import { createTool } from "@mastra/core/tools";
import { z } from "zod";
 
const getWeatherInfo = async (city: string) => {
  // Replace with an actual API call to a weather service
  const data = await fetch(`https://api.example.com/weather?city=${city}`).then(
    (r) => r.json(),
  );
  return data;
};
 
export const weatherInfo = createTool({
  id: "Get Weather Information",
  inputSchema: z.object({
    city: z.string(),
  }),
  description: `Fetches the current weather information for a given city`,
  execute: async ({ context: { city } }) => {
    console.log("Using tool to fetch weather information for", city);
    return await getWeatherInfo(city);
  },
});
```

Adding Tools to an Agent[](https://mastra.ai/docs/agents/02-adding-tools#adding-tools-to-an-agent)
--------------------------------------------------------------------------------------------------

Now we’ll add the tool to an agent. We’ll create an agent that can answer questions about the weather and configure it to use our `weatherInfo` tool.

src/mastra/agents/weatherAgent.ts

```
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import * as tools from "../tools/weatherInfo";
 
export const weatherAgent = new Agent<typeof tools>({
  name: "Weather Agent",
  instructions:
    "You are a helpful assistant that provides current weather information. When asked about the weather, use the weather information tool to fetch the data.",
  model: openai("gpt-4o-mini"),
  tools: {
    weatherInfo: tools.weatherInfo,
  },
});
```

Registering the Agent[](https://mastra.ai/docs/agents/02-adding-tools#registering-the-agent)
--------------------------------------------------------------------------------------------

We need to initialize Mastra with our agent.

src/index.ts

```
import { Mastra } from "@mastra/core";
import { weatherAgent } from "./agents/weatherAgent";
 
export const mastra = new Mastra({
  agents: { weatherAgent },
});
```

This registers your agent with Mastra, making it available for use.

Debugging Tools[](https://mastra.ai/docs/agents/02-adding-tools#debugging-tools)
--------------------------------------------------------------------------------

You can test tools using Vitest or any other testing framework. Writing unit tests for your tools ensures they behave as expected and helps catch errors early.

Calling an Agent with a Tool[](https://mastra.ai/docs/agents/02-adding-tools#calling-an-agent-with-a-tool)
----------------------------------------------------------------------------------------------------------

Now we can call the agent, and it will use the tool to fetch the weather information.

Example: Interacting with the Agent[](https://mastra.ai/docs/agents/02-adding-tools#example-interacting-with-the-agent)
-----------------------------------------------------------------------------------------------------------------------

src/index.ts

```
import { mastra } from "./index";
 
async function main() {
  const agent = mastra.getAgent("weatherAgent");
  const response = await agent.generate(
    "What's the weather like in New York City today?",
  );
 
  console.log(response.text);
}
 
main();
```

The agent will use the `weatherInfo` tool to get the current weather in New York City and respond accordingly.

Last updated on February 25, 2025

[Memory](https://mastra.ai/docs/agents/01-agent-memory "Memory")[Voice](https://mastra.ai/docs/agents/03-adding-voice "Voice")



================================================================================
Section 10: Content from https://mastra.ai/docs/agents/03-adding-voice
================================================================================

Title: Adding Voice to Agents

URL Source: https://mastra.ai/docs/agents/03-adding-voice

Markdown Content:
Adding Voice to Agents
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Adding Voice to Agents](https://mastra.ai/docs/agents/03-adding-voice#)[Using a Single Provider](https://mastra.ai/docs/agents/03-adding-voice#using-a-single-provider)[Using Multiple Providers](https://mastra.ai/docs/agents/03-adding-voice#using-multiple-providers)[Working with Audio Streams](https://mastra.ai/docs/agents/03-adding-voice#working-with-audio-streams)[Saving Speech Output](https://mastra.ai/docs/agents/03-adding-voice#saving-speech-output)[Transcribing Audio Input](https://mastra.ai/docs/agents/03-adding-voice#transcribing-audio-input)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/agents/03-adding-voice.mdx)

[Docs](https://mastra.ai/docs "Docs")[Agents](https://mastra.ai/docs/agents/00-overview "Agents")Voice

Adding Voice to Agents
======================

Mastra agents can be enhanced with voice capabilities, allowing them to speak responses and listen to user input. You can configure an agent to use either a single voice provider or combine multiple providers for different operations.

Using a Single Provider[](https://mastra.ai/docs/agents/03-adding-voice#using-a-single-provider)
------------------------------------------------------------------------------------------------

The simplest way to add voice to an agent is to use a single provider for both speaking and listening:

```
import { Agent } from "@mastra/core/agent";
import { OpenAIVoice } from "@mastra/voice-openai";
 
// Initialize the voice provider with default settings
const voice = new OpenAIVoice();
 
// Create an agent with voice capabilities
export const agent = new Agent({
  name: 'Agent',
  instructions: `You are a helpful assistant with both STT and TTS capabilities.`,
  model: openai('gpt-4o'),
  voice
});
 
// The agent can now use voice for interaction
await agent.speak("Hello, I'm your AI assistant!");
const userInput = await agent.listen();
```

Using Multiple Providers[](https://mastra.ai/docs/agents/03-adding-voice#using-multiple-providers)
--------------------------------------------------------------------------------------------------

For more flexibility, you can use different providers for speaking and listening using the CompositeVoice class:

```
import { Agent } from "@mastra/core/agent";
import { CompositeVoice } from "@mastra/core/voice";
import { OpenAIVoice } from "@mastra/voice-openai";
import { PlayAIVoice } from "@mastra/voice-playai";
 
export const agent = new Agent({
  name: 'Agent',
  instructions: `You are a helpful assistant with both STT and TTS capabilities.`,
  model: openai('gpt-4o'),
 
  // Create a composite voice using OpenAI for listening and PlayAI for speaking
  voice: new CompositeVoice({
    listenProvider: new OpenAIVoice(),
    speakProvider: new PlayAIVoice(),
  }),
});
```

Working with Audio Streams[](https://mastra.ai/docs/agents/03-adding-voice#working-with-audio-streams)
------------------------------------------------------------------------------------------------------

The `speak()` and `listen()` methods work with Node.js streams. Here’s how to save and load audio files:

### Saving Speech Output[](https://mastra.ai/docs/agents/03-adding-voice#saving-speech-output)

```
import { createWriteStream } from 'fs';
import path from 'path';
 
// Generate speech and save to file
const audio = await agent.speak('Hello, World!');
const filePath = path.join(process.cwd(), 'agent.mp3');
const writer = createWriteStream(filePath);
 
audio.pipe(writer);
 
await new Promise<void>((resolve, reject) => {
  writer.on('finish', () => resolve());
  writer.on('error', reject);
});
```

### Transcribing Audio Input[](https://mastra.ai/docs/agents/03-adding-voice#transcribing-audio-input)

```
import { createReadStream } from 'fs';
import path from 'path';
 
// Read audio file and transcribe
const audioFilePath = path.join(process.cwd(), '/agent.mp3');
const audioStream = createReadStream(audioFilePath);
 
try {
  console.log('Transcribing audio file...');
  const transcription = await agent.listen(audioStream);
  console.log('Transcription:', transcription);
} catch (error) {
  console.error('Error transcribing audio:', error);
}
```

Last updated on February 26, 2025

[Tools](https://mastra.ai/docs/agents/02-adding-tools "Tools")[Overview](https://mastra.ai/docs/workflows/00-overview "Overview")



================================================================================
Section 11: Content from https://mastra.ai/docs/workflows/00-overview
================================================================================

Title: Handling Complex LLM Operations | Workflows | Mastra

URL Source: https://mastra.ai/docs/workflows/00-overview

Markdown Content:
Handling Complex LLM Operations | Workflows | Mastra
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Handling Complex LLM Operations with Workflows](https://mastra.ai/docs/workflows/00-overview#)[When to use workflows](https://mastra.ai/docs/workflows/00-overview#when-to-use-workflows)[Example](https://mastra.ai/docs/workflows/00-overview#example)[Breaking Down the Workflow](https://mastra.ai/docs/workflows/00-overview#breaking-down-the-workflow)[1\. Creating the Workflow](https://mastra.ai/docs/workflows/00-overview#1-creating-the-workflow)[2\. Defining Steps](https://mastra.ai/docs/workflows/00-overview#2-defining-steps)[3\. Linking Steps](https://mastra.ai/docs/workflows/00-overview#3-linking-steps)[Register the Workflow](https://mastra.ai/docs/workflows/00-overview#register-the-workflow)[Executing the Workflow](https://mastra.ai/docs/workflows/00-overview#executing-the-workflow)[Defining Steps](https://mastra.ai/docs/workflows/00-overview#defining-steps)[Control Flow](https://mastra.ai/docs/workflows/00-overview#control-flow)[Suspend and Resume](https://mastra.ai/docs/workflows/00-overview#suspend-and-resume)[Observability and Debugging](https://mastra.ai/docs/workflows/00-overview#observability-and-debugging)[More Resources](https://mastra.ai/docs/workflows/00-overview#more-resources)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/workflows/00-overview.mdx)

[Docs](https://mastra.ai/docs "Docs")WorkflowsOverview

Handling Complex LLM Operations with Workflows
==============================================

Workflows in Mastra help you orchestrate complex sequences of operations with features like branching, parallel execution, resource suspension, and more.

When to use workflows[](https://mastra.ai/docs/workflows/00-overview#when-to-use-workflows)
-------------------------------------------------------------------------------------------

Most AI applications need more than a single call to a language model. You may want to run multiple steps, conditionally skip certain paths, or even pause execution altogether until you receive user input. Sometimes your agent tool calling is not accurate enough.

Mastra’s workflow system provides:

*   A standardized way to define steps and link them together.
*   Support for both simple (linear) and advanced (branching, parallel) paths.
*   Debugging and observability features to track each workflow run.

Example[](https://mastra.ai/docs/workflows/00-overview#example)
---------------------------------------------------------------

To create a workflow, you define one or more steps, link them, and then commit the workflow before starting it.

### Breaking Down the Workflow[](https://mastra.ai/docs/workflows/00-overview#breaking-down-the-workflow)

Let’s examine each part of the workflow creation process:

#### 1\. Creating the Workflow[](https://mastra.ai/docs/workflows/00-overview#1-creating-the-workflow)

Here’s how you define a workflow in Mastra. The `name` field determines the workflow’s API endpoint (`/workflows/$NAME/`), while the `triggerSchema` defines the structure of the workflow’s trigger data:

src/mastra/workflow/index.ts

```
const myWorkflow = new Workflow({
  name: 'my-workflow',
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});
```

#### 2\. Defining Steps[](https://mastra.ai/docs/workflows/00-overview#2-defining-steps)

Now, we’ll define the workflow’s steps. Each step can have its own input and output schemas. Here, `stepOne` doubles an input value, and `stepTwo` increments that result if `stepOne` was successful. (To keep things simple, we aren’t making any LLM calls in this example):

src/mastra/workflow/index.ts

```
const stepOne = new Step({
  id: 'stepOne',
  outputSchema: z.object({
    doubledValue: z.number(),
  }),
  execute: async ({ context }) => {
    const doubledValue = context.triggerData.inputValue * 2;
    return { doubledValue };
  },
});
 
const stepTwo = new Step({
  id: "stepTwo",
  execute: async ({ context }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 };
    }
    return {
      incrementedValue: context.steps.stepOne.output.doubledValue + 1,
    };
  },
});
```

#### 3\. Linking Steps[](https://mastra.ai/docs/workflows/00-overview#3-linking-steps)

Now, let’s create the control flow, and “commit” (finalize the workflow). In this case, `stepOne` runs first and is followed by `stepTwo`.

src/mastra/workflow/index.ts

```
myWorkflow
  .step(stepOne)
  .then(stepTwo)
  .commit();
```

### Register the Workflow[](https://mastra.ai/docs/workflows/00-overview#register-the-workflow)

Register your workflow with Mastra to enable logging and telemetry:

src/mastra/index.ts

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  workflows: { myWorkflow },
});
```

### Executing the Workflow[](https://mastra.ai/docs/workflows/00-overview#executing-the-workflow)

Execute your workflow programmatically or via API:

src/mastra/run-workflow.ts

```
import { mastra } from "./index";
 
// Get the workflow
const myWorkflow = mastra.getWorkflow('myWorkflow');
const { runId, start } = myWorkflow.createRun();
 
// Start the workflow execution
await start({ triggerData: { inputValue: 45 } });
```

Or use the API (requires running `mastra dev`):

```
curl --location 'http://localhost:4111/api/workflows/myWorkflow/execute' \
     --header 'Content-Type: application/json' \
     --data '{
       "inputValue": 45
     }'
```

This example shows the essentials: define your workflow, add steps, commit the workflow, then execute it.

Defining Steps[](https://mastra.ai/docs/workflows/00-overview#defining-steps)
-----------------------------------------------------------------------------

The basic building block of a workflow [is a step](https://mastra.ai/docs/workflows/steps). Steps are defined using schemas for inputs and outputs, and can fetch prior step results.

Control Flow[](https://mastra.ai/docs/workflows/00-overview#control-flow)
-------------------------------------------------------------------------

Workflows let you define a [control flow](https://mastra.ai/docs/workflows/control-flow) to chain steps together in with parallel steps, branching paths, and more.

Suspend and Resume[](https://mastra.ai/docs/workflows/00-overview#suspend-and-resume)
-------------------------------------------------------------------------------------

When you need to pause execution for external data, user input, or asynchronous events, Mastra [supports suspension at any step](https://mastra.ai/docs/workflows/suspend-and-resume), persisting the state of the workflow so you can resume it later.

Observability and Debugging[](https://mastra.ai/docs/workflows/00-overview#observability-and-debugging)
-------------------------------------------------------------------------------------------------------

Mastra workflows automatically [log the input and output of each step within a workflow run](https://mastra.ai/docs/reference/observability/otel-config), allowing you to send this data to your preferred logging, telemetry, or observability tools.

You can:

*   Track the status of each step (e.g., `success`, `error`, or `suspended`).
*   Store run-specific metadata for analysis.
*   Integrate with third-party observability platforms like Datadog or New Relic by forwarding logs.

More Resources[](https://mastra.ai/docs/workflows/00-overview#more-resources)
-----------------------------------------------------------------------------

*   The [Workflow Guide](https://mastra.ai/docs/guides/04-recruiter) in the Guides section is a tutorial that covers the main concepts.
*   [Sequential Steps workflow example](https://mastra.ai/examples/workflows/sequential-steps)
*   [Parallel Steps workflow example](https://mastra.ai/examples/workflows/parallel-steps)
*   [Branching Paths workflow example](https://mastra.ai/examples/workflows/branching-paths)
*   [Cyclical Dependencies workflow example](https://mastra.ai/examples/workflows/cyclical-dependencies)
*   [Suspend and Resume workflow example](https://mastra.ai/examples/workflows/suspend-and-resume)

Last updated on February 25, 2025

[Voice](https://mastra.ai/docs/agents/03-adding-voice "Voice")[Steps](https://mastra.ai/docs/workflows/steps "Steps")



================================================================================
Section 12: Content from https://mastra.ai/docs/workflows/steps
================================================================================

Title: Creating Steps and Adding to Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/workflows/steps

Markdown Content:
Creating Steps and Adding to Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Defining Steps in a Workflow](https://mastra.ai/docs/workflows/steps#)[Inline Step Creation](https://mastra.ai/docs/workflows/steps#inline-step-creation)[Creating Steps Separately](https://mastra.ai/docs/workflows/steps#creating-steps-separately)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/workflows/steps.mdx)

[Docs](https://mastra.ai/docs "Docs")[Workflows](https://mastra.ai/docs/workflows/00-overview "Workflows")Steps

Defining Steps in a Workflow
============================

When you build a workflow, you typically break down operations into smaller tasks that can be linked and reused. Steps provide a structured way to manage these tasks by defining inputs, outputs, and execution logic.

The code below shows how to define these steps inline or separately.

Inline Step Creation[](https://mastra.ai/docs/workflows/steps#inline-step-creation)
-----------------------------------------------------------------------------------

You can create steps directly within your workflow using `.step()` and `.then()`. This code shows how to define, link, and execute two steps in sequence.

src/mastra/workflows/index.ts

```
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";
 
export const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});
 
myWorkflow
  .step(
    new Step({
      id: "stepOne",
      outputSchema: z.object({
        doubledValue: z.number(),
      }),
      execute: async ({ context }) => ({
        doubledValue: context.triggerData.inputValue * 2,
      }),
    }),
  )
  .then(
    new Step({
      id: "stepTwo",
      outputSchema: z.object({
        incrementedValue: z.number(),
      }),
      execute: async ({ context }) => {
        if (context.steps.stepOne.status !== "success") {
          return { incrementedValue: 0 };
        }
 
        return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 };
      },
    }),
  ).commit();
```

Creating Steps Separately[](https://mastra.ai/docs/workflows/steps#creating-steps-separately)
---------------------------------------------------------------------------------------------

If you prefer to manage your step logic in separate entities, you can define steps outside and then add them to your workflow. This code shows how to define steps independently and link them afterward.

src/mastra/workflows/index.ts

```
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";
 
// Define steps separately
const stepOne = new Step({
  id: "stepOne",
  outputSchema: z.object({
    doubledValue: z.number(),
  }),
  execute: async ({ context }) => ({
    doubledValue: context.triggerData.inputValue * 2,
  }),
});
 
const stepTwo = new Step({
  id: "stepTwo",
  outputSchema: z.object({
    incrementedValue: z.number(),
  }),
  execute: async ({ context }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 };
    }
    return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 };
  },
});
 
// Build the workflow
const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});
 
myWorkflow.step(stepOne).then(stepTwo);
myWorkflow.commit();
```

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/workflows/00-overview "Overview")[Control Flow](https://mastra.ai/docs/workflows/control-flow "Control Flow")



================================================================================
Section 13: Content from https://mastra.ai/docs/workflows/control-flow
================================================================================

Title: Branching, Merging, Conditions | Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/workflows/control-flow

Markdown Content:
Branching, Merging, Conditions | Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Control Flow in Workflows: Branching, Merging, and Conditions](https://mastra.ai/docs/workflows/control-flow#)[Parallel Execution](https://mastra.ai/docs/workflows/control-flow#parallel-execution)[Sequential Execution](https://mastra.ai/docs/workflows/control-flow#sequential-execution)[Branching and Merging Paths](https://mastra.ai/docs/workflows/control-flow#branching-and-merging-paths)[Cyclical Dependencies](https://mastra.ai/docs/workflows/control-flow#cyclical-dependencies)[Conditions](https://mastra.ai/docs/workflows/control-flow#conditions)[Option 1: Function](https://mastra.ai/docs/workflows/control-flow#option-1-function)[Option 2: Query Object](https://mastra.ai/docs/workflows/control-flow#option-2-query-object)[Option 3: Simple Path Comparison](https://mastra.ai/docs/workflows/control-flow#option-3-simple-path-comparison)[Accessing Previous Step Results](https://mastra.ai/docs/workflows/control-flow#accessing-previous-step-results)[Using getStepResult](https://mastra.ai/docs/workflows/control-flow#using-getstepresult)[Using Path Notation](https://mastra.ai/docs/workflows/control-flow#using-path-notation)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/workflows/control-flow.mdx)

[Docs](https://mastra.ai/docs "Docs")[Workflows](https://mastra.ai/docs/workflows/00-overview "Workflows")Control Flow

Control Flow in Workflows: Branching, Merging, and Conditions
=============================================================

When you create a multi-step process, you may need to run steps in parallel, chain them sequentially, or follow different paths based on outcomes. This page describes how you can manage branching, merging, and conditions to construct workflows that meet your logic requirements. The code snippets show the key patterns for structuring complex control flow.

Parallel Execution[](https://mastra.ai/docs/workflows/control-flow#parallel-execution)
--------------------------------------------------------------------------------------

You can run multiple steps at the same time if they don’t depend on each other. This approach can speed up your workflow when steps perform independent tasks. The code below shows how to add two steps in parallel:

```
myWorkflow.step(fetchUserData).step(fetchOrderData);
```

See the [Parallel Steps](https://mastra.ai/examples/workflows/parallel-steps) example for more details.

Sequential Execution[](https://mastra.ai/docs/workflows/control-flow#sequential-execution)
------------------------------------------------------------------------------------------

Sometimes you need to run steps in strict order to ensure outputs from one step become inputs for the next. Use .then() to link dependent operations. The code below shows how to chain steps sequentially:

```
myWorkflow.step(fetchOrderData).then(validateData).then(processOrder);
```

See the [Sequential Steps](https://mastra.ai/examples/workflows/sequential-steps) example for more details.

Branching and Merging Paths[](https://mastra.ai/docs/workflows/control-flow#branching-and-merging-paths)
--------------------------------------------------------------------------------------------------------

When different outcomes require different paths, branching is helpful. You can also merge paths later once they complete. The code below shows how to branch after stepA and later converge on stepF:

```
myWorkflow
  .step(stepA)
    .then(stepB)
    .then(stepD)
  .after(stepA)
    .step(stepC)
    .then(stepE)
  .after(stepD)
    .step(stepF);
    .step(stepE)
```

In this example:

*   stepA leads to stepB, then to stepD.
*   Separately, stepA also triggers stepC, which in turn leads to stepE.
*   Separately, stepD also triggers stepF and stepE in parallel.

See the [Branching Paths](https://mastra.ai/examples/workflows/branching-paths) example for more details.

Cyclical Dependencies[](https://mastra.ai/docs/workflows/control-flow#cyclical-dependencies)
--------------------------------------------------------------------------------------------

You can loop back to earlier steps based on conditions, allowing you to repeat tasks until certain results are achieved. The code below shows a workflow that repeats fetchData when a status is “retry”:

```
myWorkflow
  .step(fetchData)
  .then(processData)
  .after(processData)
  .step(finalizeData, {
    when: { "processData.status": "success" },
  })
  .step(fetchData, {
    when: { "processData.status": "retry" },
  });
```

If processData returns “success,” finalizeData runs. If it returns “retry,” the workflow loops back to fetchData.

See the [Cyclical Dependencies](https://mastra.ai/examples/workflows/cyclical-dependencies) example for more details.

Conditions[](https://mastra.ai/docs/workflows/control-flow#conditions)
----------------------------------------------------------------------

Use the when property to control whether a step runs based on data from previous steps. Below are three ways to specify conditions.

### Option 1: Function[](https://mastra.ai/docs/workflows/control-flow#option-1-function)

```
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: async ({ context }) => {
      const fetchData = context?.getStepResult<{ status: string }>("fetchData");
      return fetchData?.status === "success";
    },
  },
);
```

### Option 2: Query Object[](https://mastra.ai/docs/workflows/control-flow#option-2-query-object)

```
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: {
      ref: {
        step: {
          id: "fetchData",
        },
        path: "status",
      },
      query: { $eq: "success" },
    },
  },
);
```

### Option 3: Simple Path Comparison[](https://mastra.ai/docs/workflows/control-flow#option-3-simple-path-comparison)

```
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: {
      "fetchData.status": "success",
    },
  },
);
```

Accessing Previous Step Results[](https://mastra.ai/docs/workflows/control-flow#accessing-previous-step-results)
----------------------------------------------------------------------------------------------------------------

Steps access data from previous steps through the `context` object. The context contains a record of all step results and their payloads.

### Using getStepResult[](https://mastra.ai/docs/workflows/control-flow#using-getstepresult)

`getStepResult` retrieves a step’s output with type safety:

```
workflow.step(
  new Step({
    id: "processOrder",
    execute: async ({ context }) => {
      const userData = context.getStepResult<{ userId: string }>("fetchUser");
      return {
        userId: userData?.userId,
        status: "processing"
      };
    },
  })
);
```

### Using Path Notation[](https://mastra.ai/docs/workflows/control-flow#using-path-notation)

Path notation accesses step results through the machine context. For example, to access the status of the `processOrder` step:

```
workflow.step(
  new Step({
    id: "sendEmail",
    execute: async ({ context }) => {
      const orderStatus = context.steps.processOrder.output.status;
      console.log(orderStatus);
    },
  })
);
```

The context object maintains type information when used with TypeScript. Nested objects in step outputs can be accessed with either method.

Last updated on February 25, 2025

[Steps](https://mastra.ai/docs/workflows/steps "Steps")[Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume "Suspend & Resume")



================================================================================
Section 14: Content from https://mastra.ai/docs/workflows/suspend-and-resume
================================================================================

Title: Suspend & Resume Workflows | Human-in-the-Loop | Mastra Docs

URL Source: https://mastra.ai/docs/workflows/suspend-and-resume

Markdown Content:
Suspend & Resume Workflows | Human-in-the-Loop | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Suspend and Resume in Workflows](https://mastra.ai/docs/workflows/suspend-and-resume#)[When to Use Suspend/Resume](https://mastra.ai/docs/workflows/suspend-and-resume#when-to-use-suspendresume)[Basic Suspend Example](https://mastra.ai/docs/workflows/suspend-and-resume#basic-suspend-example)[Watching and Resuming](https://mastra.ai/docs/workflows/suspend-and-resume#watching-and-resuming)[Related Resources](https://mastra.ai/docs/workflows/suspend-and-resume#related-resources)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/workflows/suspend-and-resume.mdx)

[Docs](https://mastra.ai/docs "Docs")[Workflows](https://mastra.ai/docs/workflows/00-overview "Workflows")Suspend & Resume

Suspend and Resume in Workflows
===============================

Complex workflows often need to pause execution while waiting for external input or resources.

Mastra’s suspend and resume features let you pause workflow execution at any step, persist the workflow state, and continue when ready.

When to Use Suspend/Resume[](https://mastra.ai/docs/workflows/suspend-and-resume#when-to-use-suspendresume)
-----------------------------------------------------------------------------------------------------------

Common scenarios for suspending workflows include:

*   Waiting for human approval or input
*   Pausing until external API resources become available
*   Collecting additional data needed for later steps
*   Rate limiting or throttling expensive operations

Basic Suspend Example[](https://mastra.ai/docs/workflows/suspend-and-resume#basic-suspend-example)
--------------------------------------------------------------------------------------------------

Here’s a simple workflow that suspends when a value is too low and resumes when given a higher value:

```
const stepTwo = new Step({
  id: "stepTwo",
  outputSchema: z.object({
    incrementedValue: z.number(),
  }),
  execute: async ({ context, suspend }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 };
    }
 
    const currentValue = context.steps.stepOne.output.doubledValue;
 
    if (currentValue < 100) {
      await suspend();
      return { incrementedValue: 0 };
    }
    return { incrementedValue: currentValue + 1 };
  },
});
```

Watching and Resuming[](https://mastra.ai/docs/workflows/suspend-and-resume#watching-and-resuming)
--------------------------------------------------------------------------------------------------

To handle suspended workflows, use the `watch` method to monitor workflow status and `resume` to continue execution:

```
import { mastra } from "./index";
 
// Get the workflow
const myWorkflow = mastra.getWorkflow('myWorkflow');
const { runId, start } = myWorkflow.createRun();
 
// Start watching the workflow before executing it
myWorkflow.watch(async ({ context, activePaths }) => {
  for (const _path of activePaths) {
    const stepTwoStatus = context.steps?.stepTwo?.status;
    if (stepTwoStatus === 'suspended') {
      console.log("Workflow suspended, resuming with new value");
 
      // Resume the workflow with new context
      await myWorkflow.resume({
        runId,
        stepId: 'stepTwo',
        context: { secondValue: 100 },
      });
    }
  }
})
 
// Start the workflow execution
await start({ triggerData: { inputValue: 45 } });
```

Related Resources[](https://mastra.ai/docs/workflows/suspend-and-resume#related-resources)
------------------------------------------------------------------------------------------

*   See the [Suspend and Resume Example](https://mastra.ai/examples/workflows/suspend-and-resume) for a complete working example
*   Check the [Step Class Reference](https://mastra.ai/docs/reference/workflows/step-class) for suspend/resume API details
*   Review [Workflow Observability](https://mastra.ai/docs/reference/observability/otel-config) for monitoring suspended workflows

Last updated on February 25, 2025

[Control Flow](https://mastra.ai/docs/workflows/control-flow "Control Flow")[Overview](https://mastra.ai/docs/rag/overview "Overview")



================================================================================
Section 15: Content from https://mastra.ai/docs/rag/overview
================================================================================

Title: RAG (Retrieval-Augmented Generation) in Mastra | Mastra Docs

URL Source: https://mastra.ai/docs/rag/overview

Markdown Content:
RAG (Retrieval-Augmented Generation) in Mastra | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[RAG (Retrieval-Augmented Generation) in Mastra](https://mastra.ai/docs/rag/overview#)[Example](https://mastra.ai/docs/rag/overview#example)[Document Processing](https://mastra.ai/docs/rag/overview#document-processing)[Vector Storage](https://mastra.ai/docs/rag/overview#vector-storage)[Observability and Debugging](https://mastra.ai/docs/rag/overview#observability-and-debugging)[More resources](https://mastra.ai/docs/rag/overview#more-resources)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/rag/overview.mdx)

[Docs](https://mastra.ai/docs "Docs")RAGOverview

RAG (Retrieval-Augmented Generation) in Mastra
==============================================

RAG in Mastra helps you enhance LLM outputs by incorporating relevant context from your own data sources, improving accuracy and grounding responses in real information.

Mastra’s RAG system provides:

*   Standardized APIs to process and embed documents
*   Support for multiple vector stores
*   Chunking and embedding strategies for optimal retrieval
*   Observability for tracking embedding and retrieval performance

Example[](https://mastra.ai/docs/rag/overview#example)
------------------------------------------------------

To implement RAG, you process your documents into chunks, create embeddings, store them in a vector database, and then retrieve relevant context at query time.

```
import { embedMany } from "ai";
import { openai } from "@ai-sdk/openai";
import { PgVector } from "@mastra/pg";
import { MDocument } from "@mastra/rag";
import { z } from "zod";
 
// 1. Initialize document
const doc = MDocument.fromText(`Your document text here...`);
 
// 2. Create chunks
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
});
 
// 3. Generate embeddings
const { embeddings } = await embedMany({
  values: chunks,
  model: openai.embedding("text-embedding-3-small"),
});
 
// 4. Store in vector database
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING);
await pgVector.upsert("embeddings", embeddings); // using an index name of 'embeddings'
 
// 5. Query similar chunks
const results = await pgVector.query("embeddings", queryVector, 3); // queryVector is the embedding of the query
 
console.log("Similar chunks:", results);
```

This example shows the essentials: initialize a document, create chunks, generate embeddings, store them, and query for similar content.

Document Processing[](https://mastra.ai/docs/rag/overview#document-processing)
------------------------------------------------------------------------------

The basic building block of RAG is document processing. Documents can be chunked using various strategies (recursive, sliding window, etc.) and enriched with metadata. See the [chunking and embedding doc](https://mastra.ai/docs/rag/chunking-and-embedding).

Vector Storage[](https://mastra.ai/docs/rag/overview#vector-storage)
--------------------------------------------------------------------

Mastra supports multiple vector stores for embedding persistence and similarity search, including pgvector, Pinecone, and Qdrant. See the [vector database doc](https://mastra.ai/docs/rag/vector-databases).

Observability and Debugging[](https://mastra.ai/docs/rag/overview#observability-and-debugging)
----------------------------------------------------------------------------------------------

Mastra’s RAG system includes observability features to help you optimize your retrieval pipeline:

*   Track embedding generation performance and costs
*   Monitor chunk quality and retrieval relevance
*   Analyze query patterns and cache hit rates
*   Export metrics to your observability platform

See the [OTel Configuration](https://mastra.ai/docs/reference/observability/otel-config) page for more details.

More resources[](https://mastra.ai/docs/rag/overview#more-resources)
--------------------------------------------------------------------

*   [Chain of Thought RAG Example](https://mastra.ai/examples/rag/cot-rag)
*   [All RAG Examples](https://mastra.ai/examples) (including different chunking strategies, embedding models, and vector stores)

Last updated on February 25, 2025

[Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume "Suspend & Resume")[Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding "Chunking and Embedding")



================================================================================
Section 16: Content from https://mastra.ai/docs/rag/chunking-and-embedding
================================================================================

Title: Chunking and Embedding Documents | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/rag/chunking-and-embedding

Markdown Content:
Chunking and Embedding Documents | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Chunking and Embedding Documents](https://mastra.ai/docs/rag/chunking-and-embedding#chunking-and-embedding-documents)[Step 1: Document Processing](https://mastra.ai/docs/rag/chunking-and-embedding#step-1-document-processing)[Step 2: Embedding Generation](https://mastra.ai/docs/rag/chunking-and-embedding#step-2-embedding-generation)[Using OpenAI](https://mastra.ai/docs/rag/chunking-and-embedding#using-openai)[Using Cohere](https://mastra.ai/docs/rag/chunking-and-embedding#using-cohere)[Example: Complete Pipeline](https://mastra.ai/docs/rag/chunking-and-embedding#example-complete-pipeline)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/rag/chunking-and-embedding.mdx)

[Docs](https://mastra.ai/docs "Docs")[RAG](https://mastra.ai/docs/rag/overview "RAG")Chunking and Embedding

Chunking and Embedding Documents[](https://mastra.ai/docs/rag/chunking-and-embedding#chunking-and-embedding-documents)
----------------------------------------------------------------------------------------------------------------------

Before processing, create a MDocument instance from your content. You can initialize it from various formats:

```
const docFromText = MDocument.fromText("Your plain text content...");
const docFromHTML = MDocument.fromHTML("<html>Your HTML content...</html>");
const docFromMarkdown = MDocument.fromMarkdown("# Your Markdown content...");
const docFromJSON = MDocument.fromJSON(`{ "key": "value" }`);
```

Step 1: Document Processing[](https://mastra.ai/docs/rag/chunking-and-embedding#step-1-document-processing)
-----------------------------------------------------------------------------------------------------------

Use `chunk` to split documents into manageable pieces. Mastra supports multiple chunking strategies optimized for different document types:

*   `recursive`: Smart splitting based on content structure
*   `character`: Simple character-based splits
*   `token`: Token-aware splitting
*   `markdown`: Markdown-aware splitting
*   `html`: HTML structure-aware splitting
*   `json`: JSON structure-aware splitting
*   `latex`: LaTeX structure-aware splitting

Here’s an example of how to use the `recursive` strategy:

```
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
  separator: "\n",
  extract: {
    metadata: true, // Optionally extract metadata
  },
});
```

**Note:** Metadata extraction may use LLM calls, so ensure your API key is set.

We go deeper into chunking strategies in our [chunk documentation](https://mastra.ai/docs/reference/rag/chunk).

Step 2: Embedding Generation[](https://mastra.ai/docs/rag/chunking-and-embedding#step-2-embedding-generation)
-------------------------------------------------------------------------------------------------------------

Transform chunks into embeddings using your preferred provider. Mastra supports both OpenAI and Cohere embeddings:

### Using OpenAI[](https://mastra.ai/docs/rag/chunking-and-embedding#using-openai)

```
import { openai } from "@ai-sdk/openai";
import { embedMany } from "ai";
 
const { embeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});
```

### Using Cohere[](https://mastra.ai/docs/rag/chunking-and-embedding#using-cohere)

```
import { embedMany } from 'ai';
import { cohere } from '@ai-sdk/cohere';
 
const { embeddings } = await embedMany({
  model: cohere.embedding('embed-english-v3.0'),
  values: chunks.map(chunk => chunk.text),
});
```

The embedding functions return vectors, arrays of numbers representing the semantic meaning of your text, ready for similarity searches in your vector database.

Example: Complete Pipeline[](https://mastra.ai/docs/rag/chunking-and-embedding#example-complete-pipeline)
---------------------------------------------------------------------------------------------------------

Here’s an example showing document processing and embedding generation with both providers:

```
import { embedMany } from "ai";
import { openai } from "@ai-sdk/openai";
import { cohere } from "@ai-sdk/cohere";
 
import { MDocument } from "@mastra/rag";
 
// Initialize document
const doc = MDocument.fromText(`
  Climate change poses significant challenges to global agriculture.
  Rising temperatures and changing precipitation patterns affect crop yields.
`);
 
// Create chunks
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 256,
  overlap: 50,
});
 
// Generate embeddings with OpenAI
const { embeddings: openAIEmbeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});
 
// OR
 
// Generate embeddings with Cohere
const { embeddings: cohereEmbeddings } = await embedMany({
  model: cohere.embedding('embed-english-v3.0'),
  values: chunks.map(chunk => chunk.text),
});
 
// Store embeddings in your vector database
await vectorStore.upsert("embeddings", embeddings);
```

This example demonstrates how to process a document, split it into chunks, generate embeddings with both OpenAI and Cohere, and store the results in a vector database.

For more examples of different chunking strategies and embedding configurations, see:

*   [Adjust Chunk Size](https://mastra.ai/docs/reference/rag/chunk#adjust-chunk-size)
*   [Adjust Chunk Delimiters](https://mastra.ai/docs/reference/rag/chunk#adjust-chunk-delimiters)
*   [Embed Text with Cohere](https://mastra.ai/docs/reference/rag/embeddings#using-cohere)

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/rag/overview "Overview")[Vector Databases](https://mastra.ai/docs/rag/vector-databases "Vector Databases")



================================================================================
Section 17: Content from https://mastra.ai/docs/rag/vector-databases
================================================================================

Title: Storing Embeddings in A Vector Database | Mastra Docs

URL Source: https://mastra.ai/docs/rag/vector-databases

Markdown Content:
Storing Embeddings in A Vector Database | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Storing Embeddings in A Vector Database](https://mastra.ai/docs/rag/vector-databases#storing-embeddings-in-a-vector-database)[Supported databases](https://mastra.ai/docs/rag/vector-databases#supported-databases)[PostgreSQL with PgVector](https://mastra.ai/docs/rag/vector-databases#postgresql-with-pgvector)[Using Vector Storage](https://mastra.ai/docs/rag/vector-databases#using-vector-storage)[Creating Indexes](https://mastra.ai/docs/rag/vector-databases#creating-indexes)[Upserting Embeddings](https://mastra.ai/docs/rag/vector-databases#upserting-embeddings)[Adding Metadata](https://mastra.ai/docs/rag/vector-databases#adding-metadata)[Best Practices](https://mastra.ai/docs/rag/vector-databases#best-practices)[Examples](https://mastra.ai/docs/rag/vector-databases#examples)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/rag/vector-databases.mdx)

[Docs](https://mastra.ai/docs "Docs")[RAG](https://mastra.ai/docs/rag/overview "RAG")Vector Databases

Storing Embeddings in A Vector Database[](https://mastra.ai/docs/rag/vector-databases#storing-embeddings-in-a-vector-database)
------------------------------------------------------------------------------------------------------------------------------

After generating embeddings, you need to store them in a database that supports vector similarity search. Mastra provides a consistent interface for storing and querying embeddings across different vector databases.

Supported databases[](https://mastra.ai/docs/rag/vector-databases#supported-databases)
--------------------------------------------------------------------------------------

### PostgreSQL with PgVector[](https://mastra.ai/docs/rag/vector-databases#postgresql-with-pgvector)

Best for teams already using PostgreSQL who want to minimize infrastructure complexity:

Pg VectorPineconeQdrantChromaAstraLibSQLUpstashCloudflare

vector-store.ts

```
import { PgVector } from '@mastra/pg';
 
const store = new PgVector(process.env.POSTGRES_CONNECTION_STRING)
await store.createIndex("my-collection", 1536);
await store.upsert(
"my-collection",
embeddings,
chunks.map(chunk => ({ text: chunk.text }))
)
 
```

vector-store.ts

```
import { PineconeVector } from '@mastra/pinecone'
 
const store = new PineconeVector(process.env.PINECONE_API_KEY)
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { QdrantVector } from '@mastra/qdrant'
 
const store = new QdrantVector({
  url: process.env.QDRANT_URL,
  apiKey: process.env.QDRANT_API_KEY
})
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { ChromaVector } from '@mastra/chroma'
 
const store = new ChromaVector()
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { AstraVector } from '@mastra/astra'
 
const store = new AstraVector({
  token: process.env.ASTRA_DB_TOKEN,
  endpoint: process.env.ASTRA_DB_ENDPOINT,
  keyspace: process.env.ASTRA_DB_KEYSPACE
})
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { LibSQLVector } from "@mastra/core/vector/libsql";
 
const store = new LibSQLVector({
  connectionUrl: process.env.DATABASE_URL,
  authToken: process.env.DATABASE_AUTH_TOKEN // Optional: for Turso cloud databases
})
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { UpstashVector } from '@mastra/upstash'
 
const store = new UpstashVector({
  url: process.env.UPSTASH_URL,
  token: process.env.UPSTASH_TOKEN
})
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

vector-store.ts

```
import { CloudflareVector } from '@mastra/vectorize'
 
const store = new CloudflareVector({
  accountId: process.env.CF_ACCOUNT_ID,
  apiToken: process.env.CF_API_TOKEN
})
await store.createIndex("my-collection", 1536);
await store.upsert(
  "my-collection",
  embeddings,
  chunks.map(chunk => ({ text: chunk.text }))
)
```

Using Vector Storage[](https://mastra.ai/docs/rag/vector-databases#using-vector-storage)
----------------------------------------------------------------------------------------

Once initialized, all vector stores share the same interface for creating indexes, upserting embeddings, and querying.

### Creating Indexes[](https://mastra.ai/docs/rag/vector-databases#creating-indexes)

Before storing embeddings, you need to create an index with the appropriate dimension size for your embedding model:

store-embeddings.ts

```
// Create an index with dimension 1536 (for text-embedding-3-small)
await store.createIndex('my-collection', 1536);
 
// For other models, use their corresponding dimensions:
// - text-embedding-3-large: 3072
// - text-embedding-ada-002: 1536
// - cohere-embed-multilingual-v3: 1024
```

The dimension size must match the output dimension of your chosen embedding model. Common dimension sizes are:

*   OpenAI text-embedding-3-small: 1536 dimensions
*   OpenAI text-embedding-3-large: 3072 dimensions
*   Cohere embed-multilingual-v3: 1024 dimensions

### Upserting Embeddings[](https://mastra.ai/docs/rag/vector-databases#upserting-embeddings)

After creating an index, you can store embeddings along with their basic metadata:

store-embeddings.ts

```
// Store embeddings with their corresponding metadata
await store.upsert(
  'my-collection',  // index name
  embeddings,       // array of embedding vectors
  chunks.map(chunk => ({
    text: chunk.text,  // The original text content
    id: chunk.id       // Optional unique identifier
  }))
);
```

The upsert operation:

*   Takes an array of embedding vectors and their corresponding metadata
*   Updates existing vectors if they share the same ID
*   Creates new vectors if they don’t exist
*   Automatically handles batching for large datasets

Adding Metadata[](https://mastra.ai/docs/rag/vector-databases#adding-metadata)
------------------------------------------------------------------------------

Vector stores support rich metadata for advanced filtering and organization. You can add any JSON-serializable fields that will help with retrieval.

**Reminder:** Metadata is stored as a JSON field with no fixed schema, so you’ll want to name your fields consistently and apply a consistent schema, or your queries will return unexpected results.

```
// Store embeddings with rich metadata for better organization and filtering
await vectorStore.upsert(
  "embeddings",
  embeddings,
  chunks.map((chunk) => ({
    // Basic content
    text: chunk.text,
    id: chunk.id,
    
    // Document organization
    source: chunk.source,
    category: chunk.category,
    
    // Temporal metadata
    createdAt: new Date().toISOString(),
    version: "1.0",
    
    // Custom fields
    language: chunk.language,
    author: chunk.author,
    confidenceScore: chunk.score,
  })),
);
```

Key metadata considerations:

*   Be strict with field naming - inconsistencies like ‘category’ vs ‘Category’ will affect queries
*   Only include fields you plan to filter or sort by - extra fields add overhead
*   Add timestamps (e.g., ‘createdAt’, ‘lastUpdated’) to track content freshness

Best Practices[](https://mastra.ai/docs/rag/vector-databases#best-practices)
----------------------------------------------------------------------------

*   Create indexes before bulk insertions
*   Use batch operations for large insertions (the upsert method handles batching automatically)
*   Only store metadata you’ll query against
*   Match embedding dimensions to your model (e.g., 1536 for `text-embedding-3-small`)

Examples[](https://mastra.ai/docs/rag/vector-databases#examples)
----------------------------------------------------------------

For complete examples of different vector store implementations, see:

*   [Insert Embedding in PgVector](https://mastra.ai/examples/rag/insert-embedding-in-pgvector)
*   [Insert Embedding in Pinecone](https://mastra.ai/examples/rag/insert-embedding-in-pinecone)
*   [Insert Embedding in Qdrant](https://mastra.ai/examples/rag/insert-embedding-in-qdrant)
*   [Insert Embedding in Chroma](https://mastra.ai/examples/rag/insert-embedding-in-chroma)
*   [Insert Embedding in Astra DB](https://mastra.ai/examples/rag/insert-embedding-in-astra)
*   [Insert Embedding in LibSQL](https://mastra.ai/examples/rag/insert-embedding-in-libsql)
*   [Insert Embedding in Upstash](https://mastra.ai/examples/rag/insert-embedding-in-upstash)
*   [Insert Embedding in Cloudflare Vectorize](https://mastra.ai/examples/rag/insert-embedding-in-vectorize)
*   [Basic RAG with Vector Storage](https://mastra.ai/examples/rag/basic-rag)

Last updated on February 25, 2025

[Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding "Chunking and Embedding")[Retrieval](https://mastra.ai/docs/rag/retrieval "Retrieval")



================================================================================
Section 18: Content from https://mastra.ai/docs/rag/retrieval
================================================================================

Title: Retrieval, Semantic Search, Reranking | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/rag/retrieval

Markdown Content:
Retrieval, Semantic Search, Reranking | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Retrieval in RAG Systems](https://mastra.ai/docs/rag/retrieval#retrieval-in-rag-systems)[How Retrieval Works](https://mastra.ai/docs/rag/retrieval#how-retrieval-works)[Basic Retrieval](https://mastra.ai/docs/rag/retrieval#basic-retrieval)[Advanced Retrieval options](https://mastra.ai/docs/rag/retrieval#advanced-retrieval-options)[Metadata Filtering](https://mastra.ai/docs/rag/retrieval#metadata-filtering)[Vector Query Tool](https://mastra.ai/docs/rag/retrieval#vector-query-tool)[Vector Store Prompts](https://mastra.ai/docs/rag/retrieval#vector-store-prompts)[Re-ranking](https://mastra.ai/docs/rag/retrieval#re-ranking)[Graph-based Retrieval](https://mastra.ai/docs/rag/retrieval#graph-based-retrieval)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/rag/retrieval.mdx)

[Docs](https://mastra.ai/docs "Docs")[RAG](https://mastra.ai/docs/rag/overview "RAG")Retrieval

Retrieval in RAG Systems[](https://mastra.ai/docs/rag/retrieval#retrieval-in-rag-systems)
-----------------------------------------------------------------------------------------

After storing embeddings, you need to retrieve relevant chunks to answer user queries.

Mastra provides flexible retrieval options with support for semantic search, filtering, and re-ranking.

How Retrieval Works[](https://mastra.ai/docs/rag/retrieval#how-retrieval-works)
-------------------------------------------------------------------------------

1.  The user’s query is converted to an embedding using the same model used for document embeddings
2.  This embedding is compared to stored embeddings using vector similarity
3.  The most similar chunks are retrieved and can be optionally:

*   Filtered by metadata
*   Re-ranked for better relevance
*   Processed through a knowledge graph

Basic Retrieval[](https://mastra.ai/docs/rag/retrieval#basic-retrieval)
-----------------------------------------------------------------------

The simplest approach is direct semantic search. This method uses vector similarity to find chunks that are semantically similar to the query:

```
import { openai } from "@ai-sdk/openai";
import { embed } from "ai";
import { PgVector } from "@mastra/pg";
 
// Convert query to embedding
const { embedding } = await embed({
  value: "What are the main points in the article?",
  model: openai.embedding('text-embedding-3-small'),
});
 
// Query vector store
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING);
const results = await pgVector.query("embeddings", embedding, 10);
```

Results include both the text content and a similarity score:

```
[
  {
    text: "Climate change poses significant challenges...",
    score: 0.89,
    metadata: { source: "article1.txt" }
  },
  {
    text: "Rising temperatures affect crop yields...",
    score: 0.82,
    metadata: { source: "article1.txt" }
  }
  // ... more results
]
```

For an example of how to use the basic retrieval method, see the [Retrieve Results](https://mastra.ai/examples/rag/retrieve-results) example.

Advanced Retrieval options[](https://mastra.ai/docs/rag/retrieval#advanced-retrieval-options)
---------------------------------------------------------------------------------------------

### Metadata Filtering[](https://mastra.ai/docs/rag/retrieval#metadata-filtering)

Filter results based on metadata fields to narrow down the search space. This is useful when you have documents from different sources, time periods, or with specific attributes. Mastra provides a unified MongoDB-style query syntax that works across all supported vector stores.

For detailed information about available operators and syntax, see the [Metadata Filters Reference](https://mastra.ai/docs/reference/rag/metadata-filters).

Basic filtering examples:

```
// Simple equality filter
const results = await pgVector.query("embeddings", embedding, 10, {
  source: "article1.txt"
});
 
// Numeric comparison
const results = await pgVector.query("embeddings", embedding, 10, {
  price: { $gt: 100 }
});
 
// Multiple conditions
const results = await pgVector.query("embeddings", embedding, 10, {
  category: "electronics",
  price: { $lt: 1000 },
  inStock: true
});
 
// Array operations
const results = await pgVector.query("embeddings", embedding, 10, {
  tags: { $in: ["sale", "new"] }
});
 
// Logical operators
const results = await pgVector.query("embeddings", embedding, 10, {
  $or: [
    { category: "electronics" },
    { category: "accessories" }
  ],
  $and: [
    { price: { $gt: 50 } },
    { price: { $lt: 200 } }
  ]
});
```

Common use cases for metadata filtering:

*   Filter by document source or type
*   Filter by date ranges
*   Filter by specific categories or tags
*   Filter by numerical ranges (e.g., price, rating)
*   Combine multiple conditions for precise querying
*   Filter by document attributes (e.g., language, author)

For an example of how to use metadata filtering, see the [Hybrid Vector Search](https://mastra.ai/examples/rag/hybrid-vector-search) example.

### Vector Query Tool[](https://mastra.ai/docs/rag/retrieval#vector-query-tool)

Sometimes you want to give your agent the ability to query a vector database directly. The Vector Query Tool allows your agent to be in charge of retrieval decisions, combining semantic search with optional filtering and reranking based on the agent’s understanding of the user’s needs.

```
const vectorQueryTool = createVectorQueryTool({
  vectorStoreName: 'pgVector',
  indexName: 'embeddings',
  model: openai.embedding('text-embedding-3-small'),
});
```

When creating the tool, pay special attention to the tool’s name and description - these help the agent understand when and how to use the retrieval capabilities. For example, you might name it “SearchKnowledgeBase” and describe it as “Search through our documentation to find relevant information about X topic.”

This is particularly useful when:

*   Your agent needs to dynamically decide what information to retrieve
*   The retrieval process requires complex decision-making
*   You want the agent to combine multiple retrieval strategies based on context

For detailed configuration options and advanced usage, see the [Vector Query Tool Reference](https://mastra.ai/docs/reference/tools/vector-query-tool).

### Vector Store Prompts[](https://mastra.ai/docs/rag/retrieval#vector-store-prompts)

Vector store prompts define query patterns and filtering capabilities for each vector database implementation. When implementing filtering, these prompts are required in the agent’s instructions to specify valid operators and syntax for each vector store implementation.

Pg VectorPineconeQdrantChromaAstraLibSQLUpstashCloudflare

```
import { openai } from '@ai-sdk/openai';
import { PGVECTOR_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${PGVECTOR_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { PINECONE_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${PINECONE_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { QDRANT_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${QDRANT_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { CHROMA_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${CHROMA_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { ASTRA_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${ASTRA_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { LIBSQL_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${LIBSQL_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { UPSTASH_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${UPSTASH_PROMPT}
`,
tools: { vectorQueryTool },
});
```

vector-store.ts

```
import { openai } from '@ai-sdk/openai';
import { VECTORIZE_PROMPT } from "@mastra/rag";
 
export const ragAgent = new Agent({
name: 'RAG Agent',
model: openai('gpt-4o-mini'),
instructions: `
Process queries using the provided context. Structure responses to be concise and relevant.
${VECTORIZE_PROMPT}
`,
tools: { vectorQueryTool },
});
```

### Re-ranking[](https://mastra.ai/docs/rag/retrieval#re-ranking)

Initial vector similarity search can sometimes miss nuanced relevance. Re-ranking is a more computationally expensive process, but more accurate algorithm that improves results by:

*   Considering word order and exact matches
*   Applying more sophisticated relevance scoring
*   Using a method called cross-attention between query and documents

Here’s how to use re-ranking:

```
import { openai } from "@ai-sdk/openai";
import { rerank } from "@mastra/rag";
 
// Get initial results from vector search
const initialResults = await pgVector.query("embeddings", queryEmbedding, 10);
 
// Re-rank the results
const rerankedResults = await rerank(initialResults, query, openai('gpt-4o-mini'));
```

The re-ranked results combine vector similarity with semantic understanding to improve retrieval quality.

For more details about re-ranking, see the [rerank()](https://mastra.ai/docs/reference/rag/rerank) method.

For an example of how to use the re-ranking method, see the [Re-ranking Results](https://mastra.ai/examples/rag/rerank) example.

### Graph-based Retrieval[](https://mastra.ai/docs/rag/retrieval#graph-based-retrieval)

For documents with complex relationships, graph-based retrieval can follow connections between chunks. This helps when:

*   Information is spread across multiple documents
*   Documents reference each other
*   You need to traverse relationships to find complete answers

Example setup:

```
const graphQueryTool = createGraphQueryTool({
  vectorStoreName: 'pgVector',
  indexName: 'embeddings',
  model: openai.embedding('text-embedding-3-small'),
  graphOptions: {
    threshold: 0.7,
  }
});
```

For more details about graph-based retrieval, see the [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag) class and the [createGraphQueryTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool) function.

For an example of how to use the graph-based retrieval method, see the [Graph-based Retrieval](https://mastra.ai/examples/rag/graph-rag) example.

Last updated on February 25, 2025

[Vector Databases](https://mastra.ai/docs/rag/vector-databases "Vector Databases")[Creating Projects](https://mastra.ai/docs/local-dev/creating-projects "Creating Projects")



================================================================================
Section 19: Content from https://mastra.ai/docs/local-dev/creating-projects
================================================================================

Title: Creating Mastra Projects | Mastra Local Development Docs

URL Source: https://mastra.ai/docs/local-dev/creating-projects

Markdown Content:
Creating Mastra Projects | Mastra Local Development Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Creating Mastra Projects](https://mastra.ai/docs/local-dev/creating-projects#)[Creating a New Project](https://mastra.ai/docs/local-dev/creating-projects#creating-a-new-project)[Adding to an Existing Project](https://mastra.ai/docs/local-dev/creating-projects#adding-to-an-existing-project)[Command Arguments](https://mastra.ai/docs/local-dev/creating-projects#command-arguments)[Interactive Setup](https://mastra.ai/docs/local-dev/creating-projects#interactive-setup)[Project Initialization](https://mastra.ai/docs/local-dev/creating-projects#project-initialization)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/local-dev/creating-projects.mdx)

[Docs](https://mastra.ai/docs "Docs")Local DevCreating Projects

Creating Mastra Projects
========================

Mastra provides two CLI commands for project setup:

1.  [`mastra create`](https://mastra.ai/docs/reference/cli/create): Generate a new project
2.  [`mastra init`](https://mastra.ai/docs/reference/cli/init): Add Mastra to an existing project

Creating a New Project[](https://mastra.ai/docs/local-dev/creating-projects#creating-a-new-project)
---------------------------------------------------------------------------------------------------

You can create a new project using either a package manager or the mastra CLI:

npmpnpmyarnbun

```
npm create mastra@latest 
```

```
pnpm create mastra
```

```
yarn create mastra
```

```
bunx create-mastra
```

npmpnpmyarnbun

```
npm install -g mastra@latest 
mastra create
```

```
pnpm add -g mastra@latest
mastra create
```

```
yarn global add mastra@latest
mastra create
```

```
bun add --global mastra@latest
mastra create
```

Generated project structure:

```
my-project/
├── src/
│   └── mastra/
│       └── index.ts    # Mastra entry point
├── package.json
└── tsconfig.json
```

Adding to an Existing Project[](https://mastra.ai/docs/local-dev/creating-projects#adding-to-an-existing-project)
-----------------------------------------------------------------------------------------------------------------

```
mastra init
```

Changes made to project:

1.  Creates `src/mastra` directory with entry point
2.  Adds required dependencies
3.  Configures TypeScript compiler options

Command Arguments[](https://mastra.ai/docs/local-dev/creating-projects#command-arguments)
-----------------------------------------------------------------------------------------

```
Arguments:
  --components     Specify components: agents, memory, storage
  --llm-provider   LLM provider: openai, anthropic
  --add-example   Include example implementation
  --llm-api-key   Provider API key
```

Interactive Setup[](https://mastra.ai/docs/local-dev/creating-projects#interactive-setup)
-----------------------------------------------------------------------------------------

Running commands without arguments starts a CLI prompt for:

1.  Component selection
2.  LLM provider configuration
3.  API key setup
4.  Example code inclusion

Project Initialization[](https://mastra.ai/docs/local-dev/creating-projects#project-initialization)
---------------------------------------------------------------------------------------------------

```
# Install dependencies
npm install
 
# Start development server on port 3000
mastra dev
 
# Access playground at http://localhost:3000
```

Last updated on February 25, 2025

[Retrieval](https://mastra.ai/docs/rag/retrieval "Retrieval")[Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev "Mastra Dev")



================================================================================
Section 20: Content from https://mastra.ai/docs/local-dev/mastra-dev
================================================================================

Title: Inspecting Agents with `mastra dev` | Mastra Local Dev Docs

URL Source: https://mastra.ai/docs/local-dev/mastra-dev

Markdown Content:
Inspecting Agents with \`mastra dev\` | Mastra Local Dev Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Inspecting agents and workflows with mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev#)[REST API Endpoints](https://mastra.ai/docs/local-dev/mastra-dev#rest-api-endpoints)[Using the Client SDK](https://mastra.ai/docs/local-dev/mastra-dev#using-the-client-sdk)[UI Playground](https://mastra.ai/docs/local-dev/mastra-dev#ui-playground)[OpenAPI Specification](https://mastra.ai/docs/local-dev/mastra-dev#openapi-specification)[Summary](https://mastra.ai/docs/local-dev/mastra-dev#summary)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/local-dev/mastra-dev.mdx)

[Docs](https://mastra.ai/docs "Docs")[Local Dev](https://mastra.ai/docs/local-dev/creating-projects "Local Dev")Mastra Dev

Inspecting agents and workflows with `mastra Dev`
=================================================

The `mastra dev` command launches a development server that serves your Mastra application locally.

REST API Endpoints[](https://mastra.ai/docs/local-dev/mastra-dev#rest-api-endpoints)
------------------------------------------------------------------------------------

`mastra dev` spins up REST API endpoints for your agents and workflows, such as:

*   `POST /api/agents/:agentId/generate`
*   `POST /api/agents/:agentId/stream`
*   `POST /api/workflows/:workflowId/start`
*   `POST /api/workflows/:workflowId/:instanceId/event`
*   `GET /api/workflows/:workflowId/:instanceId/status`

By default, the server runs at [http://localhost:4111](http://localhost:4111/), but you can change the port with the `--port` flag.

Using the Client SDK[](https://mastra.ai/docs/local-dev/mastra-dev#using-the-client-sdk)
----------------------------------------------------------------------------------------

The easiest way to interact with your local Mastra server is through our [TypeScript/JavaScript Client SDK](https://mastra.ai/docs/reference/client-js). Install it with:

```
npm install @mastra/client-js
```

Then configure it to point to your local server:

```
import { MastraClient } from "@mastra/client-js";
 
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
});
 
// Example: Interact with a local agent
const agent = client.getAgent("my-agent");
const response = await agent.generate({
  messages: [{ role: "user", content: "Hello!" }],
});
```

The client SDK provides type-safe wrappers for all API endpoints, making it much easier to develop and test your Mastra applications locally.

UI Playground[](https://mastra.ai/docs/local-dev/mastra-dev#ui-playground)
--------------------------------------------------------------------------

`mastra dev` creates a UI with an agent chat interface, a workflow visualizer and a tool playground.

OpenAPI Specification[](https://mastra.ai/docs/local-dev/mastra-dev#openapi-specification)
------------------------------------------------------------------------------------------

`mastra dev` provides an OpenAPI spec at:

*   `GET /openapi.json`

Summary[](https://mastra.ai/docs/local-dev/mastra-dev#summary)
--------------------------------------------------------------

`mastra dev` makes it easy to develop, debug, and iterate on your AI logic in a self-contained environment before deploying to production.

*   [Mastra Dev reference](https://mastra.ai/docs/reference/cli/dev)
*   [Client SDK documentation](https://mastra.ai/docs/reference/client-js)

Last updated on February 25, 2025

[Creating Projects](https://mastra.ai/docs/local-dev/creating-projects "Creating Projects")[Integrations](https://mastra.ai/docs/local-dev/integrations "Integrations")



================================================================================
Section 21: Content from https://mastra.ai/docs/local-dev/integrations
================================================================================

Title: Using Mastra Integrations | Mastra Local Development Docs

URL Source: https://mastra.ai/docs/local-dev/integrations

Markdown Content:
Using Mastra Integrations | Mastra Local Development Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Using Mastra Integrations](https://mastra.ai/docs/local-dev/integrations#)[Installing an Integration](https://mastra.ai/docs/local-dev/integrations#installing-an-integration)[Example: Adding the GitHub Integration](https://mastra.ai/docs/local-dev/integrations#example-adding-the-github-integration)[Using Integrations in Agents](https://mastra.ai/docs/local-dev/integrations#using-integrations-in-agents)[Environment Configuration](https://mastra.ai/docs/local-dev/integrations#environment-configuration)[Available Integrations](https://mastra.ai/docs/local-dev/integrations#available-integrations)[Conclusion](https://mastra.ai/docs/local-dev/integrations#conclusion)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/local-dev/integrations.mdx)

[Docs](https://mastra.ai/docs "Docs")[Local Dev](https://mastra.ai/docs/local-dev/creating-projects "Local Dev")Integrations

Using Mastra Integrations
=========================

Integrations in Mastra are auto-generated, type-safe API clients for third-party services. They can be used as tools for agents or as steps in workflows.

Installing an Integration[](https://mastra.ai/docs/local-dev/integrations#installing-an-integration)
----------------------------------------------------------------------------------------------------

Mastra’s default integrations are packaged as individually installable npm modules. You can add an integration to your project by installing it via npm and importing it into your Mastra configuration.

### Example: Adding the GitHub Integration[](https://mastra.ai/docs/local-dev/integrations#example-adding-the-github-integration)

1.  **Install the Integration Package**

To install the GitHub integration, run:

```
npm install @mastra/github
```

2.  **Add the Integration to Your Project**

Create a new file for your integrations (e.g., `src/mastra/integrations/index.ts`) and import the integration:

src/mastra/integrations/index.ts

```
import { GithubIntegration } from '@mastra/github';
 
export const github = new GithubIntegration({
  config: {
    PERSONAL_ACCESS_TOKEN: process.env.GITHUB_PAT!,
  },
});
```

Make sure to replace `process.env.GITHUB_PAT!` with your actual GitHub Personal Access Token or ensure that the environment variable is properly set.

3.  **Use the Integration in Tools or Workflows**

You can now use the integration when defining tools for your agents or in workflows.

src/mastra/tools/index.ts

```
import { createTool } from '@mastra/core';
import { z } from 'zod';
import { github } from '../integrations';
 
export const getMainBranchRef = createTool({
  id: 'getMainBranchRef',
  description: 'Fetch the main branch reference from a GitHub repository',
  inputSchema: z.object({
    owner: z.string(),
    repo: z.string(),
  }),
  outputSchema: z.object({
    ref: z.string().optional(),
  }),
  execute: async ({ context }) => {
    const client = await github.getApiClient();
 
    const mainRef = await client.gitGetRef({
      path: {
        owner: context.owner,
        repo: context.repo,
        ref: 'heads/main',
      },
    });
 
    return { ref: mainRef.data?.ref };
  },
});
```

In the example above:

*   We import the `github` integration.
*   We define a tool called `getMainBranchRef` that uses the GitHub API client to fetch the reference of the main branch of a repository.
*   The tool accepts `owner` and `repo` as inputs and returns the reference string.

Using Integrations in Agents[](https://mastra.ai/docs/local-dev/integrations#using-integrations-in-agents)
----------------------------------------------------------------------------------------------------------

Once you’ve defined tools that utilize integrations, you can include these tools in your agents.

src/mastra/agents/index.ts

```
import { openai } from '@ai-sdk/openai';
import { Agent } from '@mastra/core';
import { getMainBranchRef } from '../tools';
 
export const codeReviewAgent = new Agent({
  name: 'Code Review Agent',
  instructions: 'An agent that reviews code repositories and provides feedback.',
  model: openai('gpt-4o-mini'),
  tools: {
    getMainBranchRef,
    // other tools...
  },
});
```

In this setup:

*   We create an agent named `Code Review Agent`.
*   We include the `getMainBranchRef` tool in the agent’s available tools.
*   The agent can now use this tool to interact with GitHub repositories during conversations.

Environment Configuration[](https://mastra.ai/docs/local-dev/integrations#environment-configuration)
----------------------------------------------------------------------------------------------------

Ensure that any required API keys or tokens for your integrations are properly set in your environment variables. For example, with the GitHub integration, you need to set your GitHub Personal Access Token:

```
GITHUB_PAT=your_personal_access_token
```

Consider using a `.env` file or another secure method to manage sensitive credentials.

Available Integrations[](https://mastra.ai/docs/local-dev/integrations#available-integrations)
----------------------------------------------------------------------------------------------

Mastra provides several built-in integrations; primarily API-key based integrations that do not require OAuth. Some available integrations including Github, Stripe, Resend, Firecrawl, and more.

Check [Mastra’s codebase](https://github.com/mastra-ai/mastra/tree/main/integrations) or [npm packages](https://www.npmjs.com/search?q=%22%40mastra%22) for a full list of available integrations.

Conclusion[](https://mastra.ai/docs/local-dev/integrations#conclusion)
----------------------------------------------------------------------

Integrations in Mastra enable your AI agents and workflows to interact with external services seamlessly. By installing and configuring integrations, you can extend the capabilities of your application to include operations such as fetching data from APIs, sending messages, or managing resources in third-party systems.

Remember to consult the documentation of each integration for specific usage details and to adhere to best practices for security and type safety.

Last updated on February 25, 2025

[Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev "Mastra Dev")[Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing "Logging and Tracing")



================================================================================
Section 22: Content from https://mastra.ai/docs/deployment/logging-and-tracing
================================================================================

Title: Logging and Tracing | Mastra Deployment Documentation

URL Source: https://mastra.ai/docs/deployment/logging-and-tracing

Markdown Content:
Logging and Tracing | Mastra Deployment Documentation
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing#)[Logging](https://mastra.ai/docs/deployment/logging-and-tracing#logging)[Basic Setup](https://mastra.ai/docs/deployment/logging-and-tracing#basic-setup)[Configuration](https://mastra.ai/docs/deployment/logging-and-tracing#configuration)[Telemetry](https://mastra.ai/docs/deployment/logging-and-tracing#telemetry)[Basic Configuration](https://mastra.ai/docs/deployment/logging-and-tracing#basic-configuration)[Configuration Options](https://mastra.ai/docs/deployment/logging-and-tracing#configuration-options)[Environment Variables](https://mastra.ai/docs/deployment/logging-and-tracing#environment-variables)[Example: SigNoz Integration](https://mastra.ai/docs/deployment/logging-and-tracing#example-signoz-integration)[Other Supported Providers](https://mastra.ai/docs/deployment/logging-and-tracing#other-supported-providers)[Next.js Configuration \[Local Dev\]](https://mastra.ai/docs/deployment/logging-and-tracing#nextjs-configuration-local-dev)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/deployment/logging-and-tracing.mdx)

[Docs](https://mastra.ai/docs "Docs")DeploymentLogging and Tracing

Logging and Tracing
===================

Effective logging and tracing are crucial for understanding the behavior of your application.

Tracing is especially important for AI engineering. Teams building AI products find that visibility into inputs and outputs of every step of every run is crucial to improving accuracy. You get this with Mastra’s telemetry.

Logging[](https://mastra.ai/docs/deployment/logging-and-tracing#logging)
------------------------------------------------------------------------

In Mastra, logs can detail when certain functions run, what input data they receive, and how they respond.

### Basic Setup[](https://mastra.ai/docs/deployment/logging-and-tracing#basic-setup)

Here’s a minimal example that sets up a **console logger** at the `INFO` level. This will print out informational messages and above (i.e., `INFO`, `WARN`, `ERROR`) to the console.

mastra.config.ts

```
import { Mastra } from "@mastra/core";
import { createLogger } from "@mastra/core/logger";
 
export const mastra = new Mastra({
  // Other Mastra configuration...
  logger: createLogger({
    name: "Mastra",
    level: "info",
  }),
});
```

In this configuration:

*   `name: "Mastra"` specifies the name to group logs under.
*   `level: "info"` sets the minimum severity of logs to record.

### Configuration[](https://mastra.ai/docs/deployment/logging-and-tracing#configuration)

*   For more details on the options you can pass to `createLogger()`, see the [createLogger reference documentation](https://mastra.ai/docs/reference/observability/create-logger).
*   Once you have a `Logger` instance, you can call its methods (e.g., `.info()`, `.warn()`, `.error()`) in the [Logger instance reference documentation](https://mastra.ai/docs/reference/observability/logger).
*   If you want to send your logs to an external service for centralized collection, analysis, or storage, you can configure other logger types such as Upstash Redis. Consult the [createLogger reference documentation](https://mastra.ai/docs/reference/observability/create-logger) for details on parameters like `url`, `token`, and `key` when using the `UPSTASH` logger type.

Telemetry[](https://mastra.ai/docs/deployment/logging-and-tracing#telemetry)
----------------------------------------------------------------------------

Mastra supports the OpenTelemetry Protocol (OTLP) for tracing and monitoring your application. When telemetry is enabled, Mastra automatically traces all core primitives including agent operations, LLM interactions, tool executions, integration calls, workflow runs, and database operations. Your telemetry data can then be exported to any OTEL collector.

### Basic Configuration[](https://mastra.ai/docs/deployment/logging-and-tracing#basic-configuration)

Here’s a simple example of enabling telemetry:

mastra.config.ts

```
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "my-app",
    enabled: true,
    sampling: {
      type: "always_on",
    },
    export: {
      type: "otlp",
      endpoint: "http://localhost:4318", // SigNoz local endpoint
    },
  },
});
```

### Configuration Options[](https://mastra.ai/docs/deployment/logging-and-tracing#configuration-options)

The telemetry config accepts these properties:

```
type OtelConfig = {
  // Name to identify your service in traces (optional)
  serviceName?: string;
 
  // Enable/disable telemetry (defaults to true)
  enabled?: boolean;
 
  // Control how many traces are sampled
  sampling?: {
    type: "ratio" | "always_on" | "always_off" | "parent_based";
    probability?: number; // For ratio sampling
    root?: {
      probability: number; // For parent_based sampling
    };
  };
 
  // Where to send telemetry data
  export?: {
    type: "otlp" | "console";
    endpoint?: string;
    headers?: Record<string, string>;
  };
};
```

See the [OtelConfig reference documentation](https://mastra.ai/docs/reference/observability/otel-config) for more details.

### Environment Variables[](https://mastra.ai/docs/deployment/logging-and-tracing#environment-variables)

You can configure the OTLP endpoint and headers through environment variables:

.env

```
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
OTEL_EXPORTER_OTLP_HEADERS=x-api-key=your-api-key
```

Then in your config:

mastra.config.ts

```
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "my-app",
    enabled: true,
    export: {
      type: "otlp",
      // endpoint and headers will be picked up from env vars
    },
  },
});
```

### Example: SigNoz Integration[](https://mastra.ai/docs/deployment/logging-and-tracing#example-signoz-integration)

Here’s what a traced agent interaction looks like in [SigNoz](https://signoz.io/):

![Image 1: Agent interaction trace showing spans, LLM calls, and tool executions](https://mastra.ai/docs/signoz-telemetry-demo.png)

### Other Supported Providers[](https://mastra.ai/docs/deployment/logging-and-tracing#other-supported-providers)

For a complete list of supported observability providers and their configuration details, see the [Observability Providers reference](https://mastra.ai/docs/reference/observability/providers).

### Next.js Configuration \[Local Dev\][](https://mastra.ai/docs/deployment/logging-and-tracing#nextjs-configuration-local-dev)

When developing locally with Next.js, you’ll need to:

1.  Install the instrumentation package:

```
npm install import-in-the-middle # or require-in-the-middle for CJS
```

2.  Add it as an external dependency in your Next.js config:

next.config.ts

```
import type { NextConfig } from "next";
 
const nextConfig: NextConfig = {
  serverExternalPackages: ["import-in-the-middle"],
};
 
export default nextConfig;
```

This configuration is only necessary for local development to ensure proper instrumentation during hot reloading.

Last updated on February 25, 2025

[Integrations](https://mastra.ai/docs/local-dev/integrations "Integrations")[Deployment](https://mastra.ai/docs/deployment/deployment "Deployment")



================================================================================
Section 23: Content from https://mastra.ai/docs/deployment/deployment
================================================================================

Title: Deployment

URL Source: https://mastra.ai/docs/deployment/deployment

Markdown Content:
Deployment
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Deploying Mastra Applications](https://mastra.ai/docs/deployment/deployment#)[Prerequisites](https://mastra.ai/docs/deployment/deployment#prerequisites)[Direct Platform Deployment](https://mastra.ai/docs/deployment/deployment#direct-platform-deployment)[Installing Deployers](https://mastra.ai/docs/deployment/deployment#installing-deployers)[Configuring Deployers](https://mastra.ai/docs/deployment/deployment#configuring-deployers)[Deployer Configuration](https://mastra.ai/docs/deployment/deployment#deployer-configuration)[Cloudflare Deployer](https://mastra.ai/docs/deployment/deployment#cloudflare-deployer)[Vercel Deployer](https://mastra.ai/docs/deployment/deployment#vercel-deployer)[Netlify Deployer](https://mastra.ai/docs/deployment/deployment#netlify-deployer)[Universal Deployment](https://mastra.ai/docs/deployment/deployment#universal-deployment)[Building](https://mastra.ai/docs/deployment/deployment#building)[Running the Server](https://mastra.ai/docs/deployment/deployment#running-the-server)[Environment Variables](https://mastra.ai/docs/deployment/deployment#environment-variables)[Platform Documentation](https://mastra.ai/docs/deployment/deployment#platform-documentation)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/deployment/deployment.mdx)

[Docs](https://mastra.ai/docs "Docs")[Deployment](https://mastra.ai/docs/deployment/logging-and-tracing "Deployment")Deployment

Deploying Mastra Applications
=============================

Mastra applications can be deployed in two ways:

1.  **Direct Platform Deployment**: Using platform-specific deployers for Cloudflare Workers, Vercel, or Netlify
2.  **Universal Deployment**: Using `mastra build` to generate a standard Node.js server that can run anywhere

Prerequisites[](https://mastra.ai/docs/deployment/deployment#prerequisites)
---------------------------------------------------------------------------

Before you begin, ensure you have:

*   **Node.js** installed (version 18 or higher is recommended)
*   If using a platform-specific deployer:
    *   An account with your chosen platform
    *   Required API keys or credentials

Direct Platform Deployment[](https://mastra.ai/docs/deployment/deployment#direct-platform-deployment)
-----------------------------------------------------------------------------------------------------

Platform-specific deployers handle configuration and deployment for:

*   **Cloudflare Workers**
*   **Vercel**
*   **Netlify**

### Installing Deployers[](https://mastra.ai/docs/deployment/deployment#installing-deployers)

```
# For Cloudflare
npm install @mastra/deployer-cloudflare
 
# For Vercel
npm install @mastra/deployer-vercel
 
# For Netlify
npm install @mastra/deployer-netlify
```

### Configuring Deployers[](https://mastra.ai/docs/deployment/deployment#configuring-deployers)

Configure the deployer in your entry file:

```
import { Mastra, createLogger } from '@mastra/core';
import { CloudflareDeployer } from '@mastra/deployer-cloudflare';
 
export const mastra = new Mastra({
  agents: { /* your agents here */ },
  logger: createLogger({ name: 'MyApp', level: 'debug' }),
  deployer: new CloudflareDeployer({
    scope: 'your-cloudflare-scope',
    projectName: 'your-project-name',
  }),
});
```

### Deployer Configuration[](https://mastra.ai/docs/deployment/deployment#deployer-configuration)

#### Cloudflare Deployer[](https://mastra.ai/docs/deployment/deployment#cloudflare-deployer)

```
new CloudflareDeployer({
  scope: 'your-cloudflare-scope',
  projectName: 'your-project-name',
})
```

#### Vercel Deployer[](https://mastra.ai/docs/deployment/deployment#vercel-deployer)

```
new VercelDeployer({
  scope: 'your-vercel-scope',
  projectName: 'your-project-name',
})
```

#### Netlify Deployer[](https://mastra.ai/docs/deployment/deployment#netlify-deployer)

```
new NetlifyDeployer({
  scope: 'your-netlify-scope',
  projectName: 'your-project-name',
})
```

Universal Deployment[](https://mastra.ai/docs/deployment/deployment#universal-deployment)
-----------------------------------------------------------------------------------------

Since Mastra builds to a standard Node.js server, you can deploy to any platform that runs Node.js applications:

*   Cloud VMs (AWS EC2, DigitalOcean Droplets, GCP Compute Engine)
*   Container platforms (Docker, Kubernetes)
*   Platform as a Service (Heroku, Railway)
*   Self-hosted servers

### Building[](https://mastra.ai/docs/deployment/deployment#building)

Build the application:

```
# Build from current directory
mastra build
 
# Or specify a directory
mastra build --dir ./my-project
```

The build process:

1.  Locates entry file (`src/mastra/index.ts` or `src/mastra/index.js`)
2.  Creates `.mastra` output directory
3.  Bundles code using Rollup with tree shaking and source maps
4.  Generates [Hono](https://hono.dev/) HTTP server

See [`mastra build`](https://mastra.ai/docs/reference/cli/build) for all options.

### Running the Server[](https://mastra.ai/docs/deployment/deployment#running-the-server)

Start the HTTP server:

```
node .mastra/index.js
```

Environment Variables[](https://mastra.ai/docs/deployment/deployment#environment-variables)
-------------------------------------------------------------------------------------------

Required variables:

1.  Platform deployer variables (if using platform deployers):
    *   Platform credentials
2.  Agent API keys:
    *   `OPENAI_API_KEY`
    *   `ANTHROPIC_API_KEY`
3.  Server configuration (for universal deployment):
    *   `PORT`: HTTP server port (default: 3000)
    *   `HOST`: Server host (default: 0.0.0.0)

Platform Documentation[](https://mastra.ai/docs/deployment/deployment#platform-documentation)
---------------------------------------------------------------------------------------------

Platform deployment references:

*   [Cloudflare Workers](https://developers.cloudflare.com/workers/)
*   [Vercel](https://vercel.com/docs)
*   [Netlify](https://docs.netlify.com/)

Last updated on February 25, 2025

[Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing "Logging and Tracing")[Overview](https://mastra.ai/docs/evals/00-overview "Overview")



================================================================================
Section 24: Content from https://mastra.ai/docs/evals/00-overview
================================================================================

Title: Overview

URL Source: https://mastra.ai/docs/evals/00-overview

Markdown Content:
Overview
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Testing your agents with evals](https://mastra.ai/docs/evals/00-overview#)[How to use evals](https://mastra.ai/docs/evals/00-overview#how-to-use-evals)[Executing evals in your CI/CD pipeline](https://mastra.ai/docs/evals/00-overview#executing-evals-in-your-cicd-pipeline)[Vitest](https://mastra.ai/docs/evals/00-overview#vitest)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/evals/00-overview.mdx)

[Docs](https://mastra.ai/docs "Docs")EvalsOverview

Testing your agents with evals
==============================

Evals are automated tests that evaluate Agents outputs using model-graded, rule-based, and statistical methods. Each eval returns a normalized score between 0-1 that can be logged and compared. Evals can be customized with your own prompts and scoring functions.

Evals can be run in the cloud, capturing real-time results. But evals can also be part of your CI/CD pipeline, allowing you to test and monitor your agents over time.

How to use evals[](https://mastra.ai/docs/evals/00-overview#how-to-use-evals)
-----------------------------------------------------------------------------

Evals need to be added to an agent. To use any of [the default metrics](https://mastra.ai/docs/evals/01-supported-evals), you can do the following:

src/mastra/agents/index.ts

```
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import { ToneConsistencyMetric } from "@mastra/evals/nlp";
 
export const myAgent = new Agent({
  name: "My Agent",
  instructions: "You are a helpful assistant.",
  model: openai("gpt-4o-mini"),
  evals: {
    tone: new ToneConsistencyMetric()
  },
});
```

You can now view the evals in the Mastra dashboard, when using `mastra dev`.

### Executing evals in your CI/CD pipeline[](https://mastra.ai/docs/evals/00-overview#executing-evals-in-your-cicd-pipeline)

We support any testing framework that supports ESM modules. For example, you can use [Vitest](https://vitest.dev/), [Jest](https://jestjs.io/) or [Mocha](https://mochajs.org/) to run evals in your CI/CD pipeline.

src/mastra/agents/index.test.ts

```
import { describe, it, expect } from 'vitest';
import { evaluate } from '@mastra/core/eval';
import { myAgent } from './index';
 
describe('My Agent', () => {
  it('should be able to validate tone consistency', async () => {
    const metric = new ToneConsistencyMetric();
    const result = await evaluate(myAgent, 'Hello, world!', metric)
 
    expect(result.score).toBe(1);
  });
});
 
```

You will need to configure a testSetup and globalSetup script for your testing framework to capture the eval results. It allows us to show these results in your mastra dashboard.

#### Vitest[](https://mastra.ai/docs/evals/00-overview#vitest)

These are the files you need to add to your project to run evals in your CI/CD pipeline and allow us to capture the results. Without these files, the evals will still run and fail when necessary but you won’t be able to see the results in the Mastra dashboard.

globalSetup.ts

```
import { globalSetup } from '@mastra/evals';
 
export default function setup() {
  globalSetup()
}
```

testSetup.ts

```
import { beforeAll } from 'vitest';
import { attachListeners } from '@mastra/evals';
 
beforeAll(async () => {
  await attachListeners();
});
```

Store evals in Mastra Storage

Pass your Mastra instance to store evals in the configured storage:

```
import { mastra } from './your-mastra-setup';
 
beforeAll(async () => {
  // Store evals in Mastra Storage (requires storage to be enabled)
  await attachListeners(mastra);
});
```

This allows you to save evals in Mastra Storage. With file storage, evals persist and can be queried later. With memory storage, evals are isolated to the test process.

````

```typescript copy showLineNumbers filename="vitest.config.ts"
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    globalSetup: './globalSetup.ts',
    setupFiles: ['./testSetup.ts'],
  },
})
````

Last updated on February 25, 2025

[Deployment](https://mastra.ai/docs/deployment/deployment "Deployment")[Supported Evals](https://mastra.ai/docs/evals/01-supported-evals "Supported Evals")



================================================================================
Section 25: Content from https://mastra.ai/docs/evals/01-supported-evals
================================================================================

Title: Supported evals

URL Source: https://mastra.ai/docs/evals/01-supported-evals

Markdown Content:
Supported evals
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Supported evals in Mastra](https://mastra.ai/docs/evals/01-supported-evals#)[Accuracy and Reliability](https://mastra.ai/docs/evals/01-supported-evals#accuracy-and-reliability)[Understanding Context](https://mastra.ai/docs/evals/01-supported-evals#understanding-context)[Output Quality](https://mastra.ai/docs/evals/01-supported-evals#output-quality)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/evals/01-supported-evals.mdx)

[Docs](https://mastra.ai/docs "Docs")[Evals](https://mastra.ai/docs/evals/00-overview "Evals")Supported Evals

Supported evals in Mastra
=========================

Mastra provides several eval metrics for assessing Agent outputs. Mastra is not limited to these metrics, and you can also [define your own evals](https://mastra.ai/docs/evals/02-custom-eval).

### Accuracy and Reliability[](https://mastra.ai/docs/evals/01-supported-evals#accuracy-and-reliability)

*   [`hallucination`](https://mastra.ai/docs/reference/evals/hallucination): Detects fabricated or unsupported information
*   [`faithfulness`](https://mastra.ai/docs/reference/evals/faithfulness): Checks output alignment with source material
*   [`content-similarity`](https://mastra.ai/docs/reference/evals/content-similarity): Compares text similarity
*   [`textual-difference`](https://mastra.ai/docs/reference/evals/textual-difference): Measures text changes
*   [`completeness`](https://mastra.ai/docs/reference/evals/completeness): Measures if all required information is present
*   [`answer-relevancy`](https://mastra.ai/docs/reference/evals/answer-relevancy): Measures how well an answer addresses the input question

### Understanding Context[](https://mastra.ai/docs/evals/01-supported-evals#understanding-context)

*   [`context-position`](https://mastra.ai/docs/reference/evals/context-position): Evaluates the placement of context in responses
*   [`context-precision`](https://mastra.ai/docs/reference/evals/context-precision): Assesses the accuracy of context usage
*   [`context-relevancy`](https://mastra.ai/docs/reference/evals/context-relevancy): Measures the relevance of used context
*   [`contextual-recall`](https://mastra.ai/docs/reference/evals/contextual-recall): Evaluates information recall from context

### Output Quality[](https://mastra.ai/docs/evals/01-supported-evals#output-quality)

*   [`tone`](https://mastra.ai/docs/reference/evals/tone-consistency): Analyzes writing style and tone
*   [`toxicity`](https://mastra.ai/docs/reference/evals/toxicity): Detects harmful or inappropriate content
*   [`bias`](https://mastra.ai/docs/reference/evals/bias): Detects potential biases in the output
*   [`prompt-alignment`](https://mastra.ai/docs/reference/evals/prompt-alignment): Measures adherence to prompt instructions
*   [`summarization`](https://mastra.ai/docs/reference/evals/summarization): Evaluates summary quality
*   [`keyword-coverage`](https://mastra.ai/docs/reference/evals/keyword-coverage): Checks for presence of key terms

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/evals/00-overview "Overview")[Custom Evals](https://mastra.ai/docs/evals/02-custom-eval "Custom Evals")



================================================================================
Section 26: Content from https://mastra.ai/docs/evals/02-custom-eval
================================================================================

Title: Create your own Eval

URL Source: https://mastra.ai/docs/evals/02-custom-eval

Markdown Content:
Create your own Eval
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Create your own Eval](https://mastra.ai/docs/evals/02-custom-eval#)[Basic example](https://mastra.ai/docs/evals/02-custom-eval#basic-example)[Creating a custom LLM-Judge](https://mastra.ai/docs/evals/02-custom-eval#creating-a-custom-llm-judge)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/evals/02-custom-eval.mdx)

[Docs](https://mastra.ai/docs "Docs")[Evals](https://mastra.ai/docs/evals/00-overview "Evals")Custom Evals

Create your own Eval
====================

Creating your own eval is as easy as creating a new function. You simply create a class that extends the `Metric` class and implement the `measure` method.

Basic example[](https://mastra.ai/docs/evals/02-custom-eval#basic-example)
--------------------------------------------------------------------------

Here is a very basic example of a custom eval that checks if the output contains a certain keyword. This is a simplified version of our own [keyword coverage eval](https://mastra.ai/docs/reference/evals/keyword-coverage).

src/mastra/evals/keyword-coverage.ts

```
import { Metric, type MetricResult } from '@mastra/core/eval';
 
interface KeywordCoverageResult extends MetricResult {
  info: {
    totalKeywords: number;
    matchedKeywords: number;
  };
}
 
export class KeywordCoverageMetric extends Metric {
  private referenceKeywords: Set<string>;
 
  constructor(keywords: string[]) {
    super();
    this.referenceKeywords = new Set(keywords);
  }
 
  async measure(input: string, output: string): Promise<KeywordCoverageResult> {
    // Handle empty strings case
    if (!input && !output) {
      return {
        score: 1,
        info: {
          totalKeywords: 0,
          matchedKeywords: 0,
        },
      };
    }
 
    const matchedKeywords = [...this.referenceKeywords].filter(k => output.includes(k));
    const totalKeywords = this.referenceKeywords.size;
    const coverage = totalKeywords > 0 ? matchedKeywords.length / totalKeywords : 0;
 
    return {
      score: coverage,
      info: {
        totalKeywords: this.referenceKeywords.size,
        matchedKeywords: matchedKeywords.length,
      },
    };
  }
}
```

Creating a custom LLM-Judge[](https://mastra.ai/docs/evals/02-custom-eval#creating-a-custom-llm-judge)
------------------------------------------------------------------------------------------------------

A custom LLM judge can provide more targeted and meaningful evaluations for your use case. For example, if you’re building a medical Q&A system, you might want to evaluate not just answer relevancy but also medical accuracy and safety considerations.

Let’s create an example to make sure our [Chef Michel](https://mastra.ai/docs/guides/01-chef-michel) is giving complete recipe information to the user.

We’ll start with creating the judge agent. You can put it all in one file but we prefer splitting it into a separate file to keep things readable.

src/mastra/evals/recipe-completeness/metricJudge.ts

```
import { type LanguageModel } from '@mastra/core/llm';
import { MastraAgentJudge } from '@mastra/evals/judge';
import { z } from 'zod';
 
import { RECIPE_COMPLETENESS_INSTRUCTIONS, generateCompletenessPrompt, generateReasonPrompt } from './prompts';
 
export class RecipeCompletenessJudge extends MastraAgentJudge {
  constructor(model: LanguageModel) {
    super('Recipe Completeness', RECIPE_COMPLETENESS_INSTRUCTIONS, model);
  }
 
  async evaluate(
    input: string,
    output: string,
  ): Promise<{
    missing: string[];
    verdict: string;
  }> {
    const completenessPrompt = generateCompletenessPrompt({ input, output });
    const result = await this.agent.generate(completenessPrompt, {
      output: z.object({
        missing: z.array(z.string()),
        verdict: z.string(),
      }),
    });
 
    return result.object;
  }
 
  async getReason(args: {
    input: string;
    output: string;
    missing: string[];
    verdict: string;
  }): Promise<string> {
    const prompt = generateReasonPrompt(args);
    const result = await this.agent.generate(prompt, {
      output: z.object({
        reason: z.string(),
      }),
    });
 
    return result.object.reason;
  }
}
```

src/mastra/evals/recipe-completeness/index.ts

```
import { Metric, type MetricResult } from '@mastra/core/eval';
import { type LanguageModel } from '@mastra/core/llm';
 
import { RecipeCompletenessJudge } from './metricJudge';
 
export interface RecipeCompletenessMetricOptions {
  scale?: number;
}
 
export interface MetricResultWithInfo extends MetricResult {
  info: {
    reason: string;
    missing: string[];
  };
}
 
export class RecipeCompletenessMetric extends Metric {
  private judge: RecipeCompletenessJudge;
  private scale: number;
  constructor(model: LanguageModel, { scale = 1 }: RecipeCompletenessMetricOptions = {}) {
    super();
 
    this.judge = new RecipeCompletenessJudge(model);
    this.scale = scale;
  }
 
  async measure(input: string, output: string): Promise<MetricResultWithInfo> {
    const { verdict, missing } = await this.judge.evaluate(input, output);
    const score = this.calculateScore({ verdict });
    const reason = await this.judge.getReason({
      input,
      output,
      verdict,
      missing,
    });
 
    return {
      score,
      info: {
        missing,
        reason,
      },
    };
  }
 
  private calculateScore(verdict: { verdict: string }): number {
    return verdict.verdict.toLowerCase() === 'incomplete' ? 0 : 1;
  }
}
```

src/mastra/agents/chefAgent.ts

```
import { openai } from '@ai-sdk/openai';
import { Agent } from '@mastra/core/agent';
 
import { RecipeCompletenessMetric } from '../evals';
 
export const chefAgent = new Agent({
  name: 'chef-agent',
  instructions:
    'You are Michel, a practical and experienced home chef' +
    'You help people cook with whatever ingredients they have available.',
  model: openai('gpt-4o-mini'),
  evals: {
    recipeCompleteness: new RecipeCompletenessMetric(openai('gpt-4o-mini')),
  },
});
```

You can now use the `RecipeCompletenessMetric` in your project. [See the full example here](https://mastra.ai/examples/evals/custom-eval).

Last updated on February 25, 2025

[Supported Evals](https://mastra.ai/docs/evals/01-supported-evals "Supported Evals")[Mastra Class](https://mastra.ai/docs/reference/core/mastra-class "Mastra Class")



================================================================================
Section 27: Content from https://mastra.ai/docs/reference/core/mastra-class
================================================================================

Title: Mastra Class Reference | Project Creation | Mastra Core

URL Source: https://mastra.ai/docs/reference/core/mastra-class

Markdown Content:
Mastra Class Reference | Project Creation | Mastra Core
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[The Mastra Class](https://mastra.ai/docs/reference/core/mastra-class#)[Constructor Options](https://mastra.ai/docs/reference/core/mastra-class#constructor-options)[Initialization](https://mastra.ai/docs/reference/core/mastra-class#initialization)[Methods](https://mastra.ai/docs/reference/core/mastra-class#methods)[Error Handling](https://mastra.ai/docs/reference/core/mastra-class#error-handling)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/core/mastra-class.mdx)

[Docs](https://mastra.ai/docs "Docs")ReferenceCoreMastra Class

The Mastra Class
================

The Mastra class is the core entry point for your application. It manages agents, workflows, and server endpoints.

Constructor Options[](https://mastra.ai/docs/reference/core/mastra-class#constructor-options)
---------------------------------------------------------------------------------------------

### agents?:

Agent\[\]

\= \[\]

Array of Agent instances to register

### tools?:

Record<string, ToolApi\>

\= {}

Custom tools to register. Structured as a key-value pair, with keys being the tool name and values being the tool function.

### integrations?:

Integration\[\]

\= \[\]

Array of Mastra integrations to register. Will be used by agents, workflows, and tools.

### engine?:

MastraEngine

Database engine instance

### vectors?:

Record<string, MastraVector\>

Vector store instance, used for semantic search and vector-based tools (eg Pinecone, PgVector or Qdrant)

### logger?:

Logger

\= Console logger with INFO level

Logger instance created with createLogger()

### workflows?:

Record<string, Workflow\>

\= {}

Workflows to register. Structured as a key-value pair, with keys being the workflow name and values being the workflow instance.

Initialization[](https://mastra.ai/docs/reference/core/mastra-class#initialization)
-----------------------------------------------------------------------------------

The Mastra class is typically initialized in your `src/mastra/index.ts` file:

```
import { Mastra } from "@mastra/core";
import { createLogger } from "@mastra/core/logger";
 
// Basic initialization
export const mastra = new Mastra({});
 
// Full initialization with all options
export const mastra = new Mastra({
  agents: {},
  workflows: [],
  integrations: [],
  logger: createLogger({
    name: "My Project",
    level: "info",
  }),
  engine: {},
  tools: {},
  vectors: {},
});
```

You can think of the `Mastra` class as a top-level registry. When you register tools with Mastra, your registered agents and workflows can use them. When you register integrations with Mastra, agents, workflows, and tools can use them.

Methods[](https://mastra.ai/docs/reference/core/mastra-class#methods)
---------------------------------------------------------------------

### getAgent(name):

Agent

Returns an agent instance by id. Throws if agent not found.

### setLogger({ key, logger }):

void

Sets a logger for a specific component (AGENT | WORKFLOW). Advanced use case.

### getLogger(key):

Logger | undefined

Gets the logger for a specific component. Advanced use case.

Error Handling[](https://mastra.ai/docs/reference/core/mastra-class#error-handling)
-----------------------------------------------------------------------------------

The Mastra class methods throw typed errors that can be caught:

```
try {
  const tool = mastra.getTool("nonexistentTool");
} catch (error) {
  if (error instanceof Error) {
    console.log(error.message); // "Tool with name nonexistentTool not found"
  }
}
```

Last updated on February 25, 2025

[Custom Evals](https://mastra.ai/docs/evals/02-custom-eval "Custom Evals")[mastra init](https://mastra.ai/docs/reference/cli/init "mastra init")



================================================================================
Section 28: Content from https://mastra.ai/docs/reference/cli/init
================================================================================

Title: `mastra init` reference | Project Creation | Mastra CLI

URL Source: https://mastra.ai/docs/reference/cli/init

Markdown Content:
\`mastra init\` reference | Project Creation | Mastra CLI
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[mastra init Reference](https://mastra.ai/docs/reference/cli/init#)[`mastra init`](https://mastra.ai/docs/reference/cli/init#mastra-init)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/cli/init.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")CLImastra init

`mastra init` Reference
=======================

`mastra init`[](https://mastra.ai/docs/reference/cli/init#mastra-init)
----------------------------------------------------------------------

This creates a new Mastra project. You can run it in three different ways:

1.  **Interactive Mode (Recommended)** Run without flags to use the interactive prompt, which will guide you through:
    
    *   Choosing a directory for Mastra files
    *   Selecting components to install (Agents, Tools, Workflows)
    *   Choosing a default LLM provider (OpenAI, Anthropic, or Groq)
    *   Deciding whether to include example code
2.  **Quick Start with Defaults**
    
    ```
    mastra init --default
    ```
    
    This sets up a project with:
    
    *   Source directory: `src/`
    *   All components: agents, tools, workflows
    *   OpenAI as the default provider
    *   No example code
3.  **Custom Setup**
    
    ```
    mastra init --dir src/mastra --components agents,tools --llm openai --example
    ```
    
    Options:
    
    *   `-d, --dir`: Directory for Mastra files (defaults to src/mastra)
    *   `-c, --components`: Comma-separated list of components (agents, tools, workflows)
    *   `-l, --llm`: Default model provider (openai, anthropic, or groq)
    *   `-k, --llm-api-key`: API key for the selected LLM provider (will be added to .env file)
    *   `-e, --example`: Include example code
    *   `-ne, --no-example`: Skip example code

Last updated on February 25, 2025

[Mastra Class](https://mastra.ai/docs/reference/core/mastra-class "Mastra Class")[mastra dev](https://mastra.ai/docs/reference/cli/dev "mastra dev")



================================================================================
Section 29: Content from https://mastra.ai/docs/reference/cli/dev
================================================================================

Title: `mastra dev` Reference | Local Development | Mastra CLI

URL Source: https://mastra.ai/docs/reference/cli/dev

Markdown Content:
\`mastra dev\` Reference | Local Development | Mastra CLI
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[mastra dev Reference](https://mastra.ai/docs/reference/cli/dev#)[Parameters](https://mastra.ai/docs/reference/cli/dev#parameters)[Routes](https://mastra.ai/docs/reference/cli/dev#routes)[Agent Routes](https://mastra.ai/docs/reference/cli/dev#agent-routes)[Tool Routes](https://mastra.ai/docs/reference/cli/dev#tool-routes)[Workflow Routes](https://mastra.ai/docs/reference/cli/dev#workflow-routes)[OpenAPI Specification](https://mastra.ai/docs/reference/cli/dev#openapi-specification)[Additional Notes](https://mastra.ai/docs/reference/cli/dev#additional-notes)[Example request](https://mastra.ai/docs/reference/cli/dev#example-request)[Related Docs](https://mastra.ai/docs/reference/cli/dev#related-docs)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/cli/dev.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[CLI](https://mastra.ai/docs/reference/cli/init "CLI")mastra dev

`mastra dev` Reference
======================

The `mastra dev` command starts a development server that exposes REST endpoints for your agents, tools, and workflows,

Parameters[](https://mastra.ai/docs/reference/cli/dev#parameters)
-----------------------------------------------------------------

### \--dir?:

string

Specifies the path to your Mastra folder (containing agents, tools, and workflows). Defaults to the current working directory.

### \--env?:

string

Specifies which environment file to load. Defaults to \`.env.development\`, falling back to \`.env\` if not found.

### \--tools?:

string

Comma-separated paths to additional tool directories that should be registered. For example: 'src/tools/dbTools,src/tools/scraperTools'.

### \--port?:

number

Specifies the port number for the development server. Defaults to 4111.

Routes[](https://mastra.ai/docs/reference/cli/dev#routes)
---------------------------------------------------------

Starting the server with `mastra dev` exposes a set of REST endpoints by default:

### Agent Routes[](https://mastra.ai/docs/reference/cli/dev#agent-routes)

Agents are expected to be exported from `src/mastra/agents`.

• `GET /api/agents`

*   Lists the registered agents found in your Mastra folder. • `POST /api/agents/:agentId/generate`
*   Sends a text-based prompt to the specified agent, returning the agent’s response.

### Tool Routes[](https://mastra.ai/docs/reference/cli/dev#tool-routes)

Tools are expected to be exported from `src/mastra/tools` (or the configured tools directory).

• `POST /api/tools/:toolName`

*   Invokes a specific tool by name, passing input data in the request body.

### Workflow Routes[](https://mastra.ai/docs/reference/cli/dev#workflow-routes)

Workflows are expected to be exported from `src/mastra/workflows` (or the configured workflows directory).

• `POST /api/workflows/:workflowName/start`

*   Starts the specified workflow. • `POST /api/workflows/:workflowName/:instanceId/event`
*   Sends an event or trigger signal to an existing workflow instance. • `GET /api/workflows/:workflowName/:instanceId/status`
*   Returns status info for a running workflow instance.

### OpenAPI Specification[](https://mastra.ai/docs/reference/cli/dev#openapi-specification)

• `GET /openapi.json`

*   Returns an auto-generated OpenAPI specification for your project’s endpoints.

Additional Notes[](https://mastra.ai/docs/reference/cli/dev#additional-notes)
-----------------------------------------------------------------------------

The port defaults to 4111.

Make sure you have your environment variables set up in your `.env.development` or `.env` file for any providers you use (e.g., `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, etc.).

### Example request[](https://mastra.ai/docs/reference/cli/dev#example-request)

To test an agent after running `mastra dev`:

```
curl -X POST http://localhost:4111/api/agents/myAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      { "role": "user", "content": "Hello, how can you assist me today?" }
    ]
  }'
```

Related Docs[](https://mastra.ai/docs/reference/cli/dev#related-docs)
---------------------------------------------------------------------

*   [REST Endpoints Overview](https://mastra.ai/docs/local-dev/mastra-dev) – More detailed usage of the dev server and agent endpoints.
*   [mastra deploy](https://mastra.ai/docs/deployment/deployment) – Deploy your project to Vercel or Cloudflare.

Last updated on February 25, 2025

[mastra init](https://mastra.ai/docs/reference/cli/init "mastra init")[mastra deploy](https://mastra.ai/docs/reference/cli/deploy "mastra deploy")



================================================================================
Section 30: Content from https://mastra.ai/docs/reference/cli/deploy
================================================================================

Title: `mastra deploy` Reference | Deployment | Mastra CLI

URL Source: https://mastra.ai/docs/reference/cli/deploy

Markdown Content:
\`mastra deploy\` Reference | Deployment | Mastra CLI
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[mastra deploy Reference](https://mastra.ai/docs/reference/cli/deploy#)[`mastra deploy vercel`](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-vercel)[`mastra deploy cloudflare`](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-cloudflare)[`mastra deploy netlify`](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-netlify)[Flags](https://mastra.ai/docs/reference/cli/deploy#flags)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/cli/deploy.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[CLI](https://mastra.ai/docs/reference/cli/init "CLI")mastra deploy

`mastra deploy` Reference
=========================

`mastra deploy vercel`[](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-vercel)
------------------------------------------------------------------------------------------

Deploy your Mastra project to Vercel.

`mastra deploy cloudflare`[](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-cloudflare)
--------------------------------------------------------------------------------------------------

Deploy your Mastra project to Cloudflare.

`mastra deploy netlify`[](https://mastra.ai/docs/reference/cli/deploy#mastra-deploy-netlify)
--------------------------------------------------------------------------------------------

Deploy your Mastra project to Netlify.

### Flags[](https://mastra.ai/docs/reference/cli/deploy#flags)

*   `-d, --dir <dir>`: Path to your mastra folder

Last updated on February 25, 2025

[mastra dev](https://mastra.ai/docs/reference/cli/dev "mastra dev")[mastra build](https://mastra.ai/docs/reference/cli/build "mastra build")



================================================================================
Section 31: Content from https://mastra.ai/docs/reference/cli/build
================================================================================

Title: mastra build

URL Source: https://mastra.ai/docs/reference/cli/build

Markdown Content:
mastra build
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Usage](https://mastra.ai/docs/reference/cli/build#usage)[Options](https://mastra.ai/docs/reference/cli/build#options)[What It Does](https://mastra.ai/docs/reference/cli/build#what-it-does)[Example](https://mastra.ai/docs/reference/cli/build#example)[Output](https://mastra.ai/docs/reference/cli/build#output)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/cli/build.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[CLI](https://mastra.ai/docs/reference/cli/init "CLI")mastra build

The `mastra build` command bundles your Mastra project into a production-ready Hono server. Hono is a lightweight web framework that provides type-safe routing and middleware support, making it ideal for deploying Mastra agents as HTTP endpoints.

Usage[](https://mastra.ai/docs/reference/cli/build#usage)
---------------------------------------------------------

```
mastra build [options]
```

Options[](https://mastra.ai/docs/reference/cli/build#options)
-------------------------------------------------------------

*   `--dir <path>`: Directory containing your Mastra project (default: current directory)

What It Does[](https://mastra.ai/docs/reference/cli/build#what-it-does)
-----------------------------------------------------------------------

1.  Locates your Mastra entry file (either `src/mastra/index.ts` or `src/mastra/index.js`)
2.  Creates a `.mastra` output directory
3.  Bundles your code using Rollup with:
    *   Tree shaking for optimal bundle size
    *   Node.js environment targeting
    *   Source map generation for debugging

Example[](https://mastra.ai/docs/reference/cli/build#example)
-------------------------------------------------------------

```
# Build from current directory
mastra build
 
# Build from specific directory
mastra build --dir ./my-mastra-project
```

Output[](https://mastra.ai/docs/reference/cli/build#output)
-----------------------------------------------------------

The command generates a production bundle in the `.mastra` directory, which includes:

*   A Hono-based HTTP server with your Mastra agents exposed as endpoints
*   Bundled JavaScript files optimized for production
*   Source maps for debugging
*   Required dependencies

This output is suitable for:

*   Deploying to cloud servers (EC2, Digital Ocean)
*   Running in containerized environments
*   Using with container orchestration systems

Last updated on February 25, 2025

[mastra deploy](https://mastra.ai/docs/reference/cli/deploy "mastra deploy")[Memory Class](https://mastra.ai/docs/reference/memory/Memory "Memory Class")



================================================================================
Section 32: Content from https://mastra.ai/docs/reference/memory/Memory
================================================================================

Title: Memory Class Reference

URL Source: https://mastra.ai/docs/reference/memory/Memory

Markdown Content:
Memory Class Reference
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Memory Class Reference](https://mastra.ai/docs/reference/memory/Memory#)[Basic Usage](https://mastra.ai/docs/reference/memory/Memory#basic-usage)[Custom Configuration](https://mastra.ai/docs/reference/memory/Memory#custom-configuration)[Parameters](https://mastra.ai/docs/reference/memory/Memory#parameters)[options](https://mastra.ai/docs/reference/memory/Memory#options)[Working Memory](https://mastra.ai/docs/reference/memory/Memory#working-memory)[embedder](https://mastra.ai/docs/reference/memory/Memory#embedder)[Additional Notes](https://mastra.ai/docs/reference/memory/Memory#additional-notes)[Vector Search Configuration](https://mastra.ai/docs/reference/memory/Memory#vector-search-configuration)[Related](https://mastra.ai/docs/reference/memory/Memory#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/memory/Memory.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")MemoryMemory Class

Memory Class Reference
======================

The `Memory` class provides a robust system for managing conversation history and thread-based message storage in Mastra. It enables persistent storage of conversations, semantic search capabilities, and efficient message retrieval. By default, it uses LibSQL for storage and vector search, and FastEmbed for embeddings.

Basic Usage[](https://mastra.ai/docs/reference/memory/Memory#basic-usage)
-------------------------------------------------------------------------

```
import { Memory } from "@mastra/memory";
import { Agent } from "@mastra/core/agent";
 
const agent = new Agent({
  memory: new Memory(),
  ...otherOptions,
});
```

Custom Configuration[](https://mastra.ai/docs/reference/memory/Memory#custom-configuration)
-------------------------------------------------------------------------------------------

```
import { Memory } from "@mastra/memory";
import { LibSQLStore } from "@mastra/core/storage/libsql";
import { LibSQLVector } from "@mastra/core/vector/libsql";
import { Agent } from "@mastra/core/agent";
 
const memory = new Memory({
  // Custom storage configuration
  storage: new LibSQLStore({
    url: "file:memory.db",
  }),
 
  // Custom vector database for semantic search
  vector: new LibSQLVector({
    url: "file:vector.db",
  }),
 
  // Memory configuration options
  options: {
    // Number of recent messages to include
    lastMessages: 20,
 
    // Semantic search configuration
    semanticRecall: {
      topK: 3, // Number of similar messages to retrieve
      messageRange: {
        // Messages to include around each result
        before: 2,
        after: 1,
      },
    },
 
    // Working memory configuration
    workingMemory: {
      enabled: true,
      template: "<user><first_name></first_name><last_name></last_name></user>",
    },
  },
});
 
const agent = new Agent({
  memory,
  ...otherOptions,
});
```

Parameters[](https://mastra.ai/docs/reference/memory/Memory#parameters)
-----------------------------------------------------------------------

### storage:

MastraStorage

Storage implementation for persisting memory data

### vector?:

MastraVector

Vector store for semantic search capabilities

### embedder?:

EmbeddingModel

Embedder instance for vector embeddings. Uses FastEmbed (bge-small-en-v1.5) by default

### options?:

MemoryConfig

General memory configuration options

### options[](https://mastra.ai/docs/reference/memory/Memory#options)

### lastMessages?:

number | false

\= 40

Number of most recent messages to retrieve. Set to false to disable.

### semanticRecall?:

boolean | SemanticRecallConfig

\= false (true if vector store provided)

Enable semantic search in message history. Automatically enabled when vector store is provided.

### topK?:

number

\= 2

Number of similar messages to retrieve when using semantic search

### messageRange?:

number | { before: number; after: number }

\= 2

Range of messages to include around semantic search results

### workingMemory?:

{ enabled: boolean; template: string }

\= { enabled: false, template: '<user\><first\_name\></first\_name\><last\_name\></last\_name\>...</user\>' }

Configuration for working memory feature that allows persistent storage of user information across conversations

### Working Memory[](https://mastra.ai/docs/reference/memory/Memory#working-memory)

The working memory feature allows agents to maintain persistent information across conversations. When enabled, the Memory class will automatically manage XML-based working memory updates through the conversation stream.

If no template is provided, the Memory class uses a default template that includes fields for user details, preferences, goals, and other contextual information. See the [Agent Memory Guide](https://mastra.ai/docs/agents/agent-memory#working-memory) for detailed usage examples and best practices.

### embedder[](https://mastra.ai/docs/reference/memory/Memory#embedder)

By default, Memory uses FastEmbed with the `bge-small-en-v1.5` model, which provides a good balance of performance and model size (~130MB). You only need to specify an embedder if you want to use a different model or provider.

Additional Notes[](https://mastra.ai/docs/reference/memory/Memory#additional-notes)
-----------------------------------------------------------------------------------

### Vector Search Configuration[](https://mastra.ai/docs/reference/memory/Memory#vector-search-configuration)

When using vector search capabilities with custom configuration, ensure you configure both the vector store and appropriate search options. Here’s an example:

```
import { Memory } from "@mastra/memory";
import { LibSQLStore } from "@mastra/core/storage/libsql";
import { LibSQLVector } from "@mastra/core/vector/libsql";
 
const memory = new Memory({
  storage: new LibSQLStore({
    url: ":memory:",
  }),
  vector: new LibSQLVector({
    url: ":memory:",
  }),
  options: {
    semanticRecall: {
      topK: 5,
      messageRange: 2,
    },
  },
});
```

### Related[](https://mastra.ai/docs/reference/memory/Memory#related)

*   [createThread](https://mastra.ai/docs/reference/memory/createThread)
*   [query](https://mastra.ai/docs/reference/memory/query)

Last updated on February 25, 2025

[mastra build](https://mastra.ai/docs/reference/cli/build "mastra build")[.createThread()](https://mastra.ai/docs/reference/memory/createThread ".createThread()")



================================================================================
Section 33: Content from https://mastra.ai/docs/reference/memory/createThread
================================================================================

Title: createThread

URL Source: https://mastra.ai/docs/reference/memory/createThread

Markdown Content:
createThread
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createThread](https://mastra.ai/docs/reference/memory/createThread#)[Usage Example](https://mastra.ai/docs/reference/memory/createThread#usage-example)[Parameters](https://mastra.ai/docs/reference/memory/createThread#parameters)[Returns](https://mastra.ai/docs/reference/memory/createThread#returns)[Related](https://mastra.ai/docs/reference/memory/createThread#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/memory/createThread.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Memory](https://mastra.ai/docs/reference/memory/Memory "Memory").createThread()

createThread
============

Creates a new conversation thread in the memory system. Each thread represents a distinct conversation or context and can contain multiple messages.

Usage Example[](https://mastra.ai/docs/reference/memory/createThread#usage-example)
-----------------------------------------------------------------------------------

```
import { Memory } from "@mastra/memory";
 
const memory = new Memory({ /* config */ });
const thread = await memory.createThread({
  resourceId: "user-123",
  title: "Support Conversation",
  metadata: {
    category: "support",
    priority: "high"
  }
});
```

Parameters[](https://mastra.ai/docs/reference/memory/createThread#parameters)
-----------------------------------------------------------------------------

### resourceId:

string

Identifier for the resource this thread belongs to (e.g., user ID, project ID)

### threadId?:

string

Optional custom ID for the thread. If not provided, one will be generated.

### title?:

string

Optional title for the thread

### metadata?:

Record<string, unknown\>

Optional metadata to associate with the thread

Returns[](https://mastra.ai/docs/reference/memory/createThread#returns)
-----------------------------------------------------------------------

### id:

string

Unique identifier of the created thread

### resourceId:

string

Resource ID associated with the thread

### title:

string

Title of the thread (if provided)

### createdAt:

Date

Timestamp when the thread was created

### updatedAt:

Date

Timestamp when the thread was last updated

### metadata:

Record<string, unknown\>

Additional metadata associated with the thread

### Related[](https://mastra.ai/docs/reference/memory/createThread#related)

*   [Memory](https://mastra.ai/docs/reference/memory/Memory)
*   [getThreadById](https://mastra.ai/docs/reference/memory/getThreadById)
*   [getThreadsByResourceId](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)

Last updated on February 25, 2025

[Memory Class](https://mastra.ai/docs/reference/memory/Memory "Memory Class")[.query()](https://mastra.ai/docs/reference/memory/query ".query()")



================================================================================
Section 34: Content from https://mastra.ai/docs/reference/memory/query
================================================================================

Title: query

URL Source: https://mastra.ai/docs/reference/memory/query

Markdown Content:
query
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[query](https://mastra.ai/docs/reference/memory/query#)[Usage Example](https://mastra.ai/docs/reference/memory/query#usage-example)[Parameters](https://mastra.ai/docs/reference/memory/query#parameters)[selectBy](https://mastra.ai/docs/reference/memory/query#selectby)[include](https://mastra.ai/docs/reference/memory/query#include)[Returns](https://mastra.ai/docs/reference/memory/query#returns)[Additional Notes](https://mastra.ai/docs/reference/memory/query#additional-notes)[Related](https://mastra.ai/docs/reference/memory/query#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/memory/query.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Memory](https://mastra.ai/docs/reference/memory/Memory "Memory").query()

query
=====

Retrieves messages from a specific thread, with support for pagination and filtering options.

Usage Example[](https://mastra.ai/docs/reference/memory/query#usage-example)
----------------------------------------------------------------------------

```
import { Memory } from "@mastra/memory";
 
const memory = new Memory({
  /* config */
});
 
// Get last 50 messages
const { messages, uiMessages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    last: 50,
  },
});
 
// Get messages with context around specific messages
const { messages: contextMessages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    include: [
      {
        id: "msg-123", // Get just this message (no context)
      },
      {
        id: "msg-456", // Get this message with custom context
        withPreviousMessages: 3, // 3 messages before
        withNextMessages: 1, // 1 message after
      },
    ],
  },
});
 
// Semantic search in messages
const { messages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    vectorSearchString: "What was discussed about deployment?",
  },
  threadConfig: {
    historySearch: true,
  },
});
```

Parameters[](https://mastra.ai/docs/reference/memory/query#parameters)
----------------------------------------------------------------------

### threadId:

string

The unique identifier of the thread to retrieve messages from

### selectBy?:

object

Options for filtering messages

### threadConfig?:

MemoryConfig

Configuration options for message retrieval

### selectBy[](https://mastra.ai/docs/reference/memory/query#selectby)

### vectorSearchString?:

string

Search string for finding semantically similar messages

### last?:

number | false

\= 40

Number of most recent messages to retrieve. Set to false to disable limit. Note: threadConfig.lastMessages (default: 40) will override this if smaller.

### include?:

array

Array of message IDs to include with context

### include[](https://mastra.ai/docs/reference/memory/query#include)

### id:

string

ID of the message to include

### withPreviousMessages?:

number

Number of messages to include before this message. Defaults to 2 when using vector search, 0 otherwise.

### withNextMessages?:

number

Number of messages to include after this message. Defaults to 2 when using vector search, 0 otherwise.

Returns[](https://mastra.ai/docs/reference/memory/query#returns)
----------------------------------------------------------------

### messages:

CoreMessage\[\]

Array of retrieved messages in their core format

### uiMessages:

AiMessage\[\]

Array of messages formatted for UI display

Additional Notes[](https://mastra.ai/docs/reference/memory/query#additional-notes)
----------------------------------------------------------------------------------

The `query` function returns two different message formats:

*   `messages`: Core message format used internally
*   `uiMessages`: Formatted messages suitable for UI display, including proper threading of tool calls and results

### Related[](https://mastra.ai/docs/reference/memory/query#related)

*   [Memory](https://mastra.ai/docs/reference/memory/Memory)

Last updated on February 25, 2025

[.createThread()](https://mastra.ai/docs/reference/memory/createThread ".createThread()")[.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById ".getThreadById()")



================================================================================
Section 35: Content from https://mastra.ai/docs/reference/memory/getThreadById
================================================================================

Title: getThreadById Reference

URL Source: https://mastra.ai/docs/reference/memory/getThreadById

Markdown Content:
getThreadById Reference
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[getThreadById Reference](https://mastra.ai/docs/reference/memory/getThreadById#)[Usage Example](https://mastra.ai/docs/reference/memory/getThreadById#usage-example)[Parameters](https://mastra.ai/docs/reference/memory/getThreadById#parameters)[Returns](https://mastra.ai/docs/reference/memory/getThreadById#returns)[Related](https://mastra.ai/docs/reference/memory/getThreadById#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/memory/getThreadById.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Memory](https://mastra.ai/docs/reference/memory/Memory "Memory").getThreadById()

getThreadById Reference
=======================

The `getThreadById` function retrieves a specific thread by its ID from storage.

Usage Example[](https://mastra.ai/docs/reference/memory/getThreadById#usage-example)
------------------------------------------------------------------------------------

```
import { Memory } from "@mastra/core/memory";
 
const memory = new Memory(config);
 
const thread = await memory.getThreadById({ threadId: "thread-123" });
```

Parameters[](https://mastra.ai/docs/reference/memory/getThreadById#parameters)
------------------------------------------------------------------------------

### threadId:

string

The ID of the thread to be retrieved.

Returns[](https://mastra.ai/docs/reference/memory/getThreadById#returns)
------------------------------------------------------------------------

### StorageThreadType | null:

Promise

A promise that resolves to the thread associated with the given ID, or null if not found.

### Related[](https://mastra.ai/docs/reference/memory/getThreadById#related)

*   [Memory](https://mastra.ai/docs/reference/memory/Memory)

Last updated on February 25, 2025

[.query()](https://mastra.ai/docs/reference/memory/query ".query()")[.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId ".getThreadsByResourceId()")



================================================================================
Section 36: Content from https://mastra.ai/docs/reference/memory/getThreadsByResourceId
================================================================================

Title: getThreadsByResourceId Reference

URL Source: https://mastra.ai/docs/reference/memory/getThreadsByResourceId

Markdown Content:
getThreadsByResourceId Reference
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[getThreadsByResourceId Reference](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#)[Usage Example](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#usage-example)[Parameters](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#parameters)[Returns](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#returns)[Related](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/memory/getThreadsByResourceId.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Memory](https://mastra.ai/docs/reference/memory/Memory "Memory").getThreadsByResourceId()

getThreadsByResourceId Reference
================================

The `getThreadsByResourceId` function retrieves all threads associated with a specific resource ID from storage.

Usage Example[](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#usage-example)
---------------------------------------------------------------------------------------------

```
import { Memory } from "@mastra/core/memory";
 
const memory = new Memory(config);
 
const threads = await memory.getThreadsByResourceId({
  resourceId: "resource-123",
});
```

Parameters[](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#parameters)
---------------------------------------------------------------------------------------

### resourceId:

string

The ID of the resource whose threads are to be retrieved.

Returns[](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#returns)
---------------------------------------------------------------------------------

### StorageThreadType\[\]:

Promise

A promise that resolves to an array of threads associated with the given resource ID.

### Related[](https://mastra.ai/docs/reference/memory/getThreadsByResourceId#related)

*   [Memory](https://mastra.ai/docs/reference/memory/Memory)

Last updated on February 25, 2025

[.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById ".getThreadById()")[.chunk()](https://mastra.ai/docs/reference/rag/chunk ".chunk()")



================================================================================
Section 37: Content from https://mastra.ai/docs/reference/rag/chunk
================================================================================

Title: Reference: .chunk() | Document Processing | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/chunk

Markdown Content:
Reference: .chunk() | Document Processing | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Reference: .chunk()](https://mastra.ai/docs/reference/rag/chunk#)[Example](https://mastra.ai/docs/reference/rag/chunk#example)[Parameters](https://mastra.ai/docs/reference/rag/chunk#parameters)[Strategy-Specific Options](https://mastra.ai/docs/reference/rag/chunk#strategy-specific-options)[HTML](https://mastra.ai/docs/reference/rag/chunk#html)[Markdown](https://mastra.ai/docs/reference/rag/chunk#markdown)[Token](https://mastra.ai/docs/reference/rag/chunk#token)[JSON](https://mastra.ai/docs/reference/rag/chunk#json)[Return Value](https://mastra.ai/docs/reference/rag/chunk#return-value)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/chunk.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")RAG.chunk()

Reference: .chunk()
===================

The `.chunk()` function splits documents into smaller segments using various strategies and options.

Example[](https://mastra.ai/docs/reference/rag/chunk#example)
-------------------------------------------------------------

```
import { Document } from '@mastra/core';
 
const doc = new Document(`
# Introduction
This is a sample document that we want to split into chunks.
 
## Section 1
Here is the first section with some content.
 
## Section 2 
Here is another section with different content.
`);
 
// Basic chunking with defaults
const chunks = await doc.chunk();
 
// Markdown-specific chunking with header extraction
const chunksWithMetadata = await doc.chunk({
  strategy: 'markdown',
  headers: [['#', 'title'], ['##', 'section']],
  extract: {
    fields: [
      { name: 'summary', description: 'A brief summary of the chunk content' },
      { name: 'keywords', description: 'Key terms found in the chunk' }
    ]
  }
});
```

Parameters[](https://mastra.ai/docs/reference/rag/chunk#parameters)
-------------------------------------------------------------------

### strategy?:

'recursive' | 'character' | 'token' | 'markdown' | 'html' | 'json' | 'latex'

The chunking strategy to use. If not specified, defaults based on document type. Depending on the chunking strategy, there are additional optionals. Defaults: .md files → 'markdown', .html/.htm → 'html', .json → 'json', .tex → 'latex', others → 'recursive'

### size?:

number

\= 512

Maximum size of each chunk

### overlap?:

number

\= 50

Number of characters/tokens that overlap between chunks.

### separator?:

string

\= \\n\\n

Character(s) to split on. Defaults to double newline for text content.

### isSeparatorRegex?:

boolean

\= false

Whether the separator is a regex pattern

### keepSeparator?:

'start' | 'end'

Whether to keep the separator at the start or end of chunks

### extract?:

ExtractParams

Metadata extraction configuration. See \[ExtractParams reference\](./extract-params) for details.

Strategy-Specific Options[](https://mastra.ai/docs/reference/rag/chunk#strategy-specific-options)
-------------------------------------------------------------------------------------------------

Strategy-specific options are passed as top-level parameters alongside the strategy parameter. For example:

```
// HTML strategy example
const chunks = await doc.chunk({
  strategy: 'html',
  headers: [['h1', 'title'], ['h2', 'subtitle']], // HTML-specific option
  sections: [['div.content', 'main']], // HTML-specific option
  size: 500 // general option
});
 
// Markdown strategy example
const chunks = await doc.chunk({
  strategy: 'markdown',
  headers: [['#', 'title'], ['##', 'section']], // Markdown-specific option
  stripHeaders: true, // Markdown-specific option
  overlap: 50 // general option
});
 
// Token strategy example
const chunks = await doc.chunk({
  strategy: 'token',
  encodingName: 'gpt2', // Token-specific option
  modelName: 'gpt-3.5-turbo', // Token-specific option
  size: 1000 // general option
});
```

The options documented below are passed directly at the top level of the configuration object, not nested within a separate options object.

### HTML[](https://mastra.ai/docs/reference/rag/chunk#html)

### headers:

Array<\[string, string\]\>

Array of \[selector, metadata key\] pairs for header-based splitting

### sections:

Array<\[string, string\]\>

Array of \[selector, metadata key\] pairs for section-based splitting

### returnEachLine?:

boolean

Whether to return each line as a separate chunk

### Markdown[](https://mastra.ai/docs/reference/rag/chunk#markdown)

### headers:

Array<\[string, string\]\>

Array of \[header level, metadata key\] pairs

### stripHeaders?:

boolean

Whether to remove headers from the output

### returnEachLine?:

boolean

Whether to return each line as a separate chunk

### Token[](https://mastra.ai/docs/reference/rag/chunk#token)

### encodingName?:

string

Name of the token encoding to use

### modelName?:

string

Name of the model for tokenization

### JSON[](https://mastra.ai/docs/reference/rag/chunk#json)

### maxSize:

number

Maximum size of each chunk

### minSize?:

number

Minimum size of each chunk

### ensureAscii?:

boolean

Whether to ensure ASCII encoding

### convertLists?:

boolean

Whether to convert lists in the JSON

Return Value[](https://mastra.ai/docs/reference/rag/chunk#return-value)
-----------------------------------------------------------------------

Returns a `MDocument` instance containing the chunked documents. Each chunk includes:

```
interface DocumentNode {
  text: string;
  metadata: Record<string, any>;
  embedding?: number[];
}
```

Last updated on February 25, 2025

[.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId ".getThreadsByResourceId()")[.embed()](https://mastra.ai/docs/reference/rag/embeddings ".embed()")



================================================================================
Section 38: Content from https://mastra.ai/docs/reference/rag/embeddings
================================================================================

Title: Reference: embed() | Document Embedding | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/embeddings

Markdown Content:
Reference: embed() | Document Embedding | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Embed](https://mastra.ai/docs/reference/rag/embeddings#)[Single Embedding](https://mastra.ai/docs/reference/rag/embeddings#single-embedding)[Parameters](https://mastra.ai/docs/reference/rag/embeddings#parameters)[Return Value](https://mastra.ai/docs/reference/rag/embeddings#return-value)[Multiple Embeddings](https://mastra.ai/docs/reference/rag/embeddings#multiple-embeddings)[Parameters](https://mastra.ai/docs/reference/rag/embeddings#parameters-1)[Return Value](https://mastra.ai/docs/reference/rag/embeddings#return-value-1)[Example Usage](https://mastra.ai/docs/reference/rag/embeddings#example-usage)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/embeddings.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG").embed()

Embed
=====

Mastra uses the AI SDK’s `embed` and `embedMany` functions to generate vector embeddings for text inputs, enabling similarity search and RAG workflows.

Single Embedding[](https://mastra.ai/docs/reference/rag/embeddings#single-embedding)
------------------------------------------------------------------------------------

The `embed` function generates a vector embedding for a single text input:

```
import { embed } from 'ai';
 
const result = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: "Your text to embed",
  maxRetries: 2  // optional, defaults to 2
});
```

### Parameters[](https://mastra.ai/docs/reference/rag/embeddings#parameters)

### model:

EmbeddingModel

The embedding model to use (e.g. openai.embedding('text-embedding-3-small'))

### value:

string | Record<string, any\>

The text content or object to embed

### maxRetries?:

number

\= 2

Maximum number of retries per embedding call. Set to 0 to disable retries.

### abortSignal?:

AbortSignal

Optional abort signal to cancel the request

### headers?:

Record<string, string\>

Additional HTTP headers for the request (only for HTTP-based providers)

### Return Value[](https://mastra.ai/docs/reference/rag/embeddings#return-value)

### embedding:

number\[\]

The embedding vector for the input

Multiple Embeddings[](https://mastra.ai/docs/reference/rag/embeddings#multiple-embeddings)
------------------------------------------------------------------------------------------

For embedding multiple texts at once, use the `embedMany` function:

```
import { embedMany } from 'ai';
 
const result = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: ["First text", "Second text", "Third text"],
  maxRetries: 2  // optional, defaults to 2
});
```

### Parameters[](https://mastra.ai/docs/reference/rag/embeddings#parameters-1)

### model:

EmbeddingModel

The embedding model to use (e.g. openai.embedding('text-embedding-3-small'))

### values:

string\[\] | Record<string, any\>\[\]

Array of text content or objects to embed

### maxRetries?:

number

\= 2

Maximum number of retries per embedding call. Set to 0 to disable retries.

### abortSignal?:

AbortSignal

Optional abort signal to cancel the request

### headers?:

Record<string, string\>

Additional HTTP headers for the request (only for HTTP-based providers)

### Return Value[](https://mastra.ai/docs/reference/rag/embeddings#return-value-1)

### embeddings:

number\[\]\[\]

Array of embedding vectors corresponding to the input values

Example Usage[](https://mastra.ai/docs/reference/rag/embeddings#example-usage)
------------------------------------------------------------------------------

```
import { embed, embedMany } from 'ai';
import { openai } from '@ai-sdk/openai';
 
// Single embedding
const singleResult = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: "What is the meaning of life?",
});
 
// Multiple embeddings
const multipleResult = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: [
    "First question about life",
    "Second question about universe",
    "Third question about everything"
  ],
});
```

For more detailed information about embeddings in the Vercel AI SDK, see:

*   [AI SDK Embeddings Overview](https://sdk.vercel.ai/docs/ai-sdk-core/embeddings)
*   [embed()](https://sdk.vercel.ai/docs/reference/ai-sdk-core/embed)
*   [embedMany()](https://sdk.vercel.ai/docs/reference/ai-sdk-core/embed-many)

Last updated on February 25, 2025

[.chunk()](https://mastra.ai/docs/reference/rag/chunk ".chunk()")[ExtractParams](https://mastra.ai/docs/reference/rag/extract-params "ExtractParams")



================================================================================
Section 39: Content from https://mastra.ai/docs/reference/rag/extract-params
================================================================================

Title: Reference: ExtractParams | Document Processing | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/extract-params

Markdown Content:
Reference: ExtractParams | Document Processing | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ExtractParams](https://mastra.ai/docs/reference/rag/extract-params#)[Example](https://mastra.ai/docs/reference/rag/extract-params#example)[ExtractParams](https://mastra.ai/docs/reference/rag/extract-params#extractparams)[Parameters](https://mastra.ai/docs/reference/rag/extract-params#parameters)[Field Types](https://mastra.ai/docs/reference/rag/extract-params#field-types)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/extract-params.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")ExtractParams

ExtractParams
=============

ExtractParams configures metadata extraction from document chunks.

Example[](https://mastra.ai/docs/reference/rag/extract-params#example)
----------------------------------------------------------------------

ExtractParams[](https://mastra.ai/docs/reference/rag/extract-params#extractparams)
----------------------------------------------------------------------------------

`ExtractParams` configures automatic metadata extraction from chunks using LLM analysis.

```
const doc = new Document(text);
const chunks = await doc.chunk({
  extract: {
    fields: [
      { 
        name: 'summary', 
        description: 'A 1-2 sentence summary of the main points' 
      },
      { 
        name: 'entities', 
        description: 'List of companies, people, and locations mentioned' 
      },
      {
        name: 'custom_field',
        description: 'Any other metadata you want to extract, guided by this description'
      }
    ],
    model: 'gpt-4o-mini' // Optional: specify a different model
  }
});
```

Parameters[](https://mastra.ai/docs/reference/rag/extract-params#parameters)
----------------------------------------------------------------------------

### fields:

Array<{ name: string, description: string }\>

Array of fields to extract from each chunk

### model?:

string

\= gpt-3.5-turbo

OpenAI model to use for extraction

Field Types[](https://mastra.ai/docs/reference/rag/extract-params#field-types)
------------------------------------------------------------------------------

The fields are flexible - you can define any metadata fields you want to extract. Common field types include:

*   `summary`: Brief overview of chunk content
*   `keywords`: Key terms or concepts
*   `topics`: Main subjects discussed
*   `entities`: Named entities (people, places, organizations)
*   `sentiment`: Emotional tone
*   `language`: Detected language
*   `timestamp`: Temporal references
*   `categories`: Content classification

Example:

Last updated on February 25, 2025

[.embed()](https://mastra.ai/docs/reference/rag/embeddings ".embed()")[rerank()](https://mastra.ai/docs/reference/rag/rerank "rerank()")



================================================================================
Section 40: Content from https://mastra.ai/docs/reference/rag/rerank
================================================================================

Title: Reference: Rerank | Document Retrieval | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/rerank

Markdown Content:
Reference: Rerank | Document Retrieval | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[rerank()](https://mastra.ai/docs/reference/rag/rerank#)[Usage Example](https://mastra.ai/docs/reference/rag/rerank#usage-example)[Parameters](https://mastra.ai/docs/reference/rag/rerank#parameters)[RerankerFunctionOptions](https://mastra.ai/docs/reference/rag/rerank#rerankerfunctionoptions)[Returns](https://mastra.ai/docs/reference/rag/rerank#returns)[ScoringDetails](https://mastra.ai/docs/reference/rag/rerank#scoringdetails)[Related](https://mastra.ai/docs/reference/rag/rerank#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/rerank.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")rerank()

rerank()
========

The `rerank()` function provides advanced reranking capabilities for vector search results by combining semantic relevance, vector similarity, and position-based scoring.

```
function rerank(
  results: QueryResult[],
  query: string,
  modelConfig: ModelConfig,
  options?: RerankerFunctionOptions
): Promise<RerankResult[]>
```

Usage Example[](https://mastra.ai/docs/reference/rag/rerank#usage-example)
--------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { rerank } from "@mastra/rag";
 
const model = openai("gpt-4o-mini");
 
const rerankedResults = await rerank(
  vectorSearchResults,
  "How do I deploy to production?",
  model,
  {
    weights: {
      semantic: 0.5,
      vector: 0.3,
      position: 0.2
    },
    topK: 3
  }
);
```

Parameters[](https://mastra.ai/docs/reference/rag/rerank#parameters)
--------------------------------------------------------------------

### results:

QueryResult\[\]

The vector search results to rerank

### query:

string

The search query text used to evaluate relevance

### model:

LanguageModelV1

The language model to use for reranking

### options?:

RerankerFunctionOptions

Options for the reranking model

The rerank function accepts any LanguageModel from the Vercel AI SDK. When using the Cohere model `rerank-v3.5`, it will automatically use Cohere’s reranking capabilities.

### RerankerFunctionOptions[](https://mastra.ai/docs/reference/rag/rerank#rerankerfunctionoptions)

### weights?:

WeightConfig

Weights for different scoring components (must add up to 1)

number

### semantic?:

number (default: 0.4)

Weight for semantic relevance

number

### vector?:

number (default: 0.4)

Weight for vector similarity

number

### position?:

number (default: 0.2)

Weight for position-based scoring

### queryEmbedding?:

number\[\]

Embedding of the query

### topK?:

number

\= 3

Number of top results to return

Returns[](https://mastra.ai/docs/reference/rag/rerank#returns)
--------------------------------------------------------------

The function returns an array of `RerankResult` objects:

### result:

QueryResult

The original query result

### score:

number

Combined reranking score (0-1)

### details:

ScoringDetails

Detailed scoring information

### ScoringDetails[](https://mastra.ai/docs/reference/rag/rerank#scoringdetails)

### semantic:

number

Semantic relevance score (0-1)

### vector:

number

Vector similarity score (0-1)

### position:

number

Position-based score (0-1)

### queryAnalysis?:

object

Query analysis details

number

### magnitude:

Magnitude of the query

number\[\]

### dominantFeatures:

Dominant features of the query

Related[](https://mastra.ai/docs/reference/rag/rerank#related)
--------------------------------------------------------------

*   [createVectorQueryTool](https://mastra.ai/docs/reference/tools/vector-query-tool)

Last updated on February 25, 2025

[ExtractParams](https://mastra.ai/docs/reference/rag/extract-params "ExtractParams")[MDocument](https://mastra.ai/docs/reference/rag/document "MDocument")



================================================================================
Section 41: Content from https://mastra.ai/docs/reference/rag/document
================================================================================

Title: Reference: MDocument | Document Processing | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/document

Markdown Content:
Reference: MDocument | Document Processing | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[MDocument](https://mastra.ai/docs/reference/rag/document#)[Constructor](https://mastra.ai/docs/reference/rag/document#constructor)[Static Methods](https://mastra.ai/docs/reference/rag/document#static-methods)[fromText()](https://mastra.ai/docs/reference/rag/document#fromtext)[fromHTML()](https://mastra.ai/docs/reference/rag/document#fromhtml)[fromMarkdown()](https://mastra.ai/docs/reference/rag/document#frommarkdown)[fromJSON()](https://mastra.ai/docs/reference/rag/document#fromjson)[Instance Methods](https://mastra.ai/docs/reference/rag/document#instance-methods)[chunk()](https://mastra.ai/docs/reference/rag/document#chunk)[getDocs()](https://mastra.ai/docs/reference/rag/document#getdocs)[getText()](https://mastra.ai/docs/reference/rag/document#gettext)[getMetadata()](https://mastra.ai/docs/reference/rag/document#getmetadata)[extractMetadata()](https://mastra.ai/docs/reference/rag/document#extractmetadata)[Examples](https://mastra.ai/docs/reference/rag/document#examples)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/document.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")MDocument

MDocument
=========

The MDocument class processes documents for RAG applications. The main methods are `.chunk()` and `.extractMetadata()`.

Constructor[](https://mastra.ai/docs/reference/rag/document#constructor)
------------------------------------------------------------------------

### docs:

Array<{ text: string, metadata?: Record<string, any\> }\>

Array of document chunks with their text content and optional metadata

### type:

'text' | 'html' | 'markdown' | 'json' | 'latex'

Type of document content

Static Methods[](https://mastra.ai/docs/reference/rag/document#static-methods)
------------------------------------------------------------------------------

### fromText()[](https://mastra.ai/docs/reference/rag/document#fromtext)

Creates a document from plain text content.

```
static fromText(text: string, metadata?: Record<string, any>): MDocument
```

### fromHTML()[](https://mastra.ai/docs/reference/rag/document#fromhtml)

Creates a document from HTML content.

```
static fromHTML(html: string, metadata?: Record<string, any>): MDocument
```

### fromMarkdown()[](https://mastra.ai/docs/reference/rag/document#frommarkdown)

Creates a document from Markdown content.

```
static fromMarkdown(markdown: string, metadata?: Record<string, any>): MDocument
```

### fromJSON()[](https://mastra.ai/docs/reference/rag/document#fromjson)

Creates a document from JSON content.

```
static fromJSON(json: string, metadata?: Record<string, any>): MDocument
```

Instance Methods[](https://mastra.ai/docs/reference/rag/document#instance-methods)
----------------------------------------------------------------------------------

### chunk()[](https://mastra.ai/docs/reference/rag/document#chunk)

Splits document into chunks and optionally extracts metadata.

```
async chunk(params?: ChunkParams): Promise<Chunk[]>
```

See [chunk() reference](https://mastra.ai/docs/reference/rag/chunk) for detailed options.

### getDocs()[](https://mastra.ai/docs/reference/rag/document#getdocs)

Returns array of processed document chunks.

```
getDocs(): Chunk[]
```

### getText()[](https://mastra.ai/docs/reference/rag/document#gettext)

Returns array of text strings from chunks.

```
getText(): string[]
```

### getMetadata()[](https://mastra.ai/docs/reference/rag/document#getmetadata)

Returns array of metadata objects from chunks.

```
getMetadata(): Record<string, any>[]
```

### extractMetadata()[](https://mastra.ai/docs/reference/rag/document#extractmetadata)

Extracts metadata using specified extractors. See [ExtractParams reference](https://mastra.ai/docs/reference/rag/extract-params) for details.

```
async extractMetadata(params: ExtractParams): Promise<MDocument>
```

Examples[](https://mastra.ai/docs/reference/rag/document#examples)
------------------------------------------------------------------

```
import { MDocument } from '@mastra/rag';
 
// Create document from text
const doc = MDocument.fromText('Your content here');
 
// Split into chunks with metadata extraction
const chunks = await doc.chunk({
  strategy: 'markdown',
  headers: [['#', 'title'], ['##', 'section']],
  extract: {
    fields: [
      { name: 'summary', description: 'A brief summary' },
      { name: 'keywords', description: 'Key terms' }
    ]
  }
});
 
// Get processed chunks
const docs = doc.getDocs();
const texts = doc.getText();
const metadata = doc.getMetadata();
```

Last updated on February 25, 2025

[rerank()](https://mastra.ai/docs/reference/rag/rerank "rerank()")[Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters "Metadata Filters")



================================================================================
Section 42: Content from https://mastra.ai/docs/reference/rag/metadata-filters
================================================================================

Title: Reference: Metadata Filters | Metadata Filtering | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/metadata-filters

Markdown Content:
Mastra provides a unified metadata filtering syntax across all vector stores, based on MongoDB/Sift query syntax. Each vector store translates these filters into their native format.

Basic Example[](https://mastra.ai/docs/reference/rag/metadata-filters#basic-example)
------------------------------------------------------------------------------------

Supported Operators[](https://mastra.ai/docs/reference/rag/metadata-filters#supported-operators)
------------------------------------------------------------------------------------------------

### Basic Comparison

| Operator | Description | Example | Supported By |
| --- | --- | --- | --- |
| `$eq` | Matches values equal to specified value | 
```
{
  age: {
    $eq: 25
  }
}
```



 | All

 |
| `$ne` | Matches values not equal | 

```
{
  status: {
    $ne: 'inactive'
  }
}
```



 | All

 |
| `$gt` | Greater than | 

```
{
  price: {
    $gt: 100
  }
}
```



 | All

 |
| `$gte` | Greater than or equal | 

```
{
  rating: {
    $gte: 4.5
  }
}
```



 | All

 |
| `$lt` | Less than | 

```
{
  stock: {
    $lt: 20
  }
}
```



 | All

 |
| `$lte` | Less than or equal | 

```
{
  priority: {
    $lte: 3
  }
}
```



 | All

 |

### Array Operators

| Operator | Description | Example | Supported By |
| --- | --- | --- | --- |
| `$in` | Matches any value in array | 
```
{
  category: {
    $in: ["A", "B"]
  }
}
```



 | All

 |
| `$nin` | Matches none of the values | 

```
{
  status: {
    $nin: ["deleted", "archived"]
  }
}
```



 | All

 |
| `$all` | Matches arrays containing all elements | 

```
{
  tags: {
    $all: ["urgent", "high"]
  }
}
```



 | AstraPineconeUpstash

 |
| `$elemMatch` | Matches array elements meeting criteria | 

```
{
  scores: {
    $elemMatch
  }
}
```



 | LibSQLPgVector

 |

### Logical Operators

| Operator | Description | Example | Supported By |
| --- | --- | --- | --- |
| `$and` | Logical AND | 
```
{
  $and: [
    { price: { $gt: 100 } },
    { stock: { $gt: 0 } } }
  ]
}
```



 | All except Vectorize

 |
| `$or` | Logical OR | 

```
{
  $or: [
    { status: "active" },
    { priority: "high" } }
  ]
}
```



 | All except Vectorize

 |
| `$not` | Logical NOT | 

```
{
  price: {
    $not
  }
}
```



 | AstraQdrantUpstashPgVectorLibSQL

 |
| `$nor` | Logical NOR | 

```
{
  $nor: [
    { status: "deleted" },
    { archived: true } }
  ]
}
```



 | QdrantUpstashPgVectorLibSQL

 |

### Element Operators

| Operator | Description | Example | Supported By |
| --- | --- | --- | --- |
| `$exists` | Matches documents with field | 
```
{
  rating: {
    $exists: true
  }
}
```



 | All except Vectorize, Chroma

 |

### Custom Operators

| Operator | Description | Example | Supported By |
| --- | --- | --- | --- |
| `$contains` | Text contains substring | 
```
{
  description: {
    $contains: "sale"
  }
}
```



 | UpstashLibSQLPgVector

 |
| `$regex` | Regular expression match | 

```
{
  name: {
    $regex: "^test"
  }
}
```



 | QdrantPgVectorUpstash

 |
| `$size` | Array length check | 

```
{
  tags: {
    $size
  }
}
```



 | AstraLibSQLPgVector

 |
| `$geo` | Geospatial query | 

```
{
  location: {
    $geo
  }
}
```



 | Qdrant

 |
| `$datetime` | Datetime range query | 

```
{
  created: {
    $datetime
  }
}
```



 | Qdrant

 |
| `$hasId` | Vector ID existence check | 

```
{
  $hasId: [
    { "id1", "id2" }
  ]
}
```



 | Qdrant

 |
| `$hasVector` | Vector existence check | 

```
{
  $hasVector: true
}
```



 | Qdrant

 |

Common Rules and Restrictions[](https://mastra.ai/docs/reference/rag/metadata-filters#common-rules-and-restrictions)
--------------------------------------------------------------------------------------------------------------------

1.  Field names cannot:
    
    *   Contain dots (.) unless referring to nested fields
    *   Start with $ or contain null characters
    *   Be empty strings
2.  Values must be:
    
    *   Valid JSON types (string, number, boolean, object, array)
    *   Not undefined
    *   Properly typed for the operator (e.g., numbers for numeric comparisons)
3.  Logical operators:
    
    *   Must contain valid conditions
    *   Cannot be empty
    *   Must be properly nested
    *   Can only be used at top level or nested within other logical operators
    *   Cannot be used at field level or nested inside a field
    *   Cannot be used inside an operator
    *   Valid:
    *   Valid:
    *   Invalid:
    *   Invalid:
4.  $not operator:
    
    *   Must be an object
    *   Cannot be empty
    *   Can be used at field level or top level
    *   Valid:
    *   Valid:
5.  Operator nesting:
    
    *   Logical operators must contain field conditions, not direct operators
    *   Valid:
    *   Invalid:

Store-Specific Notes[](https://mastra.ai/docs/reference/rag/metadata-filters#store-specific-notes)
--------------------------------------------------------------------------------------------------

### Astra[](https://mastra.ai/docs/reference/rag/metadata-filters#astra)

*   Nested field queries are supported using dot notation
*   Array fields must be explicitly defined as arrays in the metadata
*   Metadata values are case-sensitive

### ChromaDB[](https://mastra.ai/docs/reference/rag/metadata-filters#chromadb)

*   Where filters only return results where the filtered field exists in metadata
*   Empty metadata fields are not included in filter results
*   Metadata fields must be present for negative matches (e.g., $ne won’t match documents missing the field)

### Cloudflare Vectorize[](https://mastra.ai/docs/reference/rag/metadata-filters#cloudflare-vectorize)

*   Requires explicit metadata indexing before filtering can be used
*   Use to index fields you want to filter on
*   Up to 10 metadata indexes per Vectorize index
*   String values are indexed up to first 64 bytes (truncated on UTF-8 boundaries)
*   Number values use float64 precision
*   Filter JSON must be under 2048 bytes
*   Field names cannot contain dots (.) or start with $
*   Field names limited to 512 characters
*   Vectors must be re-upserted after creating new metadata indexes to be included in filtered results
*   Range queries may have reduced accuracy with very large datasets (~10M+ vectors)

### LibSQL[](https://mastra.ai/docs/reference/rag/metadata-filters#libsql)

*   Supports nested object queries with dot notation
*   Array fields are validated to ensure they contain valid JSON arrays
*   Numeric comparisons maintain proper type handling
*   Empty arrays in conditions are handled gracefully
*   Metadata is stored in a JSONB column for efficient querying

### PgVector[](https://mastra.ai/docs/reference/rag/metadata-filters#pgvector)

*   Full support for PostgreSQL’s native JSON querying capabilities
*   Efficient handling of array operations using native array functions
*   Proper type handling for numbers, strings, and booleans
*   Nested field queries use PostgreSQL’s JSON path syntax internally
*   Metadata is stored in a JSONB column for efficient indexing

### Pinecone[](https://mastra.ai/docs/reference/rag/metadata-filters#pinecone)

*   Metadata field names are limited to 512 characters
*   Numeric values must be within the range of ±1e38
*   Arrays in metadata are limited to 64KB total size
*   Nested objects are flattened with dot notation
*   Metadata updates replace the entire metadata object

### Qdrant[](https://mastra.ai/docs/reference/rag/metadata-filters#qdrant)

*   Supports advanced filtering with nested conditions
*   Payload (metadata) fields must be explicitly indexed for filtering
*   Efficient handling of geo-spatial queries
*   Special handling for null and empty values
*   Vector-specific filtering capabilities
*   Datetime values must be in RFC 3339 format

### Upstash[](https://mastra.ai/docs/reference/rag/metadata-filters#upstash)

*   512-character limit for metadata field keys
*   Query size is limited (avoid large IN clauses)
*   No support for null/undefined values in filters
*   Translates to SQL-like syntax internally
*   Case-sensitive string comparisons
*   Metadata updates are atomic

*   [Astra](https://mastra.ai/docs/reference/rag/astra)
*   [Chroma](https://mastra.ai/docs/reference/rag/chroma)
*   [Cloudflare Vectorize](https://mastra.ai/docs/reference/rag/vectorize)
*   [LibSQL](https://mastra.ai/docs/reference/rag/libsql)
*   [PgStore](https://mastra.ai/docs/reference/rag/pg)
*   [Pinecone](https://mastra.ai/docs/reference/rag/pinecone)
*   [Qdrant](https://mastra.ai/docs/reference/rag/qdrant)
*   [Upstash](https://mastra.ai/docs/reference/rag/upstash)

Last updated on February 25, 2025

[MDocument](https://mastra.ai/docs/reference/rag/document "MDocument")[GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag "GraphRAG")



================================================================================
Section 43: Content from https://mastra.ai/docs/reference/rag/graph-rag
================================================================================

Title: Reference: GraphRAG | Graph-based RAG | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/graph-rag

Markdown Content:
Reference: GraphRAG | Graph-based RAG | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag#)[Basic Usage](https://mastra.ai/docs/reference/rag/graph-rag#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/rag/graph-rag#constructor-parameters)[Methods](https://mastra.ai/docs/reference/rag/graph-rag#methods)[createGraph](https://mastra.ai/docs/reference/rag/graph-rag#creategraph)[Parameters](https://mastra.ai/docs/reference/rag/graph-rag#parameters)[query](https://mastra.ai/docs/reference/rag/graph-rag#query)[Parameters](https://mastra.ai/docs/reference/rag/graph-rag#parameters-1)[Returns](https://mastra.ai/docs/reference/rag/graph-rag#returns)[Advanced Example](https://mastra.ai/docs/reference/rag/graph-rag#advanced-example)[Related](https://mastra.ai/docs/reference/rag/graph-rag#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/graph-rag.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")GraphRAG

GraphRAG
========

The `GraphRAG` class implements a graph-based approach to retrieval augmented generation. It creates a knowledge graph from document chunks where nodes represent documents and edges represent semantic relationships, enabling both direct similarity matching and discovery of related content through graph traversal.

Basic Usage[](https://mastra.ai/docs/reference/rag/graph-rag#basic-usage)
-------------------------------------------------------------------------

```
import { GraphRAG } from "@mastra/rag";
 
const graphRag = new GraphRAG({
  dimension: 1536,
  threshold: 0.7
});
 
// Create the graph from chunks and embeddings
graphRag.createGraph(documentChunks, embeddings);
 
// Query the graph with embedding
const results = await graphRag.query({
  query: queryEmbedding,
  topK: 10,
  randomWalkSteps: 100,
  restartProb: 0.15
});
```

Constructor Parameters[](https://mastra.ai/docs/reference/rag/graph-rag#constructor-parameters)
-----------------------------------------------------------------------------------------------

### dimension?:

number

\= 1536

Dimension of the embedding vectors

### threshold?:

number

\= 0.7

Similarity threshold for creating edges between nodes (0-1)

Methods[](https://mastra.ai/docs/reference/rag/graph-rag#methods)
-----------------------------------------------------------------

### createGraph[](https://mastra.ai/docs/reference/rag/graph-rag#creategraph)

Creates a knowledge graph from document chunks and their embeddings.

```
createGraph(chunks: GraphChunk[], embeddings: GraphEmbedding[]): void
```

#### Parameters[](https://mastra.ai/docs/reference/rag/graph-rag#parameters)

### chunks:

GraphChunk\[\]

Array of document chunks with text and metadata

### embeddings:

GraphEmbedding\[\]

Array of embeddings corresponding to chunks

### query[](https://mastra.ai/docs/reference/rag/graph-rag#query)

Performs a graph-based search combining vector similarity and graph traversal.

```
query({
  query,
  topK = 10,
  randomWalkSteps = 100,
  restartProb = 0.15
}: {
  query: number[];
  topK?: number;
  randomWalkSteps?: number;
  restartProb?: number;
}): RankedNode[]
```

#### Parameters[](https://mastra.ai/docs/reference/rag/graph-rag#parameters-1)

### query:

number\[\]

Query embedding vector

### topK?:

number

\= 10

Number of results to return

### randomWalkSteps?:

number

\= 100

Number of steps in random walk

### restartProb?:

number

\= 0.15

Probability of restarting walk from query node

#### Returns[](https://mastra.ai/docs/reference/rag/graph-rag#returns)

Returns an array of `RankedNode` objects, where each node contains:

### id:

string

Unique identifier for the node

### content:

string

Text content of the document chunk

### metadata:

Record<string, any\>

Additional metadata associated with the chunk

### score:

number

Combined relevance score from graph traversal

Advanced Example[](https://mastra.ai/docs/reference/rag/graph-rag#advanced-example)
-----------------------------------------------------------------------------------

```
const graphRag = new GraphRAG({
  dimension: 1536,
  threshold: 0.8  // Stricter similarity threshold
});
 
// Create graph from chunks and embeddings
graphRag.createGraph(documentChunks, embeddings);
 
// Query with custom parameters
const results = await graphRag.query({
  query: queryEmbedding,
  topK: 5,
  randomWalkSteps: 200,
  restartProb: 0.2
});
```

Related[](https://mastra.ai/docs/reference/rag/graph-rag#related)
-----------------------------------------------------------------

*   [createGraphRAGTool](https://mastra.ai/docs/reference/tools/graph-rag-tool)

Last updated on February 25, 2025

[Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters "Metadata Filters")[AstraVector](https://mastra.ai/docs/reference/rag/astra "AstraVector")



================================================================================
Section 44: Content from https://mastra.ai/docs/reference/rag/astra
================================================================================

Title: Reference: Astra Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/astra

Markdown Content:
Reference: Astra Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Astra Vector Store](https://mastra.ai/docs/reference/rag/astra#)[Constructor Options](https://mastra.ai/docs/reference/rag/astra#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/astra#methods)[createIndex()](https://mastra.ai/docs/reference/rag/astra#createindex)[upsert()](https://mastra.ai/docs/reference/rag/astra#upsert)[query()](https://mastra.ai/docs/reference/rag/astra#query)[listIndexes()](https://mastra.ai/docs/reference/rag/astra#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/astra#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/astra#deleteindex)[Response Types](https://mastra.ai/docs/reference/rag/astra#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/astra#error-handling)[Environment Variables](https://mastra.ai/docs/reference/rag/astra#environment-variables)[Related](https://mastra.ai/docs/reference/rag/astra#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/astra.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")AstraVector

Astra Vector Store
==================

The AstraVector class provides vector search using [DataStax Astra DB](https://www.datastax.com/products/datastax-astra), a cloud-native, serverless database built on Apache Cassandra. It provides vector search capabilities with enterprise-grade scalability and high availability.

Constructor Options[](https://mastra.ai/docs/reference/rag/astra#constructor-options)
-------------------------------------------------------------------------------------

### token:

string

Astra DB API token

### endpoint:

string

Astra DB API endpoint

### keyspace?:

string

Optional keyspace name

Methods[](https://mastra.ai/docs/reference/rag/astra#methods)
-------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/astra#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search (maps to dot\_product for dotproduct)

### upsert()[](https://mastra.ai/docs/reference/rag/astra#upsert)

### indexName:

string

Name of the index to upsert into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/astra#query)

### indexName:

string

Name of the index to query

### queryVector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include vectors in the results

### listIndexes()[](https://mastra.ai/docs/reference/rag/astra#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/astra#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/astra#deleteindex)

### indexName:

string

Name of the index to delete

Response Types[](https://mastra.ai/docs/reference/rag/astra#response-types)
---------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/astra#error-handling)
---------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

Environment Variables[](https://mastra.ai/docs/reference/rag/astra#environment-variables)
-----------------------------------------------------------------------------------------

Required environment variables:

*   `ASTRA_DB_TOKEN`: Your Astra DB API token
*   `ASTRA_DB_ENDPOINT`: Your Astra DB API endpoint

### Related[](https://mastra.ai/docs/reference/rag/astra#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag "GraphRAG")[ChromaVector](https://mastra.ai/docs/reference/rag/chroma "ChromaVector")



================================================================================
Section 45: Content from https://mastra.ai/docs/reference/rag/chroma
================================================================================

Title: Reference: Chroma Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/chroma

Markdown Content:
Reference: Chroma Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Chroma Vector Store](https://mastra.ai/docs/reference/rag/chroma#)[Constructor Options](https://mastra.ai/docs/reference/rag/chroma#constructor-options)[auth](https://mastra.ai/docs/reference/rag/chroma#auth)[Methods](https://mastra.ai/docs/reference/rag/chroma#methods)[createIndex()](https://mastra.ai/docs/reference/rag/chroma#createindex)[upsert()](https://mastra.ai/docs/reference/rag/chroma#upsert)[query()](https://mastra.ai/docs/reference/rag/chroma#query)[listIndexes()](https://mastra.ai/docs/reference/rag/chroma#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/chroma#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/chroma#deleteindex)[Response Types](https://mastra.ai/docs/reference/rag/chroma#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/chroma#error-handling)[Related](https://mastra.ai/docs/reference/rag/chroma#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/chroma.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")ChromaVector

Chroma Vector Store
===================

The ChromaVector class provides vector search using [ChromaDB](https://www.trychroma.com/), an open-source embedding database. It offers efficient vector search with metadata filtering and hybrid search capabilities.

Constructor Options[](https://mastra.ai/docs/reference/rag/chroma#constructor-options)
--------------------------------------------------------------------------------------

### path:

string

URL path to ChromaDB instance

### auth?:

object

Authentication configuration

### auth[](https://mastra.ai/docs/reference/rag/chroma#auth)

### provider:

string

Authentication provider

### credentials:

string

Authentication credentials

Methods[](https://mastra.ai/docs/reference/rag/chroma#methods)
--------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/chroma#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### upsert()[](https://mastra.ai/docs/reference/rag/chroma#upsert)

### indexName:

string

Name of the index to upsert into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### documents?:

string\[\]

Chroma-specific: Original text documents associated with the vectors

### query()[](https://mastra.ai/docs/reference/rag/chroma#query)

### indexName:

string

Name of the index to query

### queryVector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include vectors in the results

### documentFilter?:

Record<string, any\>

Chroma-specific: Filter to apply on the document content

### listIndexes()[](https://mastra.ai/docs/reference/rag/chroma#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/chroma#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/chroma#deleteindex)

### indexName:

string

Name of the index to delete

Response Types[](https://mastra.ai/docs/reference/rag/chroma#response-types)
----------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  document?: string; // Chroma-specific: Original document if it was stored
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/chroma#error-handling)
----------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

### Related[](https://mastra.ai/docs/reference/rag/chroma#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[AstraVector](https://mastra.ai/docs/reference/rag/astra "AstraVector")[CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize "CloudflareVector")



================================================================================
Section 46: Content from https://mastra.ai/docs/reference/rag/vectorize
================================================================================

Title: Reference: Cloudflare Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/vectorize

Markdown Content:
Reference: Cloudflare Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Cloudflare Vector Store](https://mastra.ai/docs/reference/rag/vectorize#)[Constructor Options](https://mastra.ai/docs/reference/rag/vectorize#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/vectorize#methods)[createIndex()](https://mastra.ai/docs/reference/rag/vectorize#createindex)[upsert()](https://mastra.ai/docs/reference/rag/vectorize#upsert)[query()](https://mastra.ai/docs/reference/rag/vectorize#query)[listIndexes()](https://mastra.ai/docs/reference/rag/vectorize#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/vectorize#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/vectorize#deleteindex)[createMetadataIndex()](https://mastra.ai/docs/reference/rag/vectorize#createmetadataindex)[deleteMetadataIndex()](https://mastra.ai/docs/reference/rag/vectorize#deletemetadataindex)[listMetadataIndexes()](https://mastra.ai/docs/reference/rag/vectorize#listmetadataindexes)[Response Types](https://mastra.ai/docs/reference/rag/vectorize#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/vectorize#error-handling)[Environment Variables](https://mastra.ai/docs/reference/rag/vectorize#environment-variables)[Related](https://mastra.ai/docs/reference/rag/vectorize#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/vectorize.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")CloudflareVector

Cloudflare Vector Store
=======================

The CloudflareVector class provides vector search using [Cloudflare Vectorize](https://developers.cloudflare.com/vectorize/), a vector database service integrated with Cloudflare’s edge network.

Constructor Options[](https://mastra.ai/docs/reference/rag/vectorize#constructor-options)
-----------------------------------------------------------------------------------------

### accountId:

string

Cloudflare account ID

### apiToken:

string

Cloudflare API token with Vectorize permissions

Methods[](https://mastra.ai/docs/reference/rag/vectorize#methods)
-----------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/vectorize#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search (dotproduct maps to dot-product)

### upsert()[](https://mastra.ai/docs/reference/rag/vectorize#upsert)

### indexName:

string

Name of the index to upsert into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/vectorize#query)

### indexName:

string

Name of the index to query

### queryVector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include vectors in the results

### listIndexes()[](https://mastra.ai/docs/reference/rag/vectorize#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/vectorize#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/vectorize#deleteindex)

### indexName:

string

Name of the index to delete

### createMetadataIndex()[](https://mastra.ai/docs/reference/rag/vectorize#createmetadataindex)

Creates an index on a metadata field to enable filtering.

### indexName:

string

Name of the index containing the metadata field

### propertyName:

string

Name of the metadata field to index

### indexType:

'string' | 'number' | 'boolean'

Type of the metadata field

### deleteMetadataIndex()[](https://mastra.ai/docs/reference/rag/vectorize#deletemetadataindex)

Removes an index from a metadata field.

### indexName:

string

Name of the index containing the metadata field

### propertyName:

string

Name of the metadata field to remove indexing from

### listMetadataIndexes()[](https://mastra.ai/docs/reference/rag/vectorize#listmetadataindexes)

Lists all metadata field indexes for an index.

### indexName:

string

Name of the index to list metadata indexes for

Response Types[](https://mastra.ai/docs/reference/rag/vectorize#response-types)
-------------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[];
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/vectorize#error-handling)
-------------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

Environment Variables[](https://mastra.ai/docs/reference/rag/vectorize#environment-variables)
---------------------------------------------------------------------------------------------

Required environment variables:

*   `CLOUDFLARE_ACCOUNT_ID`: Your Cloudflare account ID
*   `CLOUDFLARE_API_TOKEN`: Your Cloudflare API token with Vectorize permissions

### Related[](https://mastra.ai/docs/reference/rag/vectorize#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[ChromaVector](https://mastra.ai/docs/reference/rag/chroma "ChromaVector")[PgVector](https://mastra.ai/docs/reference/rag/pg "PgVector")



================================================================================
Section 47: Content from https://mastra.ai/docs/reference/rag/pg
================================================================================

Title: Reference: PG Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/pg

Markdown Content:
Reference: PG Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[PG Vector Store](https://mastra.ai/docs/reference/rag/pg#)[Constructor Options](https://mastra.ai/docs/reference/rag/pg#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/pg#methods)[createIndex()](https://mastra.ai/docs/reference/rag/pg#createindex)[IndexConfig](https://mastra.ai/docs/reference/rag/pg#indexconfig)[Memory Requirements](https://mastra.ai/docs/reference/rag/pg#memory-requirements)[upsert()](https://mastra.ai/docs/reference/rag/pg#upsert)[query()](https://mastra.ai/docs/reference/rag/pg#query)[listIndexes()](https://mastra.ai/docs/reference/rag/pg#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/pg#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/pg#deleteindex)[disconnect()](https://mastra.ai/docs/reference/rag/pg#disconnect)[buildIndex()](https://mastra.ai/docs/reference/rag/pg#buildindex)[Response Types](https://mastra.ai/docs/reference/rag/pg#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/pg#error-handling)[Best Practices](https://mastra.ai/docs/reference/rag/pg#best-practices)[Related](https://mastra.ai/docs/reference/rag/pg#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/pg.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")PgVector

PG Vector Store
===============

The PgVector class provides vector search using [PostgreSQL](https://www.postgresql.org/) with [pgvector](https://github.com/pgvector/pgvector) extension. It provides robust vector similarity search capabilities within your existing PostgreSQL database.

Constructor Options[](https://mastra.ai/docs/reference/rag/pg#constructor-options)
----------------------------------------------------------------------------------

### connectionString:

string

PostgreSQL connection URL

Methods[](https://mastra.ai/docs/reference/rag/pg#methods)
----------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/pg#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### indexConfig?:

IndexConfig

\= { type: 'ivfflat' }

Index configuration

### buildIndex?:

boolean

\= true

Whether to build the index

#### IndexConfig[](https://mastra.ai/docs/reference/rag/pg#indexconfig)

### type:

'flat' | 'hnsw' | 'ivfflat'

\= ivfflat

Index type

string

### flat:

flat

Sequential scan (no index) that performs exhaustive search.

### ivfflat:

ivfflat

Clusters vectors into lists for approximate search.

### hnsw:

hnsw

Graph-based index offering fast search times and high recall.

### ivf?:

IVFConfig

IVF configuration

object

### lists?:

number

Number of lists. If not specified, automatically calculated based on dataset size. (Minimum 100, Maximum 4000)

### hnsw?:

HNSWConfig

HNSW configuration

object

### m?:

number

Maximum number of connections per node (default: 8)

### efConstruction?:

number

Build-time complexity (default: 32)

#### Memory Requirements[](https://mastra.ai/docs/reference/rag/pg#memory-requirements)

HNSW indexes require significant shared memory during construction. For 100K vectors:

*   Small dimensions (64d): ~60MB with default settings
*   Medium dimensions (256d): ~180MB with default settings
*   Large dimensions (384d+): ~250MB+ with default settings

Higher M values or efConstruction values will increase memory requirements significantly. Adjust your system’s shared memory limits if needed.

### upsert()[](https://mastra.ai/docs/reference/rag/pg#upsert)

### indexName:

string

Name of the index to upsert vectors into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/pg#query)

### indexName:

string

Name of the index to query

### vector:

number\[\]

Query vector

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters

### includeVector?:

boolean

\= false

Whether to include the vector in the result

### minScore?:

number

\= 0

Minimum similarity score threshold

### options?:

{ ef?: number; probes?: number }

Additional options for HNSW and IVF indexes

object

### ef?:

number

HNSW search parameter

### probes?:

number

IVF search parameter

### listIndexes()[](https://mastra.ai/docs/reference/rag/pg#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/pg#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface PGIndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
  type: "flat" | "hnsw" | "ivfflat";
  config: {
    m?: number;
    efConstruction?: number;
    lists?: number;
    probes?: number;
  };
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/pg#deleteindex)

### indexName:

string

Name of the index to delete

### disconnect()[](https://mastra.ai/docs/reference/rag/pg#disconnect)

Closes the database connection pool. Should be called when done using the store.

### buildIndex()[](https://mastra.ai/docs/reference/rag/pg#buildindex)

### indexName:

string

Name of the index to define

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### indexConfig:

IndexConfig

Configuration for the index type and parameters

Builds or rebuilds an index with specified metric and configuration. Will drop any existing index before creating the new one.

```
// Define HNSW index
await pgVector.buildIndex("my_vectors", "cosine", {
  type: "hnsw",
  hnsw: {
    m: 8,
    efConstruction: 32
  }
});
 
// Define IVF index
await pgVector.buildIndex("my_vectors", "cosine", {
  type: "ivfflat",
  ivf: {
    lists: 100, 
  }
});
 
// Define flat index
await pgVector.buildIndex("my_vectors", "cosine", {
  type: "flat" 
});
```

Response Types[](https://mastra.ai/docs/reference/rag/pg#response-types)
------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/pg#error-handling)
------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

Best Practices[](https://mastra.ai/docs/reference/rag/pg#best-practices)
------------------------------------------------------------------------

*   Regularly evaluate your index configuration to ensure optimal performance.
*   Adjust parameters like `lists` and `m` based on dataset size and query requirements.
*   Rebuild indexes periodically to maintain efficiency, especially after significant data changes.

### Related[](https://mastra.ai/docs/reference/rag/pg#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize "CloudflareVector")[LibSQLVector](https://mastra.ai/docs/reference/rag/libsql "LibSQLVector")



================================================================================
Section 48: Content from https://mastra.ai/docs/reference/rag/libsql
================================================================================

Title: Default Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/libsql

Markdown Content:
Default Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[LibSQLVector Store](https://mastra.ai/docs/reference/rag/libsql#)[Installation](https://mastra.ai/docs/reference/rag/libsql#installation)[Usage](https://mastra.ai/docs/reference/rag/libsql#usage)[Constructor Options](https://mastra.ai/docs/reference/rag/libsql#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/libsql#methods)[createIndex()](https://mastra.ai/docs/reference/rag/libsql#createindex)[upsert()](https://mastra.ai/docs/reference/rag/libsql#upsert)[query()](https://mastra.ai/docs/reference/rag/libsql#query)[describeIndex()](https://mastra.ai/docs/reference/rag/libsql#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/libsql#deleteindex)[listIndexes()](https://mastra.ai/docs/reference/rag/libsql#listindexes)[truncateIndex()](https://mastra.ai/docs/reference/rag/libsql#truncateindex)[Response Types](https://mastra.ai/docs/reference/rag/libsql#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/libsql#error-handling)[Related](https://mastra.ai/docs/reference/rag/libsql#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/libsql.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")LibSQLVector

LibSQLVector Store
==================

The LibSQL storage implementation provides a SQLite-compatible vector search [LibSQL](https://github.com/tursodatabase/libsql), a fork of SQLite with vector extensions, and [Turso](https://turso.tech/) with vector extensions, offering a lightweight and efficient vector database solution. It’s part of the `@mastra/core` package and offers efficient vector similarity search with metadata filtering.

Installation[](https://mastra.ai/docs/reference/rag/libsql#installation)
------------------------------------------------------------------------

Default vector store is included in the core package:

```
npm install @mastra/core
```

Usage[](https://mastra.ai/docs/reference/rag/libsql#usage)
----------------------------------------------------------

```
import { LibSQLVector } from "@mastra/core/vector/libsql";
 
// Create a new vector store instance
const store = new LibSQLVector({
  connectionUrl: process.env.DATABASE_URL,
  // Optional: for Turso cloud databases
  authToken: process.env.DATABASE_AUTH_TOKEN,
});
 
// Create an index
await store.createIndex("my-collection", 1536);
 
// Add vectors with metadata
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [
  { text: "first document", category: "A" },
  { text: "second document", category: "B" }
];
await store.upsert("my-collection", vectors, metadata);
 
// Query similar vectors
const queryVector = [0.1, 0.2, ...];
const results = await store.query(
  "my-collection",
  queryVector,
  10, // top K results
  { category: "A" } // optional metadata filter
);
```

Constructor Options[](https://mastra.ai/docs/reference/rag/libsql#constructor-options)
--------------------------------------------------------------------------------------

### connectionUrl:

string

LibSQL database URL. Use ':memory:' for in-memory database, 'file:local.db' for local file, or a LibSQL-compatible connection string like 'libsql://your-database.turso.io'.

### authToken?:

string

Authentication token for Turso cloud databases

### syncUrl?:

string

URL for database replication (Turso specific)

### syncInterval?:

number

Interval in milliseconds for database sync (Turso specific)

Methods[](https://mastra.ai/docs/reference/rag/libsql#methods)
--------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/libsql#createindex)

Creates a new vector collection. The index name must start with a letter or underscore and can only contain letters, numbers, and underscores. The dimension must be a positive integer.

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension size (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search. Note: Currently only cosine similarity is supported by LibSQL.

### upsert()[](https://mastra.ai/docs/reference/rag/libsql#upsert)

Adds or updates vectors and their metadata in the index. Uses a transaction to ensure all vectors are inserted atomically - if any insert fails, the entire operation is rolled back.

### indexName:

string

Name of the index to insert into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/libsql#query)

Searches for similar vectors with optional metadata filtering.

### indexName:

string

Name of the index to search in

### queryVector:

number\[\]

Query vector to find similar vectors for

### topK?:

number

\= 10

Number of results to return

### filter?:

Filter

Metadata filters

### includeVector?:

boolean

\= false

Whether to include vector data in results

### minScore?:

number

\= 0

Minimum similarity score threshold

### describeIndex()[](https://mastra.ai/docs/reference/rag/libsql#describeindex)

Gets information about an index.

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/libsql#deleteindex)

Deletes an index and all its data.

### indexName:

string

Name of the index to delete

### listIndexes()[](https://mastra.ai/docs/reference/rag/libsql#listindexes)

Lists all vector indexes in the database.

Returns: `Promise<string[]>`

### truncateIndex()[](https://mastra.ai/docs/reference/rag/libsql#truncateindex)

Removes all vectors from an index while keeping the index structure.

### indexName:

string

Name of the index to truncate

Response Types[](https://mastra.ai/docs/reference/rag/libsql#response-types)
----------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/libsql#error-handling)
----------------------------------------------------------------------------

The store throws specific errors for different failure cases:

```
try {
  await store.query("my-collection", queryVector);
} catch (error) {
  // Handle specific error cases
  if (error.message.includes("Invalid index name format")) {
    console.error(
      "Index name must start with a letter/underscore and contain only alphanumeric characters",
    );
  } else if (error.message.includes("Table not found")) {
    console.error("The specified index does not exist");
  } else {
    console.error("Vector store error:", error.message);
  }
}
```

Common error cases include:

*   Invalid index name format
*   Invalid vector dimensions
*   Table/index not found
*   Database connection issues
*   Transaction failures during upsert

### Related[](https://mastra.ai/docs/reference/rag/libsql#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 25, 2025

[PgVector](https://mastra.ai/docs/reference/rag/pg "PgVector")[PineconeVector](https://mastra.ai/docs/reference/rag/pinecone "PineconeVector")



================================================================================
Section 49: Content from https://mastra.ai/docs/reference/rag/pinecone
================================================================================

Title: Reference: Pinecone Vector Store | Vector DBs | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/pinecone

Markdown Content:
Reference: Pinecone Vector Store | Vector DBs | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Pinecone Vector Store](https://mastra.ai/docs/reference/rag/pinecone#)[Constructor Options](https://mastra.ai/docs/reference/rag/pinecone#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/pinecone#methods)[createIndex()](https://mastra.ai/docs/reference/rag/pinecone#createindex)[upsert()](https://mastra.ai/docs/reference/rag/pinecone#upsert)[query()](https://mastra.ai/docs/reference/rag/pinecone#query)[listIndexes()](https://mastra.ai/docs/reference/rag/pinecone#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/pinecone#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/pinecone#deleteindex)[Response Types](https://mastra.ai/docs/reference/rag/pinecone#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/pinecone#error-handling)[Environment Variables](https://mastra.ai/docs/reference/rag/pinecone#environment-variables)[Related](https://mastra.ai/docs/reference/rag/pinecone#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/pinecone.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")PineconeVector

Pinecone Vector Store
=====================

The PineconeVector class provides an interface to [Pinecone](https://www.pinecone.io/)’s vector database. It provides real-time vector search, with features like hybrid search, metadata filtering, and namespace management.

Constructor Options[](https://mastra.ai/docs/reference/rag/pinecone#constructor-options)
----------------------------------------------------------------------------------------

### apiKey:

string

Pinecone API key

### environment:

string

Pinecone environment (e.g., "us-west1-gcp")

Methods[](https://mastra.ai/docs/reference/rag/pinecone#methods)
----------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/pinecone#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### upsert()[](https://mastra.ai/docs/reference/rag/pinecone#upsert)

### indexName:

string

Name of your Pinecone index

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/pinecone#query)

### indexName:

string

Name of the index to query

### vector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include the vector in the result

### listIndexes()[](https://mastra.ai/docs/reference/rag/pinecone#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/pinecone#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/pinecone#deleteindex)

### indexName:

string

Name of the index to delete

Response Types[](https://mastra.ai/docs/reference/rag/pinecone#response-types)
------------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/pinecone#error-handling)
------------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

### Environment Variables[](https://mastra.ai/docs/reference/rag/pinecone#environment-variables)

Required environment variables:

*   `PINECONE_API_KEY`: Your Pinecone API key
*   `PINECONE_ENVIRONMENT`: Pinecone environment (e.g., ‘us-west1-gcp’)

### Related[](https://mastra.ai/docs/reference/rag/pinecone#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[LibSQLVector](https://mastra.ai/docs/reference/rag/libsql "LibSQLVector")[QdrantVector](https://mastra.ai/docs/reference/rag/qdrant "QdrantVector")



================================================================================
Section 50: Content from https://mastra.ai/docs/reference/rag/qdrant
================================================================================

Title: Reference: Qdrant Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/qdrant

Markdown Content:
Reference: Qdrant Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Qdrant Vector Store](https://mastra.ai/docs/reference/rag/qdrant#)[Constructor Options](https://mastra.ai/docs/reference/rag/qdrant#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/qdrant#methods)[createIndex()](https://mastra.ai/docs/reference/rag/qdrant#createindex)[upsert()](https://mastra.ai/docs/reference/rag/qdrant#upsert)[query()](https://mastra.ai/docs/reference/rag/qdrant#query)[listIndexes()](https://mastra.ai/docs/reference/rag/qdrant#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/qdrant#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/qdrant#deleteindex)[Response Types](https://mastra.ai/docs/reference/rag/qdrant#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/qdrant#error-handling)[Related](https://mastra.ai/docs/reference/rag/qdrant#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/qdrant.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")QdrantVector

Qdrant Vector Store
===================

The QdrantVector class provides vector search using [Qdrant](https://qdrant.tech/), a vector similarity search engine. It provides a production-ready service with a convenient API to store, search, and manage vectors with additional payload and extended filtering support.

Constructor Options[](https://mastra.ai/docs/reference/rag/qdrant#constructor-options)
--------------------------------------------------------------------------------------

### url:

string

REST URL of the Qdrant instance. Eg. https://xyz-example.eu-central.aws.cloud.qdrant.io:6333

### apiKey:

string

Optional Qdrant API key

### https:

boolean

Whether to use TLS when setting up the connection. Recommended.

Methods[](https://mastra.ai/docs/reference/rag/qdrant#methods)
--------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/qdrant#createindex)

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### upsert()[](https://mastra.ai/docs/reference/rag/qdrant#upsert)

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/qdrant#query)

### indexName:

string

Name of the index to query

### queryVector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include vectors in the results

### listIndexes()[](https://mastra.ai/docs/reference/rag/qdrant#listindexes)

Returns an array of index names as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/qdrant#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/qdrant#deleteindex)

### indexName:

string

Name of the index to delete

Response Types[](https://mastra.ai/docs/reference/rag/qdrant#response-types)
----------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/qdrant#error-handling)
----------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

### Related[](https://mastra.ai/docs/reference/rag/qdrant#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[PineconeVector](https://mastra.ai/docs/reference/rag/pinecone "PineconeVector")[UpstashVector](https://mastra.ai/docs/reference/rag/upstash "UpstashVector")



================================================================================
Section 51: Content from https://mastra.ai/docs/reference/rag/upstash
================================================================================

Title: Reference: Upstash Vector Store | Vector Databases | RAG | Mastra Docs

URL Source: https://mastra.ai/docs/reference/rag/upstash

Markdown Content:
Reference: Upstash Vector Store | Vector Databases | RAG | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Upstash Vector Store](https://mastra.ai/docs/reference/rag/upstash#)[Constructor Options](https://mastra.ai/docs/reference/rag/upstash#constructor-options)[Methods](https://mastra.ai/docs/reference/rag/upstash#methods)[createIndex()](https://mastra.ai/docs/reference/rag/upstash#createindex)[upsert()](https://mastra.ai/docs/reference/rag/upstash#upsert)[query()](https://mastra.ai/docs/reference/rag/upstash#query)[listIndexes()](https://mastra.ai/docs/reference/rag/upstash#listindexes)[describeIndex()](https://mastra.ai/docs/reference/rag/upstash#describeindex)[deleteIndex()](https://mastra.ai/docs/reference/rag/upstash#deleteindex)[Response Types](https://mastra.ai/docs/reference/rag/upstash#response-types)[Error Handling](https://mastra.ai/docs/reference/rag/upstash#error-handling)[Environment Variables](https://mastra.ai/docs/reference/rag/upstash#environment-variables)[Related](https://mastra.ai/docs/reference/rag/upstash#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/rag/upstash.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[RAG](https://mastra.ai/docs/reference/rag/chunk "RAG")UpstashVector

Upstash Vector Store
====================

The UpstashVector class provides vector search using [Upstash Vector](https://upstash.com/vector), a serverless vector database service that provides vector similarity search with metadata filtering capabilities.

Constructor Options[](https://mastra.ai/docs/reference/rag/upstash#constructor-options)
---------------------------------------------------------------------------------------

### url:

string

Upstash Vector database URL

### token:

string

Upstash Vector API token

Methods[](https://mastra.ai/docs/reference/rag/upstash#methods)
---------------------------------------------------------------

### createIndex()[](https://mastra.ai/docs/reference/rag/upstash#createindex)

Note: This method is a no-op for Upstash as indexes are created automatically.

### indexName:

string

Name of the index to create

### dimension:

number

Vector dimension (must match your embedding model)

### metric?:

'cosine' | 'euclidean' | 'dotproduct'

\= cosine

Distance metric for similarity search

### upsert()[](https://mastra.ai/docs/reference/rag/upstash#upsert)

### indexName:

string

Name of the index to upsert into

### vectors:

number\[\]\[\]

Array of embedding vectors

### metadata?:

Record<string, any\>\[\]

Metadata for each vector

### ids?:

string\[\]

Optional vector IDs (auto-generated if not provided)

### query()[](https://mastra.ai/docs/reference/rag/upstash#query)

### indexName:

string

Name of the index to query

### queryVector:

number\[\]

Query vector to find similar vectors

### topK?:

number

\= 10

Number of results to return

### filter?:

Record<string, any\>

Metadata filters for the query

### includeVector?:

boolean

\= false

Whether to include vectors in the results

### listIndexes()[](https://mastra.ai/docs/reference/rag/upstash#listindexes)

Returns an array of index names (namespaces) as strings.

### describeIndex()[](https://mastra.ai/docs/reference/rag/upstash#describeindex)

### indexName:

string

Name of the index to describe

Returns:

```
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}
```

### deleteIndex()[](https://mastra.ai/docs/reference/rag/upstash#deleteindex)

### indexName:

string

Name of the index (namespace) to delete

Response Types[](https://mastra.ai/docs/reference/rag/upstash#response-types)
-----------------------------------------------------------------------------

Query results are returned in this format:

```
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}
```

Error Handling[](https://mastra.ai/docs/reference/rag/upstash#error-handling)
-----------------------------------------------------------------------------

The store throws typed errors that can be caught:

```
try {
  await store.query("index_name", queryVector);
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}
```

Environment Variables[](https://mastra.ai/docs/reference/rag/upstash#environment-variables)
-------------------------------------------------------------------------------------------

Required environment variables:

*   `UPSTASH_VECTOR_URL`: Your Upstash Vector database URL
*   `UPSTASH_VECTOR_TOKEN`: Your Upstash Vector API token

### Related[](https://mastra.ai/docs/reference/rag/upstash#related)

*   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)

Last updated on February 26, 2025

[QdrantVector](https://mastra.ai/docs/reference/rag/qdrant "QdrantVector")[createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool "createDocumentChunkerTool()")



================================================================================
Section 52: Content from https://mastra.ai/docs/reference/tools/document-chunker-tool
================================================================================

Title: Reference: createDocumentChunkerTool() | Tools | Mastra Docs

URL Source: https://mastra.ai/docs/reference/tools/document-chunker-tool

Markdown Content:
Reference: createDocumentChunkerTool() | Tools | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool#)[Basic Usage](https://mastra.ai/docs/reference/tools/document-chunker-tool#basic-usage)[Parameters](https://mastra.ai/docs/reference/tools/document-chunker-tool#parameters)[ChunkParams](https://mastra.ai/docs/reference/tools/document-chunker-tool#chunkparams)[Returns](https://mastra.ai/docs/reference/tools/document-chunker-tool#returns)[Example with Custom Parameters](https://mastra.ai/docs/reference/tools/document-chunker-tool#example-with-custom-parameters)[Tool Details](https://mastra.ai/docs/reference/tools/document-chunker-tool#tool-details)[Related](https://mastra.ai/docs/reference/tools/document-chunker-tool#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/tools/document-chunker-tool.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")ToolscreateDocumentChunkerTool()

createDocumentChunkerTool()
===========================

The `createDocumentChunkerTool()` function creates a tool for splitting documents into smaller chunks for efficient processing and retrieval. It supports different chunking strategies and configurable parameters.

Basic Usage[](https://mastra.ai/docs/reference/tools/document-chunker-tool#basic-usage)
---------------------------------------------------------------------------------------

```
import { createDocumentChunkerTool, MDocument } from "@mastra/rag";
 
const document = new MDocument({
  text: "Your document content here...",
  metadata: { source: "user-manual" }
});
 
const chunker = createDocumentChunkerTool({
  doc: document,
  params: {
    strategy: "recursive",
    size: 512,
    overlap: 50,
    separator: "\n"
  }
});
 
const { chunks } = await chunker.execute();
```

Parameters[](https://mastra.ai/docs/reference/tools/document-chunker-tool#parameters)
-------------------------------------------------------------------------------------

### doc:

MDocument

The document to be chunked

### params?:

ChunkParams

\= Default chunking parameters

Configuration parameters for chunking

### ChunkParams[](https://mastra.ai/docs/reference/tools/document-chunker-tool#chunkparams)

### strategy?:

'recursive'

\= 'recursive'

The chunking strategy to use

### size?:

number

\= 512

Target size of each chunk in tokens/characters

### overlap?:

number

\= 50

Number of overlapping tokens/characters between chunks

### separator?:

string

\= '\\n'

Character(s) to use as chunk separator

Returns[](https://mastra.ai/docs/reference/tools/document-chunker-tool#returns)
-------------------------------------------------------------------------------

### chunks:

DocumentChunk\[\]

Array of document chunks with their content and metadata

Example with Custom Parameters[](https://mastra.ai/docs/reference/tools/document-chunker-tool#example-with-custom-parameters)
-----------------------------------------------------------------------------------------------------------------------------

```
const technicalDoc = new MDocument({
  text: longDocumentContent,
  metadata: {
    type: "technical",
    version: "1.0"
  }
});
 
const chunker = createDocumentChunkerTool({
  doc: technicalDoc,
  params: {
    strategy: "recursive",
    size: 1024,      // Larger chunks
    overlap: 100,    // More overlap
    separator: "\n\n" // Split on double newlines
  }
});
 
const { chunks } = await chunker.execute();
 
// Process the chunks
chunks.forEach((chunk, index) => {
  console.log(`Chunk ${index + 1} length: ${chunk.content.length}`);
});
```

Tool Details[](https://mastra.ai/docs/reference/tools/document-chunker-tool#tool-details)
-----------------------------------------------------------------------------------------

The chunker is created as a Mastra tool with the following properties:

*   **Tool ID**: `Document Chunker {strategy} {size}`
*   **Description**: `Chunks document using {strategy} strategy with size {size} and {overlap} overlap`
*   **Input Schema**: Empty object (no additional inputs required)
*   **Output Schema**: Object containing the chunks array

Related[](https://mastra.ai/docs/reference/tools/document-chunker-tool#related)
-------------------------------------------------------------------------------

*   [MDocument](https://mastra.ai/docs/reference/rag/document)
*   [createVectorQueryTool](https://mastra.ai/docs/reference/tools/vector-query-tool)

Last updated on February 25, 2025

[UpstashVector](https://mastra.ai/docs/reference/rag/upstash "UpstashVector")[createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool "createGraphRAGTool()")



================================================================================
Section 53: Content from https://mastra.ai/docs/reference/tools/graph-rag-tool
================================================================================

Title: Reference: createGraphRAGTool() | RAG | Mastra Tools Docs

URL Source: https://mastra.ai/docs/reference/tools/graph-rag-tool

Markdown Content:
Reference: createGraphRAGTool() | RAG | Mastra Tools Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool#)[Usage Example](https://mastra.ai/docs/reference/tools/graph-rag-tool#usage-example)[Parameters](https://mastra.ai/docs/reference/tools/graph-rag-tool#parameters)[GraphOptions](https://mastra.ai/docs/reference/tools/graph-rag-tool#graphoptions)[Returns](https://mastra.ai/docs/reference/tools/graph-rag-tool#returns)[Advanced Example](https://mastra.ai/docs/reference/tools/graph-rag-tool#advanced-example)[Related](https://mastra.ai/docs/reference/tools/graph-rag-tool#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/tools/graph-rag-tool.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Tools](https://mastra.ai/docs/reference/tools/document-chunker-tool "Tools")createGraphRAGTool()

createGraphRAGTool()
====================

The `createGraphRAGTool()` creates a tool that enhances RAG by building a graph of semantic relationships between documents. It uses the `GraphRAG` system under the hood to provide graph-based retrieval, finding relevant content through both direct similarity and connected relationships.

Usage Example[](https://mastra.ai/docs/reference/tools/graph-rag-tool#usage-example)
------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { createGraphRAGTool } from "@mastra/rag";
 
const graphTool = createGraphRAGTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  graphOptions: {
    dimension: 1536,
    threshold: 0.7,
    randomWalkSteps: 100,
    restartProb: 0.15
  }
});
```

Parameters[](https://mastra.ai/docs/reference/tools/graph-rag-tool#parameters)
------------------------------------------------------------------------------

### vectorStoreName:

string

Name of the vector store to query

### indexName:

string

Name of the index within the vector store

### model:

EmbeddingModel

Embedding model to use for vector search

### graphOptions?:

GraphOptions

\= Default graph options

Configuration for the graph-based retrieval

### GraphOptions[](https://mastra.ai/docs/reference/tools/graph-rag-tool#graphoptions)

### dimension?:

number

\= 1536

Dimension of the embedding vectors

### threshold?:

number

\= 0.7

Similarity threshold for creating edges between nodes (0-1)

### randomWalkSteps?:

number

\= 100

Number of steps in random walk for graph traversal

### restartProb?:

number

\= 0.15

Probability of restarting random walk from query node

Returns[](https://mastra.ai/docs/reference/tools/graph-rag-tool#returns)
------------------------------------------------------------------------

The tool returns an object with:

### relevantContext:

string

Combined text from the most relevant document chunks, retrieved using graph-based ranking

Advanced Example[](https://mastra.ai/docs/reference/tools/graph-rag-tool#advanced-example)
------------------------------------------------------------------------------------------

```
const graphTool = createGraphRAGTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  graphOptions: {
    dimension: 1536,
    threshold: 0.8,        // Higher similarity threshold
    randomWalkSteps: 200,  // More exploration steps
    restartProb: 0.2      // Higher restart probability
  }
});
```

Related[](https://mastra.ai/docs/reference/tools/graph-rag-tool#related)
------------------------------------------------------------------------

*   [createVectorQueryTool](https://mastra.ai/docs/reference/tools/vector-query-tool)
*   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)

Last updated on February 25, 2025

[createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool "createDocumentChunkerTool()")[createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool "createVectorQueryTool()")



================================================================================
Section 54: Content from https://mastra.ai/docs/reference/tools/vector-query-tool
================================================================================

Title: Reference: createVectorQueryTool() | RAG | Mastra Tools Docs

URL Source: https://mastra.ai/docs/reference/tools/vector-query-tool

Markdown Content:
Reference: createVectorQueryTool() | RAG | Mastra Tools Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool#)[Basic Usage](https://mastra.ai/docs/reference/tools/vector-query-tool#basic-usage)[Parameters](https://mastra.ai/docs/reference/tools/vector-query-tool#parameters)[RerankConfig](https://mastra.ai/docs/reference/tools/vector-query-tool#rerankconfig)[Returns](https://mastra.ai/docs/reference/tools/vector-query-tool#returns)[Default Tool Description](https://mastra.ai/docs/reference/tools/vector-query-tool#default-tool-description)[Result Handling](https://mastra.ai/docs/reference/tools/vector-query-tool#result-handling)[Example with Filters](https://mastra.ai/docs/reference/tools/vector-query-tool#example-with-filters)[Example with Reranking](https://mastra.ai/docs/reference/tools/vector-query-tool#example-with-reranking)[Tool Details](https://mastra.ai/docs/reference/tools/vector-query-tool#tool-details)[Related](https://mastra.ai/docs/reference/tools/vector-query-tool#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/tools/vector-query-tool.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Tools](https://mastra.ai/docs/reference/tools/document-chunker-tool "Tools")createVectorQueryTool()

createVectorQueryTool()
=======================

The `createVectorQueryTool()` function creates a tool for semantic search over vector stores. It supports filtering, reranking, and integrates with various vector store backends.

Basic Usage[](https://mastra.ai/docs/reference/tools/vector-query-tool#basic-usage)
-----------------------------------------------------------------------------------

```
import { openai } from '@ai-sdk/openai';
import { createVectorQueryTool } from "@mastra/rag";
 
const queryTool = createVectorQueryTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
});
```

Parameters[](https://mastra.ai/docs/reference/tools/vector-query-tool#parameters)
---------------------------------------------------------------------------------

### vectorStoreName:

string

Name of the vector store to query (must be configured in Mastra)

### indexName:

string

Name of the index within the vector store

### model:

EmbeddingModel

Embedding model to use for vector search

### reranker?:

RerankConfig

Options for reranking results

### id?:

string

Custom ID for the tool (defaults to 'VectorQuery {vectorStoreName} {indexName} Tool')

### description?:

string

Custom description for the tool (by default, provides instructions for querying the vector store with examples of filtering and reranking if enabled)

### RerankConfig[](https://mastra.ai/docs/reference/tools/vector-query-tool#rerankconfig)

### model:

LanguageModelV1

Language model to use for reranking

### options?:

RerankerOptions

Options for the reranking process

object

### weights?:

WeightConfig

Weights for scoring components (semantic: 0.4, vector: 0.4, position: 0.2)

### topK?:

number

Number of top results to return

Returns[](https://mastra.ai/docs/reference/tools/vector-query-tool#returns)
---------------------------------------------------------------------------

The tool returns an object with:

### relevantContext:

string

Combined text from the most relevant document chunks

Default Tool Description[](https://mastra.ai/docs/reference/tools/vector-query-tool#default-tool-description)
-------------------------------------------------------------------------------------------------------------

The default tool description provides:

*   Instructions for querying the specified vector store
*   Examples of filter syntax when filtering is enabled

Result Handling[](https://mastra.ai/docs/reference/tools/vector-query-tool#result-handling)
-------------------------------------------------------------------------------------------

The tool determines the number of results to return based on the user’s query, with a default of 10 results. This can be adjusted based on the query requirements.

Example with Filters[](https://mastra.ai/docs/reference/tools/vector-query-tool#example-with-filters)
-----------------------------------------------------------------------------------------------------

```
const queryTool = createVectorQueryTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  enableFilters: true,
});
```

With filtering enabled, the tool processes queries to construct metadata filters that combine with semantic search. The process works as follows:

1.  A user makes a query with specific filter requirements like “Find content where the ‘version’ field is greater than 2.0”
2.  The agent analyzes the query and constructs the appropriate filters:
    
    ```
    {
       "version": { "$gt": 2.0 }
    }
    ```
    

This agent-driven approach:

*   Processes natural language queries into filter specifications
*   Implements vector store-specific filter syntax
*   Translates query terms to filter operators

For detailed filter syntax and store-specific capabilities, see the [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters) documentation.

For an example of how agent-driven filtering works, see the [Agent-Driven Metadata Filtering](https://mastra.ai/examples/rag/filter-rag) example.

Example with Reranking[](https://mastra.ai/docs/reference/tools/vector-query-tool#example-with-reranking)
---------------------------------------------------------------------------------------------------------

```
const queryTool = createVectorQueryTool({
  vectorStoreName: "milvus",
  indexName: "documentation",
  model: openai.embedding('text-embedding-3-small'),
  reranker: {
    model: openai('gpt-4o-mini'),
    options: {
      weights: {
        semantic: 0.5,  // Semantic relevance weight
        vector: 0.3,    // Vector similarity weight
        position: 0.2   // Original position weight
      },
      topK: 5
    }
  }
});
```

Reranking improves result quality by combining:

*   Semantic relevance: Using LLM-based scoring of text similarity
*   Vector similarity: Original vector distance scores
*   Position bias: Consideration of original result ordering
*   Query analysis: Adjustments based on query characteristics

The reranker processes the initial vector search results and returns a reordered list optimized for relevance.

Tool Details[](https://mastra.ai/docs/reference/tools/vector-query-tool#tool-details)
-------------------------------------------------------------------------------------

The tool is created with:

*   **ID**: `VectorQuery {vectorStoreName} {indexName} Tool`
*   **Input Schema**: Requires queryText and filter objects
*   **Output Schema**: Returns relevantContext string

Related[](https://mastra.ai/docs/reference/tools/vector-query-tool#related)
---------------------------------------------------------------------------

*   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
*   [createGraphRAGTool](https://mastra.ai/docs/reference/tools/graph-rag-tool)

Last updated on February 25, 2025

[createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool "createGraphRAGTool()")[MastraMCPClient](https://mastra.ai/docs/reference/tools/client "MastraMCPClient")



================================================================================
Section 55: Content from https://mastra.ai/docs/reference/tools/client
================================================================================

Title: Reference: MastraMCPClient | Tool Discovery | Mastra Docs

URL Source: https://mastra.ai/docs/reference/tools/client

Markdown Content:
Reference: MastraMCPClient | Tool Discovery | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[MastraMCPClient](https://mastra.ai/docs/reference/tools/client#)[Constructor](https://mastra.ai/docs/reference/tools/client#constructor)[Parameters](https://mastra.ai/docs/reference/tools/client#parameters)[Methods](https://mastra.ai/docs/reference/tools/client#methods)[connect()](https://mastra.ai/docs/reference/tools/client#connect)[disconnect()](https://mastra.ai/docs/reference/tools/client#disconnect)[resources()](https://mastra.ai/docs/reference/tools/client#resources)[tools()](https://mastra.ai/docs/reference/tools/client#tools)[Examples](https://mastra.ai/docs/reference/tools/client#examples)[Using with Mastra Agent](https://mastra.ai/docs/reference/tools/client#using-with-mastra-agent)[Example with Stdio Server](https://mastra.ai/docs/reference/tools/client#example-with-stdio-server)[Example with SSE Server](https://mastra.ai/docs/reference/tools/client#example-with-sse-server)[Related Information](https://mastra.ai/docs/reference/tools/client#related-information)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/tools/client.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Tools](https://mastra.ai/docs/reference/tools/document-chunker-tool "Tools")MastraMCPClient

MastraMCPClient
===============

The `MastraMCPClient` class provides a client implementation for interacting with Model Context Protocol (MCP) servers. It handles connection management, resource discovery, and tool execution through the MCP protocol.

Constructor[](https://mastra.ai/docs/reference/tools/client#constructor)
------------------------------------------------------------------------

Creates a new instance of the MastraMCPClient.

```
constructor({
    name,
    version = '1.0.0',
    server,
    capabilities = {},
}: {
    name: string;
    server: StdioServerParameters | SSEClientParameters;
    capabilities?: ClientCapabilities;
    version?: string;
})
```

### Parameters[](https://mastra.ai/docs/reference/tools/client#parameters)

### name:

string

The name identifier for this client instance.

### version?:

string

\= 1.0.0

The version of the client.

### server:

StdioServerParameters | SSEClientParameters

Configuration parameters for either a stdio server connection or an SSE server connection.

### capabilities?:

ClientCapabilities

\= {}

Optional capabilities configuration for the client.

Methods[](https://mastra.ai/docs/reference/tools/client#methods)
----------------------------------------------------------------

### connect()[](https://mastra.ai/docs/reference/tools/client#connect)

Establishes a connection with the MCP server.

```
async connect(): Promise<void>
```

### disconnect()[](https://mastra.ai/docs/reference/tools/client#disconnect)

Closes the connection with the MCP server.

```
async disconnect(): Promise<void>
```

### resources()[](https://mastra.ai/docs/reference/tools/client#resources)

Retrieves the list of available resources from the server.

```
async resources(): Promise<ListResourcesResult>
```

### tools()[](https://mastra.ai/docs/reference/tools/client#tools)

Fetches and initializes available tools from the server, converting them into Mastra-compatible tool formats.

```
async tools(): Promise<Record<string, Tool>>
```

Returns an object mapping tool names to their corresponding Mastra tool implementations.

Examples[](https://mastra.ai/docs/reference/tools/client#examples)
------------------------------------------------------------------

### Using with Mastra Agent[](https://mastra.ai/docs/reference/tools/client#using-with-mastra-agent)

#### Example with Stdio Server[](https://mastra.ai/docs/reference/tools/client#example-with-stdio-server)

```
import { Agent } from "@mastra/core/agent";
import { MastraMCPClient } from "@mastra/mcp";
import { openai } from "@ai-sdk/openai";
 
// Initialize the MCP client using mcp/fetch as an example https://hub.docker.com/r/mcp/fetch
// Visit https://github.com/docker/mcp-servers for other reference docker mcp servers
const fetchClient = new MastraMCPClient({
  name: "fetch",
  server: {
    command: "docker",
    args: ["run", "-i", "--rm", "mcp/fetch"],
  },
});
 
// Create a Mastra Agent
const agent = new Agent({
  name: "Fetch agent",
  instructions:
    "You are able to fetch data from URLs on demand and discuss the response data with the user.",
  model: openai("gpt-4o-mini"),
});
 
try {
  // Connect to the MCP server
  await fetchClient.connect();
 
  // Gracefully handle process exits so the docker subprocess is cleaned up
  process.on("exit", () => {
    fetchClient.disconnect();
  });
 
  // Get available tools
  const tools = await fetchClient.tools();
 
  // Use the agent with the MCP tools
  const response = await agent.generate(
    "Tell me about mastra.ai/docs. Tell me generally what this page is and the content it includes.",
    {
      toolsets: {
        fetch: tools,
      },
    },
  );
 
  console.log("\n\n" + response.text);
} catch (error) {
  console.error("Error:", error);
} finally {
  // Always disconnect when done
  await fetchClient.disconnect();
}
```

#### Example with SSE Server[](https://mastra.ai/docs/reference/tools/client#example-with-sse-server)

```
// Initialize the MCP client using an SSE server
const sseClient = new MastraMCPClient({
  name: "sse-client",
  server: {
    url: new URL("https://your-mcp-server.com/sse"),
    // Optional fetch request configuration
    requestInit: {
      headers: {
        "Authorization": "Bearer your-token"
      }
    }
  },
});
 
// The rest of the usage is identical to the stdio example
```

Related Information[](https://mastra.ai/docs/reference/tools/client#related-information)
----------------------------------------------------------------------------------------

*   For more details about the Model Context Protocol, see the [@modelcontextprotocol/sdk documentation](https://github.com/modelcontextprotocol/typescript-sdk).

Last updated on February 25, 2025

[createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool "createVectorQueryTool()")[LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql "LibSQL Storage")



================================================================================
Section 56: Content from https://mastra.ai/docs/reference/storage/libsql
================================================================================

Title: LibSQL Storage | Storage System | Mastra Core

URL Source: https://mastra.ai/docs/reference/storage/libsql

Markdown Content:
LibSQL Storage | Storage System | Mastra Core
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql#)[Installation](https://mastra.ai/docs/reference/storage/libsql#installation)[Usage](https://mastra.ai/docs/reference/storage/libsql#usage)[Parameters](https://mastra.ai/docs/reference/storage/libsql#parameters)[Additional Notes](https://mastra.ai/docs/reference/storage/libsql#additional-notes)[In-Memory vs Persistent Storage](https://mastra.ai/docs/reference/storage/libsql#in-memory-vs-persistent-storage)[Schema Management](https://mastra.ai/docs/reference/storage/libsql#schema-management)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/storage/libsql.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")StorageLibSQL Storage

LibSQL Storage
==============

The LibSQL storage implementation provides a SQLite-compatible storage solution that can run both in-memory and as a persistent database.

Installation[](https://mastra.ai/docs/reference/storage/libsql#installation)
----------------------------------------------------------------------------

```
npm install @mastra/storage-libsql
```

Usage[](https://mastra.ai/docs/reference/storage/libsql#usage)
--------------------------------------------------------------

```
import { LibSQLStore } from "@mastra/core/storage/libsql";
 
// In-memory database (development)
const storage = new LibSQLStore({
  url: ":memory:",
});
 
// Persistent database (production)
const storage = new LibSQLStore({
  url: process.env.DATABASE_URL,
});
```

Parameters[](https://mastra.ai/docs/reference/storage/libsql#parameters)
------------------------------------------------------------------------

### url:

string

Database URL. Use ':memory:' for in-memory database or a LibSQL-compatible connection string for persistent storage.

### authToken?:

string

Authentication token for remote LibSQL databases.

Additional Notes[](https://mastra.ai/docs/reference/storage/libsql#additional-notes)
------------------------------------------------------------------------------------

### In-Memory vs Persistent Storage[](https://mastra.ai/docs/reference/storage/libsql#in-memory-vs-persistent-storage)

The in-memory configuration (`:memory:`) is useful for:

*   Development and testing
*   Temporary storage that doesn’t need to persist
*   Quick prototyping

For production use cases, use a persistent database URL:

*   Local file: `file:local.db`
*   Remote LibSQL: `libsql://your-database.turso.io`

### Schema Management[](https://mastra.ai/docs/reference/storage/libsql#schema-management)

The storage implementation handles schema creation and updates automatically. It creates the following tables:

*   `threads`: Stores conversation threads
*   `messages`: Stores individual messages
*   `metadata`: Stores additional metadata for threads and messages

Last updated on February 25, 2025

[MastraMCPClient](https://mastra.ai/docs/reference/tools/client "MastraMCPClient")[PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql "PostgreSQL Storage")



================================================================================
Section 57: Content from https://mastra.ai/docs/reference/storage/postgresql
================================================================================

Title: PostgreSQL Storage | Storage System | Mastra Core

URL Source: https://mastra.ai/docs/reference/storage/postgresql

Markdown Content:
PostgreSQL Storage | Storage System | Mastra Core
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql#)[Installation](https://mastra.ai/docs/reference/storage/postgresql#installation)[Usage](https://mastra.ai/docs/reference/storage/postgresql#usage)[Parameters](https://mastra.ai/docs/reference/storage/postgresql#parameters)[Additional Notes](https://mastra.ai/docs/reference/storage/postgresql#additional-notes)[Schema Management](https://mastra.ai/docs/reference/storage/postgresql#schema-management)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/storage/postgresql.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Storage](https://mastra.ai/docs/reference/storage/libsql "Storage")PostgreSQL Storage

PostgreSQL Storage
==================

The PostgreSQL storage implementation provides a production-ready storage solution using PostgreSQL databases.

Installation[](https://mastra.ai/docs/reference/storage/postgresql#installation)
--------------------------------------------------------------------------------

```
npm install @mastra/pg
```

Usage[](https://mastra.ai/docs/reference/storage/postgresql#usage)
------------------------------------------------------------------

```
import { PostgresStore } from "@mastra/pg";
 
const storage = new PostgresStorage({
  connectionString: process.env.DATABASE_URL,
});
```

Parameters[](https://mastra.ai/docs/reference/storage/postgresql#parameters)
----------------------------------------------------------------------------

### connectionString:

string

PostgreSQL connection string (e.g., postgresql://user:pass@host:5432/dbname)

Additional Notes[](https://mastra.ai/docs/reference/storage/postgresql#additional-notes)
----------------------------------------------------------------------------------------

### Schema Management[](https://mastra.ai/docs/reference/storage/postgresql#schema-management)

The storage implementation handles schema creation and updates automatically. It creates the following tables:

*   `threads`: Stores conversation threads
*   `messages`: Stores individual messages
*   `metadata`: Stores additional metadata for threads and messages

Last updated on February 25, 2025

[LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql "LibSQL Storage")[Upstash Storage](https://mastra.ai/docs/reference/storage/upstash "Upstash Storage")



================================================================================
Section 58: Content from https://mastra.ai/docs/reference/storage/upstash
================================================================================

Title: Upstash Storage | Storage System | Mastra Core

URL Source: https://mastra.ai/docs/reference/storage/upstash

Markdown Content:
Upstash Storage | Storage System | Mastra Core
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Upstash Storage](https://mastra.ai/docs/reference/storage/upstash#)[Installation](https://mastra.ai/docs/reference/storage/upstash#installation)[Usage](https://mastra.ai/docs/reference/storage/upstash#usage)[Parameters](https://mastra.ai/docs/reference/storage/upstash#parameters)[Additional Notes](https://mastra.ai/docs/reference/storage/upstash#additional-notes)[Key Structure](https://mastra.ai/docs/reference/storage/upstash#key-structure)[Serverless Benefits](https://mastra.ai/docs/reference/storage/upstash#serverless-benefits)[Data Persistence](https://mastra.ai/docs/reference/storage/upstash#data-persistence)[Performance Considerations](https://mastra.ai/docs/reference/storage/upstash#performance-considerations)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/storage/upstash.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Storage](https://mastra.ai/docs/reference/storage/libsql "Storage")Upstash Storage

Upstash Storage
===============

The Upstash storage implementation provides a serverless-friendly storage solution using Upstash’s Redis-compatible key-value store.

Installation[](https://mastra.ai/docs/reference/storage/upstash#installation)
-----------------------------------------------------------------------------

```
npm install @mastra/upstash
```

Usage[](https://mastra.ai/docs/reference/storage/upstash#usage)
---------------------------------------------------------------

```
import { UpstashStore } from "@mastra/upstash";
 
const storage = new UpstashStore({
  url: process.env.UPSTASH_URL,
  token: process.env.UPSTASH_TOKEN,
});
```

Parameters[](https://mastra.ai/docs/reference/storage/upstash#parameters)
-------------------------------------------------------------------------

### url:

string

Upstash Redis URL

### token:

string

Upstash Redis authentication token

### prefix?:

string

\= mastra:

Key prefix for all stored items

Additional Notes[](https://mastra.ai/docs/reference/storage/upstash#additional-notes)
-------------------------------------------------------------------------------------

### Key Structure[](https://mastra.ai/docs/reference/storage/upstash#key-structure)

The Upstash storage implementation uses a key-value structure:

*   Thread keys: `{prefix}thread:{threadId}`
*   Message keys: `{prefix}message:{messageId}`
*   Metadata keys: `{prefix}metadata:{entityId}`

### Serverless Benefits[](https://mastra.ai/docs/reference/storage/upstash#serverless-benefits)

Upstash storage is particularly well-suited for serverless deployments:

*   No connection management needed
*   Pay-per-request pricing
*   Global replication options
*   Edge-compatible

### Data Persistence[](https://mastra.ai/docs/reference/storage/upstash#data-persistence)

Upstash provides:

*   Automatic data persistence
*   Point-in-time recovery
*   Cross-region replication options

### Performance Considerations[](https://mastra.ai/docs/reference/storage/upstash#performance-considerations)

For optimal performance:

*   Use appropriate key prefixes to organize data
*   Monitor Redis memory usage
*   Consider data expiration policies if needed

Last updated on February 25, 2025

[PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql "PostgreSQL Storage")[getAgent()](https://mastra.ai/docs/reference/agents/getAgent "getAgent()")



================================================================================
Section 59: Content from https://mastra.ai/docs/reference/agents/getAgent
================================================================================

Title: Reference: getAgent() | Agent Config | Agents | Mastra Docs

URL Source: https://mastra.ai/docs/reference/agents/getAgent

Markdown Content:
Reference: getAgent() | Agent Config | Agents | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[getAgent()](https://mastra.ai/docs/reference/agents/getAgent#)[API Signature](https://mastra.ai/docs/reference/agents/getAgent#api-signature)[Parameters](https://mastra.ai/docs/reference/agents/getAgent#parameters)[Returns](https://mastra.ai/docs/reference/agents/getAgent#returns)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/agents/getAgent.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")AgentsgetAgent()

`getAgent()`
============

Retrieve an agent based on the provided configuration

```
async function getAgent({
  connectionId,
  agent,
  apis,
  logger,
}: {
  connectionId: string;
  agent: Record<string, any>;
  apis: Record<string, IntegrationApi>;
  logger: any;
}): Promise<(props: { prompt: string }) => Promise<any>> {
  return async (props: { prompt: string }) => {
    return { message: "Hello, world!" };
  };
}
```

API Signature[](https://mastra.ai/docs/reference/agents/getAgent#api-signature)
-------------------------------------------------------------------------------

### Parameters[](https://mastra.ai/docs/reference/agents/getAgent#parameters)

### connectionId:

string

The connection ID to use for the agent's API calls.

### agent:

Record<string, any\>

The agent configuration object.

### apis:

Record<string, IntegrationAPI\>

A map of API names to their respective API objects.

### Returns[](https://mastra.ai/docs/reference/agents/getAgent#returns)

Last updated on February 25, 2025

[Upstash Storage](https://mastra.ai/docs/reference/storage/upstash "Upstash Storage")[createTool()](https://mastra.ai/docs/reference/agents/createTool "createTool()")



================================================================================
Section 60: Content from https://mastra.ai/docs/reference/agents/createTool
================================================================================

Title: Reference: createTool() | Tools | Agents | Mastra Docs

URL Source: https://mastra.ai/docs/reference/agents/createTool

Markdown Content:
Reference: createTool() | Tools | Agents | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createTool()](https://mastra.ai/docs/reference/agents/createTool#)[API Signature](https://mastra.ai/docs/reference/agents/createTool#api-signature)[Parameters](https://mastra.ai/docs/reference/agents/createTool#parameters)[Returns](https://mastra.ai/docs/reference/agents/createTool#returns)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/agents/createTool.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Agents](https://mastra.ai/docs/reference/agents/getAgent "Agents")createTool()

`createTool()`
==============

Tools are typed functions that can be executed by agents or workflows, with built-in integration access and parameter validation. Each tool has a schema that defines its inputs, an executor function that implements its logic, and access to configured integrations.

src/mastra/tools/index.ts

```
import { createTool } from "@mastra/core/logger";
import { z } from "zod";
 
const getStockPrice = async (symbol: string) => {
  const data = await fetch(
    `https://mastra-stock-data.vercel.app/api/stock-data?symbol=${symbol}`,
  ).then((r) => r.json());
  return data.prices["4. close"];
};
 
export const stockPrices = createTool({
  id: "Get Stock Price",
  inputSchema: z.object({
    symbol: z.string(),
  }),
  description: `Fetches the last day's closing stock price for a given symbol`,
  execute: async ({ context }) => {
    console.log("Using tool to fetch stock price for", context.symbol);
    return {
      symbol: context.symbol,
      currentPrice: await getStockPrice(context.symbol),
    };
  },
});
```

API Signature[](https://mastra.ai/docs/reference/agents/createTool#api-signature)
---------------------------------------------------------------------------------

### Parameters[](https://mastra.ai/docs/reference/agents/createTool#parameters)

### label:

string

Name of the tool (e.g., "Get Stock Prices")

### schema:

ZodSchema

Zod schema for validating inputs

### description:

string

Clear explanation of what market data the tool provides

### executor:

(params: ExecutorParams) =\> Promise<any\>

Async function that fetches the requested market data

ExecutorParams

### data:

object

The validated input data (in this case, symbol)

### integrationsRegistry:

function

Function to get connected integrations

### runId?:

string

The runId of the current run

### agents:

Map<string, Agent<any\>\>

Map of registered agents

### engine?:

MastraEngine

Mastra engine instance

### llm:

LLM

LLM instance

### outputSchema?:

ZodSchema

Zod schema for validating outputs

### Returns[](https://mastra.ai/docs/reference/agents/createTool#returns)

### ToolApi:

object

The tool API object that includes the schema, label, description, and executor function.

ToolApi

### schema:

ZodSchema<IN\>

Zod schema for validating inputs.

### label:

string

Name of the tool.

### description:

string

Description of the tool's functionality.

### outputSchema?:

ZodSchema<OUT\>

Zod schema for validating outputs.

### executor:

(params: IntegrationApiExcutorParams<IN\>) =\> Promise<OUT\>

Async function that executes the tool's logic.

Last updated on February 25, 2025

[getAgent()](https://mastra.ai/docs/reference/agents/getAgent "getAgent()")[generate()](https://mastra.ai/docs/reference/agents/generate "generate()")



================================================================================
Section 62: Content from https://mastra.ai/docs/reference/agents/stream
================================================================================

Title: Reference: Agent.stream() | Streaming | Agents | Mastra Docs

URL Source: https://mastra.ai/docs/reference/agents/stream

Markdown Content:
Reference: Agent.stream() | Streaming | Agents | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[stream()](https://mastra.ai/docs/reference/agents/stream#)[Parameters](https://mastra.ai/docs/reference/agents/stream#parameters)[`messages`](https://mastra.ai/docs/reference/agents/stream#messages)[Message Object Structure](https://mastra.ai/docs/reference/agents/stream#message-object-structure)[`options` (Optional)](https://mastra.ai/docs/reference/agents/stream#options-optional)[Returns](https://mastra.ai/docs/reference/agents/stream#returns)[PropertiesTable for Return Values](https://mastra.ai/docs/reference/agents/stream#propertiestable-for-return-values)[Examples](https://mastra.ai/docs/reference/agents/stream#examples)[Basic Text Streaming](https://mastra.ai/docs/reference/agents/stream#basic-text-streaming)[Structured Output Streaming with Thread Context](https://mastra.ai/docs/reference/agents/stream#structured-output-streaming-with-thread-context)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/agents/stream.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Agents](https://mastra.ai/docs/reference/agents/getAgent "Agents")stream()

`stream()`
==========

The `stream()` method enables real-time streaming of responses from an agent. This method accepts `messages` and an optional `options` object as parameters, similar to `generate()`.

Parameters[](https://mastra.ai/docs/reference/agents/stream#parameters)
-----------------------------------------------------------------------

### `messages`[](https://mastra.ai/docs/reference/agents/stream#messages)

The `messages` parameter can be:

*   A single string
*   An array of strings
*   An array of message objects with `role` and `content` properties

#### Message Object Structure[](https://mastra.ai/docs/reference/agents/stream#message-object-structure)

```
interface Message {
  role: 'system' | 'user' | 'assistant';
  content: string;
}
```

### `options` (Optional)[](https://mastra.ai/docs/reference/agents/stream#options-optional)

An optional object that can include:

### options:

object

Additional options for the \`stream\` method.

object

### output?:

Zod schema | JsonSchema7

Defines the expected structure of the output. Can be a JSON Schema object or a Zod schema.

### experimental\_output?:

Zod schema | JsonSchema7

Enables structured output generation alongside text generation and tool calls. The model will generate responses that conform to the provided schema.

### context?:

CoreMessage\[\]

Additional context messages to provide to the agent.

### threadId?:

string

Identifier for the conversation thread. Allows for maintaining context across multiple interactions.

### resourceId?:

string

Identifier for the user or resource interacting with the agent.

### onFinish?:

(result: string) =\> Promise<void\> | void

Callback function called when streaming is complete.

### onStepFinish?:

(step: string) =\> void

Callback function called after each step during streaming.

### maxSteps?:

number

Maximum number of steps allowed during streaming.

### toolsets?:

ToolsetsInput

Additional toolsets to make available to the agent during this stream.

### temperature?:

number

Controls randomness in the model's output. Higher values (e.g., 0.8) make the output more random, lower values (e.g., 0.2) make it more focused and deterministic.

Returns[](https://mastra.ai/docs/reference/agents/stream#returns)
-----------------------------------------------------------------

The return value of the `stream()` method depends on the options provided, specifically the `output` option.

### PropertiesTable for Return Values[](https://mastra.ai/docs/reference/agents/stream#propertiestable-for-return-values)

### textStream:

AsyncIterable<string\>

An async iterable stream of text chunks. Present when output is 'text'.

### objectStream:

AsyncIterable<object\>

An async iterable stream of structured data. Present when a schema is provided.

### object:

Promise<object\>

A promise that resolves to the final structured output when using a schema.

Examples[](https://mastra.ai/docs/reference/agents/stream#examples)
-------------------------------------------------------------------

### Basic Text Streaming[](https://mastra.ai/docs/reference/agents/stream#basic-text-streaming)

```
const stream = await myAgent.stream([
  { role: "user", content: "Tell me a story." }
]);
 
for await (const chunk of stream.textStream) {
  process.stdout.write(chunk);
}
```

### Structured Output Streaming with Thread Context[](https://mastra.ai/docs/reference/agents/stream#structured-output-streaming-with-thread-context)

```
const schema = {
  type: 'object',
  properties: {
    summary: { type: 'string' },
    nextSteps: { type: 'array', items: { type: 'string' } }
  },
  required: ['summary', 'nextSteps']
};
 
const response = await myAgent.stream(
  "What should we do next?",
  {
    output: schema,
    threadId: "project-123",
    onFinish: text => console.log("Finished:", text)
  }
);
 
for await (const chunk of response.textStream) {
  console.log(chunk);
}
 
const result = await response.object;
console.log("Final structured result:", result);
```

The key difference between Agent’s `stream()` and LLM’s `stream()` is that Agents maintain conversation context through `threadId`, can access tools, and integrate with the agent’s memory system.

Last updated on February 25, 2025

[generate()](https://mastra.ai/docs/reference/agents/generate "generate()")[Workflow](https://mastra.ai/docs/reference/workflows/workflow "Workflow")



================================================================================
Section 63: Content from https://mastra.ai/docs/reference/workflows/workflow
================================================================================

Title: Reference: Workflow Class | Building Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/workflow

Markdown Content:
Reference: Workflow Class | Building Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow Class](https://mastra.ai/docs/reference/workflows/workflow#)[API Reference](https://mastra.ai/docs/reference/workflows/workflow#api-reference)[Constructor](https://mastra.ai/docs/reference/workflows/workflow#constructor)[Core Methods](https://mastra.ai/docs/reference/workflows/workflow#core-methods)[`step()`](https://mastra.ai/docs/reference/workflows/workflow#step)[`commit()`](https://mastra.ai/docs/reference/workflows/workflow#commit)[`execute()`](https://mastra.ai/docs/reference/workflows/workflow#execute)[Trigger Schemas](https://mastra.ai/docs/reference/workflows/workflow#trigger-schemas)[Validation](https://mastra.ai/docs/reference/workflows/workflow#validation)[1\. At Commit Time](https://mastra.ai/docs/reference/workflows/workflow#1-at-commit-time)[2\. During Execution](https://mastra.ai/docs/reference/workflows/workflow#2-during-execution)[Workflow Status](https://mastra.ai/docs/reference/workflows/workflow#workflow-status)[Example: Handling Different Statuses](https://mastra.ai/docs/reference/workflows/workflow#example-handling-different-statuses)[Error Handling](https://mastra.ai/docs/reference/workflows/workflow#error-handling)[Passing Context Between Steps](https://mastra.ai/docs/reference/workflows/workflow#passing-context-between-steps)[Related Documentation](https://mastra.ai/docs/reference/workflows/workflow#related-documentation)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/workflow.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")WorkflowsWorkflow

Workflow Class
==============

The Workflow class enables you to create state machines for complex sequences of operations with conditional branching and data validation.

```
import { Workflow } from "@mastra/core/workflows";
 
const workflow = new Workflow({ name: "my-workflow" });
```

API Reference[](https://mastra.ai/docs/reference/workflows/workflow#api-reference)
----------------------------------------------------------------------------------

### Constructor[](https://mastra.ai/docs/reference/workflows/workflow#constructor)

### name:

string

Identifier for the workflow

### logger?:

Logger<WorkflowLogMessage\>

Optional logger instance for workflow execution details

### steps:

Step\[\]

Array of steps to include in the workflow

### triggerSchema:

z.Schema

Optional schema for validating workflow trigger data

### Core Methods[](https://mastra.ai/docs/reference/workflows/workflow#core-methods)

#### `step()`[](https://mastra.ai/docs/reference/workflows/workflow#step)

Adds a [Step](https://mastra.ai/docs/reference/workflows/step-class) to the workflow, including transitions to other steps. Returns the workflow instance for chaining. [Learn more about steps](https://mastra.ai/docs/reference/workflows/step-class).

#### `commit()`[](https://mastra.ai/docs/reference/workflows/workflow#commit)

Validates and finalizes the workflow configuration. Must be called after adding all steps.

#### `execute()`[](https://mastra.ai/docs/reference/workflows/workflow#execute)

Executes the workflow with optional trigger data. Typed based on the [trigger schema](https://mastra.ai/docs/reference/workflows/workflow#trigger-schemas).

Trigger Schemas[](https://mastra.ai/docs/reference/workflows/workflow#trigger-schemas)
--------------------------------------------------------------------------------------

Trigger schemas validate the initial data passed to a workflow using Zod.

```
const workflow = new Workflow({
  name: "order-process",
  triggerSchema: z.object({
    orderId: z.string(),
    customer: z.object({
      id: z.string(),
      email: z.string().email(),
    }),
  }),
});
```

The schema:

*   Validates data passed to `execute()`
*   Provides TypeScript types for your workflow input

Validation[](https://mastra.ai/docs/reference/workflows/workflow#validation)
----------------------------------------------------------------------------

Workflow validation happens at two key times:

### 1\. At Commit Time[](https://mastra.ai/docs/reference/workflows/workflow#1-at-commit-time)

When you call `.commit()`, the workflow validates:

```
workflow
  .step('step1', {...})
  .step('step2', {...})
  .commit(); // Validates workflow structure
```

*   Circular dependencies between steps
*   Terminal paths (every path must end)
*   Unreachable steps
*   Variable references to non-existent steps
*   Duplicate step IDs

### 2\. During Execution[](https://mastra.ai/docs/reference/workflows/workflow#2-during-execution)

When you call `start()`, it validates:

```
const { runId, start } = workflow.createRun();
 
// Validates trigger data against schema
await start({
  triggerData: {
    orderId: "123",
    customer: {
      id: "cust_123",
      email: "invalid-email", // Will fail validation
    },
  },
});
```

*   Trigger data against trigger schema
*   Each step’s input data against its inputSchema
*   Variable paths exist in referenced step outputs
*   Required variables are present

Workflow Status[](https://mastra.ai/docs/reference/workflows/workflow#workflow-status)
--------------------------------------------------------------------------------------

A workflow’s status indicates its current execution state. The possible values are:

### CREATED:

string

Workflow instance has been created but not started

### RUNNING:

string

Workflow is actively executing steps

### SUSPENDED:

string

Workflow execution is paused waiting for resume

### COMPLETED:

string

All steps finished executing successfully

### FAILED:

string

Workflow encountered an error during execution

### Example: Handling Different Statuses[](https://mastra.ai/docs/reference/workflows/workflow#example-handling-different-statuses)

```
const { runId, start } = workflow.createRun();
 
workflow.watch(runId, async ({ status }) => {
  switch (status) {
    case "SUSPENDED":
      // Handle suspended state
      break;
    case "COMPLETED":
      // Process results
      break;
    case "FAILED":
      // Handle error state
      break;
  }
});
 
await start({ triggerData: data });
```

Error Handling[](https://mastra.ai/docs/reference/workflows/workflow#error-handling)
------------------------------------------------------------------------------------

```
try {
  const { runId, start } = workflow.createRun();
  await start({ triggerData: data });
} catch (error) {
  if (error instanceof ValidationError) {
    // Handle validation errors
    console.log(error.type); // 'circular_dependency' | 'no_terminal_path' | 'unreachable_step'
    console.log(error.details); // { stepId?: string, path?: string[] }
  }
}
```

Passing Context Between Steps[](https://mastra.ai/docs/reference/workflows/workflow#passing-context-between-steps)
------------------------------------------------------------------------------------------------------------------

Steps can access data from previous steps in the workflow through the context object. Each step receives the accumulated context from all previous steps that have executed.

```
workflow
  .step({
    id: 'getData',
    execute: async ({ context }) => {
      return {
        data: { id: '123', value: 'example' }
      };
    }
  })
  .step({
    id: 'processData',
    execute: async ({ context }) => {
      // Access data from previous step through context.steps
      const previousData = context.steps.getData.output.data;
      // Process previousData.id and previousData.value
    }
  });
```

The context object:

*   Contains results from all completed steps in `context.steps`
*   Provides access to step outputs through `context.steps.[stepId].output`
*   Is typed based on step output schemas
*   Is immutable to ensure data consistency

Related Documentation[](https://mastra.ai/docs/reference/workflows/workflow#related-documentation)
--------------------------------------------------------------------------------------------------

*   [Step](https://mastra.ai/docs/reference/workflows/step-class)
*   [.then()](https://mastra.ai/docs/reference/workflows/then)
*   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
*   [.after()](https://mastra.ai/docs/reference/workflows/after)

Last updated on February 25, 2025

[stream()](https://mastra.ai/docs/reference/agents/stream "stream()")[Step](https://mastra.ai/docs/reference/workflows/step-class "Step")



================================================================================
Section 64: Content from https://mastra.ai/docs/reference/workflows/step-class
================================================================================

Title: Reference: Step | Building Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/step-class

Markdown Content:
Reference: Step | Building Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Step](https://mastra.ai/docs/reference/workflows/step-class#)[Usage](https://mastra.ai/docs/reference/workflows/step-class#usage)[Constructor Parameters](https://mastra.ai/docs/reference/workflows/step-class#constructor-parameters)[ExecuteParams](https://mastra.ai/docs/reference/workflows/step-class#executeparams)[Related](https://mastra.ai/docs/reference/workflows/step-class#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/step-class.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows")Step

Step
====

The Step class defines individual units of work within a workflow, encapsulating execution logic, data validation, and input/output handling.

Usage[](https://mastra.ai/docs/reference/workflows/step-class#usage)
--------------------------------------------------------------------

```
const processOrder = new Step({
  id: "processOrder",
  inputSchema: z.object({
    orderId: z.string(),
    userId: z.string()
  }),
  outputSchema: z.object({
    status: z.string(),
    orderId: z.string()
  }),
  execute: async ({ context, runId }) => {
    return {
      status: "processed",
      orderId: context.orderId
    };
  }
});
```

Constructor Parameters[](https://mastra.ai/docs/reference/workflows/step-class#constructor-parameters)
------------------------------------------------------------------------------------------------------

### id:

string

Unique identifier for the step

### inputSchema:

z.ZodSchema

Zod schema to validate input data before execution

### outputSchema:

z.ZodSchema

Zod schema to validate step output data

### payload:

Record<string, any\>

Static data to be merged with variables

### execute:

(params: ExecuteParams) =\> Promise<any\>

Async function containing step logic

### ExecuteParams[](https://mastra.ai/docs/reference/workflows/step-class#executeparams)

### context:

StepContext

Access to workflow context and step results

### runId:

string

Unique identifier for current workflow run

### suspend:

() =\> Promise<void\>

Function to suspend step execution

Related[](https://mastra.ai/docs/reference/workflows/step-class#related)
------------------------------------------------------------------------

*   [Workflow Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Step Configuration Guide](https://mastra.ai/docs/workflows/steps)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[Workflow](https://mastra.ai/docs/reference/workflows/workflow "Workflow")[StepOptions](https://mastra.ai/docs/reference/workflows/step-options "StepOptions")



================================================================================
Section 65: Content from https://mastra.ai/docs/reference/workflows/step-options
================================================================================

Title: Reference: StepOptions | Building Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/step-options

Markdown Content:
Reference: StepOptions | Building Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[StepOptions](https://mastra.ai/docs/reference/workflows/step-options#)[Usage](https://mastra.ai/docs/reference/workflows/step-options#usage)[Properties](https://mastra.ai/docs/reference/workflows/step-options#properties)[VariableRef](https://mastra.ai/docs/reference/workflows/step-options#variableref)[Related](https://mastra.ai/docs/reference/workflows/step-options#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/step-options.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows")StepOptions

StepOptions
===========

Configuration options for workflow steps that control variable mapping, execution conditions, and other runtime behavior.

Usage[](https://mastra.ai/docs/reference/workflows/step-options#usage)
----------------------------------------------------------------------

```
workflow.step(processOrder, {
  variables: {
    orderId: { step: 'trigger', path: 'id' },
    userId: { step: 'auth', path: 'user.id' }
  },
  when: {
    ref: { step: 'auth', path: 'status' },
    query: { $eq: 'authenticated' }
  }
});
```

Properties[](https://mastra.ai/docs/reference/workflows/step-options#properties)
--------------------------------------------------------------------------------

### variables?:

Record<string, VariableRef\>

Maps step input variables to values from other steps

### when?:

StepCondition

Condition that must be met for step execution

### VariableRef[](https://mastra.ai/docs/reference/workflows/step-options#variableref)

### step:

string | Step | { id: string }

Source step for the variable value

### path:

string

Path to the value in the step's output

Related[](https://mastra.ai/docs/reference/workflows/step-options#related)
--------------------------------------------------------------------------

*   [Path Comparison](https://mastra.ai/docs/workflows/control-flow#path-comparison)
*   [Step Function Reference](https://mastra.ai/docs/reference/workflows/step-function)
*   [Step Class Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[Step](https://mastra.ai/docs/reference/workflows/step-class "Step")[StepCondition](https://mastra.ai/docs/reference/workflows/step-condition "StepCondition")



================================================================================
Section 66: Content from https://mastra.ai/docs/reference/workflows/step-condition
================================================================================

Title: Reference: StepCondition | Building Workflows | Mastra

URL Source: https://mastra.ai/docs/reference/workflows/step-condition

Markdown Content:
Reference: StepCondition | Building Workflows | Mastra
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[StepCondition](https://mastra.ai/docs/reference/workflows/step-condition#)[Usage](https://mastra.ai/docs/reference/workflows/step-condition#usage)[1\. Function Condition](https://mastra.ai/docs/reference/workflows/step-condition#1-function-condition)[2\. Query Object](https://mastra.ai/docs/reference/workflows/step-condition#2-query-object)[3\. Simple Path Comparison](https://mastra.ai/docs/reference/workflows/step-condition#3-simple-path-comparison)[StepCondition](https://mastra.ai/docs/reference/workflows/step-condition#stepcondition)[Query](https://mastra.ai/docs/reference/workflows/step-condition#query)[Related](https://mastra.ai/docs/reference/workflows/step-condition#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/step-condition.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows")StepCondition

StepCondition
=============

Conditions determine whether a step should execute based on the output of previous steps or trigger data.

Usage[](https://mastra.ai/docs/reference/workflows/step-condition#usage)
------------------------------------------------------------------------

There are three ways to specify conditions: function, query object, and simple path comparison.

### 1\. Function Condition[](https://mastra.ai/docs/reference/workflows/step-condition#1-function-condition)

```
workflow.step(processOrder, {
  when: async ({ context }) => {
    const auth = context?.getStepResult<{status: string}>("auth");
    return auth?.status === "authenticated";
  }
});
```

### 2\. Query Object[](https://mastra.ai/docs/reference/workflows/step-condition#2-query-object)

```
workflow.step(processOrder, {
  when: {
    ref: { step: 'auth', path: 'status' },
    query: { $eq: 'authenticated' }
  }
});
```

### 3\. Simple Path Comparison[](https://mastra.ai/docs/reference/workflows/step-condition#3-simple-path-comparison)

```
workflow.step(processOrder, {
  when: {
    "auth.status": "authenticated"
  }
});
```

Based on the type of condition, the workflow runner will try to match the condition to one of these types.

1.  Simple Path Condition (when there’s a dot in the key)
2.  Base/Query Condition (when there’s a ‘ref’ property)
3.  Function Condition (when it’s an async function)

StepCondition[](https://mastra.ai/docs/reference/workflows/step-condition#stepcondition)
----------------------------------------------------------------------------------------

### ref:

{ stepId: string | 'trigger'; path: string }

Reference to step output value. stepId can be a step ID or 'trigger' for initial data. path specifies location of value in step result

### query:

Query<any\>

MongoDB-style query using sift operators ($eq, $gt, etc)

Query[](https://mastra.ai/docs/reference/workflows/step-condition#query)
------------------------------------------------------------------------

The Query object provides MongoDB-style query operators for comparing values from previous steps or trigger data. It supports basic comparison operators like `$eq`, `$gt`, `$lt` as well as array operators like `$in` and `$nin`, and can be combined with and/or operators for complex conditions.

This query syntax allows for readable conditional logic for determining whether a step should execute.

### $eq:

any

Equal to value

### $ne:

any

Not equal to value

### $gt:

number

Greater than value

### $gte:

number

Greater than or equal to value

### $lt:

number

Less than value

### $lte:

number

Less than or equal to value

### $in:

any\[\]

Value exists in array

### $nin:

any\[\]

Value does not exist in array

### and:

StepCondition\[\]

Array of conditions that must all be true

### or:

StepCondition\[\]

Array of conditions where at least one must be true

Related[](https://mastra.ai/docs/reference/workflows/step-condition#related)
----------------------------------------------------------------------------

*   [Step Options Reference](https://mastra.ai/docs/reference/workflows/step-options)
*   [Step Function Reference](https://mastra.ai/docs/reference/workflows/step-function)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[StepOptions](https://mastra.ai/docs/reference/workflows/step-options "StepOptions")[.step()](https://mastra.ai/docs/reference/workflows/step-function ".step()")



================================================================================
Section 67: Content from https://mastra.ai/docs/reference/workflows/step-function
================================================================================

Title: Reference: Workflow.step() | Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/step-function

Markdown Content:
Reference: Workflow.step() | Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.step()](https://mastra.ai/docs/reference/workflows/step-function#)[Usage](https://mastra.ai/docs/reference/workflows/step-function#usage)[Parameters](https://mastra.ai/docs/reference/workflows/step-function#parameters)[StepDefinition](https://mastra.ai/docs/reference/workflows/step-function#stepdefinition)[StepOptions](https://mastra.ai/docs/reference/workflows/step-function#stepoptions)[Related](https://mastra.ai/docs/reference/workflows/step-function#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/step-function.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").step()

Workflow.step()
===============

The `.step()` method adds a new step to the workflow, optionally configuring its variables and execution conditions.

Usage[](https://mastra.ai/docs/reference/workflows/step-function#usage)
-----------------------------------------------------------------------

```
workflow.step({
  id: "stepTwo",
  outputSchema: z.object({
    result: z.number()
  }),
  execute: async ({ context }) => {
    return { result: 42 };
  }
});
```

Parameters[](https://mastra.ai/docs/reference/workflows/step-function#parameters)
---------------------------------------------------------------------------------

### stepConfig:

Step | StepDefinition | string

Step instance, configuration object, or step ID to add to workflow

### options?:

StepOptions

Optional configuration for step execution

### StepDefinition[](https://mastra.ai/docs/reference/workflows/step-function#stepdefinition)

### id:

string

Unique identifier for the step

### outputSchema?:

z.ZodSchema

Schema for validating step output

### execute:

(params: ExecuteParams) =\> Promise<any\>

Function containing step logic

### StepOptions[](https://mastra.ai/docs/reference/workflows/step-function#stepoptions)

### variables?:

Record<string, VariableRef\>

Map of variable names to their source references

### when?:

StepCondition

Condition that must be met for step to execute

Related[](https://mastra.ai/docs/reference/workflows/step-function#related)
---------------------------------------------------------------------------

*   [Basic Usage with Step Instance](https://mastra.ai/docs/workflows/steps)
*   [Step Class Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[StepCondition](https://mastra.ai/docs/reference/workflows/step-condition "StepCondition")[.after()](https://mastra.ai/docs/reference/workflows/after ".after()")



================================================================================
Section 68: Content from https://mastra.ai/docs/reference/workflows/after
================================================================================

Title: Reference: .after() | Building Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/after

Markdown Content:
Reference: .after() | Building Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[.after()](https://mastra.ai/docs/reference/workflows/after#)[Usage](https://mastra.ai/docs/reference/workflows/after#usage)[Parameters](https://mastra.ai/docs/reference/workflows/after#parameters)[Returns](https://mastra.ai/docs/reference/workflows/after#returns)[Related](https://mastra.ai/docs/reference/workflows/after#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/after.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").after()

.after()
========

The `.after()` method defines explicit dependencies between workflow steps, enabling branching and merging paths in your workflow execution.

Usage[](https://mastra.ai/docs/reference/workflows/after#usage)
---------------------------------------------------------------

```
workflow
  .step(stepA)
    .then(stepB)
  .after(stepA)  // Create new branch after stepA completes
    .step(stepC);
```

Parameters[](https://mastra.ai/docs/reference/workflows/after#parameters)
-------------------------------------------------------------------------

### stepId:

string

ID(s) of step(s) that must complete before continuing

Returns[](https://mastra.ai/docs/reference/workflows/after#returns)
-------------------------------------------------------------------

### workflow:

Workflow

The workflow instance for method chaining

Related[](https://mastra.ai/docs/reference/workflows/after#related)
-------------------------------------------------------------------

*   [Branching Paths example](https://mastra.ai/examples/workflows/branching-paths)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Step Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 26, 2025

[.step()](https://mastra.ai/docs/reference/workflows/step-function ".step()")[.then()](https://mastra.ai/docs/reference/workflows/then ".then()")



================================================================================
Section 69: Content from https://mastra.ai/docs/reference/workflows/then
================================================================================

Title: Reference: Workflow.then() | Building Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/then

Markdown Content:
Reference: Workflow.then() | Building Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.then()](https://mastra.ai/docs/reference/workflows/then#)[Usage](https://mastra.ai/docs/reference/workflows/then#usage)[Parameters](https://mastra.ai/docs/reference/workflows/then#parameters)[Returns](https://mastra.ai/docs/reference/workflows/then#returns)[Validation](https://mastra.ai/docs/reference/workflows/then#validation)[Error Handling](https://mastra.ai/docs/reference/workflows/then#error-handling)[Related](https://mastra.ai/docs/reference/workflows/then#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/then.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").then()

Workflow.then()
===============

The `.then()` method creates a sequential dependency between workflow steps, ensuring steps execute in a specific order.

Usage[](https://mastra.ai/docs/reference/workflows/then#usage)
--------------------------------------------------------------

```
workflow
  .step(stepOne)
  .then(stepTwo)
  .then(stepThree);
```

Parameters[](https://mastra.ai/docs/reference/workflows/then#parameters)
------------------------------------------------------------------------

### step:

Step | string

The step instance or step ID that should execute after the previous step completes

Returns[](https://mastra.ai/docs/reference/workflows/then#returns)
------------------------------------------------------------------

### workflow:

Workflow

The workflow instance for method chaining

Validation[](https://mastra.ai/docs/reference/workflows/then#validation)
------------------------------------------------------------------------

When using `then`:

*   The previous step must exist in the workflow
*   Steps cannot form circular dependencies
*   Each step can only appear once in a sequential chain

Error Handling[](https://mastra.ai/docs/reference/workflows/then#error-handling)
--------------------------------------------------------------------------------

```
try {
  workflow
    .step(stepA)
    .then(stepB)
    .then(stepA) // Will throw error - circular dependency
    .commit();
} catch (error) {
  if (error instanceof ValidationError) {
    console.log(error.type); // 'circular_dependency'
    console.log(error.details);
  }
}
```

Related[](https://mastra.ai/docs/reference/workflows/then#related)
------------------------------------------------------------------

*   [step Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   [after Reference](https://mastra.ai/docs/reference/workflows/after)
*   [Sequential Steps Example](https://mastra.ai/examples/workflows/sequential-steps)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[.after()](https://mastra.ai/docs/reference/workflows/after ".after()")[.createRun()](https://mastra.ai/docs/reference/workflows/createRun ".createRun()")



================================================================================
Section 70: Content from https://mastra.ai/docs/reference/workflows/createRun
================================================================================

Title: Reference: Workflow.createRun() | Running Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/createRun

Markdown Content:
Reference: Workflow.createRun() | Running Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.createRun()](https://mastra.ai/docs/reference/workflows/createRun#)[Usage](https://mastra.ai/docs/reference/workflows/createRun#usage)[Returns](https://mastra.ai/docs/reference/workflows/createRun#returns)[Error Handling](https://mastra.ai/docs/reference/workflows/createRun#error-handling)[Related](https://mastra.ai/docs/reference/workflows/createRun#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/createRun.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").createRun()

Workflow.createRun()
====================

The `.createRun()` method initializes a new workflow run instance. It generates a unique run ID for tracking and returns a start function that begins workflow execution when called.

One reason to use `.createRun()` vs `.execute()` is to get a unique run ID for tracking, logging, or subscribing via `.watch()`.

Usage[](https://mastra.ai/docs/reference/workflows/createRun#usage)
-------------------------------------------------------------------

```
const { runId, start } = workflow.createRun();
 
const result = await start();
```

Returns[](https://mastra.ai/docs/reference/workflows/createRun#returns)
-----------------------------------------------------------------------

### runId:

string

Unique identifier for tracking this workflow run

### start:

() =\> Promise<WorkflowResult\>

Function that begins workflow execution when called

Error Handling[](https://mastra.ai/docs/reference/workflows/createRun#error-handling)
-------------------------------------------------------------------------------------

The start function may throw validation errors if the workflow configuration is invalid:

```
try {
  const { runId, start } = workflow.createRun();
  await start({ triggerData: data });
} catch (error) {
  if (error instanceof ValidationError) {
    // Handle validation errors
    console.log(error.type); // 'circular_dependency' | 'no_terminal_path' | 'unreachable_step'
    console.log(error.details);
  }
}
```

Related[](https://mastra.ai/docs/reference/workflows/createRun#related)
-----------------------------------------------------------------------

*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Step Class Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   See the [Creating a Workflow](https://mastra.ai/examples/workflows/creating-a-workflow) example for complete usage

Last updated on February 25, 2025

[.then()](https://mastra.ai/docs/reference/workflows/then ".then()")[.start()](https://mastra.ai/docs/reference/workflows/start ".start()")



================================================================================
Section 71: Content from https://mastra.ai/docs/reference/workflows/start
================================================================================

Title: Reference: start() | Running Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/start

Markdown Content:
Reference: start() | Running Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[start()](https://mastra.ai/docs/reference/workflows/start#)[Usage](https://mastra.ai/docs/reference/workflows/start#usage)[Parameters](https://mastra.ai/docs/reference/workflows/start#parameters)[config](https://mastra.ai/docs/reference/workflows/start#config)[Returns](https://mastra.ai/docs/reference/workflows/start#returns)[Error Handling](https://mastra.ai/docs/reference/workflows/start#error-handling)[Related](https://mastra.ai/docs/reference/workflows/start#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/start.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").start()

start()
=======

The start function begins execution of a workflow run. It processes all steps in the defined workflow order, handling parallel execution, branching logic, and step dependencies.

Usage[](https://mastra.ai/docs/reference/workflows/start#usage)
---------------------------------------------------------------

```
const { runId, start } = workflow.createRun();
const result = await start({ 
  triggerData: { inputValue: 42 } 
});
```

Parameters[](https://mastra.ai/docs/reference/workflows/start#parameters)
-------------------------------------------------------------------------

### config?:

object

Configuration for starting the workflow run

### config[](https://mastra.ai/docs/reference/workflows/start#config)

### triggerData:

Record<string, any\>

Initial data that matches the workflow's triggerSchema

Returns[](https://mastra.ai/docs/reference/workflows/start#returns)
-------------------------------------------------------------------

### results:

Record<string, any\>

Combined output from all completed workflow steps

### status:

'completed' | 'error' | 'suspended'

Final status of the workflow run

Error Handling[](https://mastra.ai/docs/reference/workflows/start#error-handling)
---------------------------------------------------------------------------------

The start function may throw several types of validation errors:

```
try {
  const result = await start({ triggerData: data });
} catch (error) {
  if (error instanceof ValidationError) {
    console.log(error.type); // 'circular_dependency' | 'no_terminal_path' | 'unreachable_step'
    console.log(error.details);
  }
}
```

Related[](https://mastra.ai/docs/reference/workflows/start#related)
-------------------------------------------------------------------

*   [Example: Creating a Workflow](https://mastra.ai/examples/workflows/creating-a-workflow)
*   [Example: Suspend and Resume](https://mastra.ai/examples/workflows/suspend-and-resume)
*   [createRun Reference](https://mastra.ai/docs/reference/workflows/createRun)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Step Class Reference](https://mastra.ai/docs/reference/workflows/step-class)

Last updated on February 25, 2025

[.createRun()](https://mastra.ai/docs/reference/workflows/createRun ".createRun()")[.execute()](https://mastra.ai/docs/reference/workflows/execute ".execute()")



================================================================================
Section 72: Content from https://mastra.ai/docs/reference/workflows/execute
================================================================================

Title: Reference: Workflow.execute() | Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/execute

Markdown Content:
Reference: Workflow.execute() | Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.execute()](https://mastra.ai/docs/reference/workflows/execute#)[Usage Example](https://mastra.ai/docs/reference/workflows/execute#usage-example)[Parameters](https://mastra.ai/docs/reference/workflows/execute#parameters)[Returns](https://mastra.ai/docs/reference/workflows/execute#returns)[Additional Examples](https://mastra.ai/docs/reference/workflows/execute#additional-examples)[Related](https://mastra.ai/docs/reference/workflows/execute#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/execute.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").execute()

Workflow.execute()
==================

Executes a workflow with the provided trigger data and returns the results. The workflow must be committed before execution.

Usage Example[](https://mastra.ai/docs/reference/workflows/execute#usage-example)
---------------------------------------------------------------------------------

```
const workflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number()
  })
});
 
workflow.step(stepOne).then(stepTwo).commit();
 
const result = await workflow.execute({
  triggerData: { inputValue: 42 }
});
```

Parameters[](https://mastra.ai/docs/reference/workflows/execute#parameters)
---------------------------------------------------------------------------

### options?:

ExecuteOptions

Options for workflow execution

TriggerSchema

string

Returns[](https://mastra.ai/docs/reference/workflows/execute#returns)
---------------------------------------------------------------------

### WorkflowResult:

object

Results from workflow execution

string

Record<string, StepResult\>

WorkflowStatus

Additional Examples[](https://mastra.ai/docs/reference/workflows/execute#additional-examples)
---------------------------------------------------------------------------------------------

Execute with run ID:

```
const result = await workflow.execute({
  runId: "custom-run-id",
  triggerData: { inputValue: 42 }
});
```

Handle execution results:

```
const { runId, results, status } = await workflow.execute({
  triggerData: { inputValue: 42 }
});
 
if (status === "COMPLETED") {
  console.log("Step results:", results);
}
```

### Related[](https://mastra.ai/docs/reference/workflows/execute#related)

*   [Workflow.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
*   [Workflow.commit()](https://mastra.ai/docs/reference/workflows/commit)
*   [Workflow.start()](https://mastra.ai/docs/reference/workflows/start)

Last updated on February 25, 2025

[.start()](https://mastra.ai/docs/reference/workflows/start ".start()")[.suspend()](https://mastra.ai/docs/reference/workflows/suspend ".suspend()")



================================================================================
Section 73: Content from https://mastra.ai/docs/reference/workflows/suspend
================================================================================

Title: Reference: suspend() | Control Flow | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/suspend

Markdown Content:
Reference: suspend() | Control Flow | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[suspend()](https://mastra.ai/docs/reference/workflows/suspend#)[Usage Example](https://mastra.ai/docs/reference/workflows/suspend#usage-example)[Parameters](https://mastra.ai/docs/reference/workflows/suspend#parameters)[Returns](https://mastra.ai/docs/reference/workflows/suspend#returns)[Additional Examples](https://mastra.ai/docs/reference/workflows/suspend#additional-examples)[Related](https://mastra.ai/docs/reference/workflows/suspend#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/suspend.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").suspend()

suspend()
=========

Pauses workflow execution at the current step until explicitly resumed. The workflow state is persisted and can be continued later.

Usage Example[](https://mastra.ai/docs/reference/workflows/suspend#usage-example)
---------------------------------------------------------------------------------

```
const approvalStep = new Step({
  id: "needsApproval",
  execute: async ({ context, suspend }) => {
    if (context.steps.amount > 1000) {
      await suspend();
    }
    return { approved: true };
  }
});
```

Parameters[](https://mastra.ai/docs/reference/workflows/suspend#parameters)
---------------------------------------------------------------------------

### metadata?:

Record<string, any\>

Optional data to store with the suspended state

Returns[](https://mastra.ai/docs/reference/workflows/suspend#returns)
---------------------------------------------------------------------

### Promise<void\>:

Promise

Resolves when the workflow is successfully suspended

Additional Examples[](https://mastra.ai/docs/reference/workflows/suspend#additional-examples)
---------------------------------------------------------------------------------------------

Suspend with metadata:

```
const reviewStep = new Step({
  id: "review",
  execute: async ({ context, suspend }) => {
    await suspend({
      reason: "Needs manager approval",
      requestedBy: context.user
    });
    return { reviewed: true };
  }
});
```

Monitor suspended state:

```
workflow.watch((state) => {
  if (state.status === "SUSPENDED") {
    notifyReviewers(state.metadata);
  }
});
```

### Related[](https://mastra.ai/docs/reference/workflows/suspend#related)

*   [Suspend & Resume Workflows](https://mastra.ai/docs/workflows/suspend-and-resume)
*   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
*   [.watch()](https://mastra.ai/docs/reference/workflows/watch)

Last updated on February 25, 2025

[.execute()](https://mastra.ai/docs/reference/workflows/execute ".execute()")[.resume()](https://mastra.ai/docs/reference/workflows/resume ".resume()")



================================================================================
Section 74: Content from https://mastra.ai/docs/reference/workflows/resume
================================================================================

Title: Reference: Workflow.resume() | Running Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/resume

Markdown Content:
Reference: Workflow.resume() | Running Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.resume()](https://mastra.ai/docs/reference/workflows/resume#)[Usage](https://mastra.ai/docs/reference/workflows/resume#usage)[Parameters](https://mastra.ai/docs/reference/workflows/resume#parameters)[config](https://mastra.ai/docs/reference/workflows/resume#config)[Returns](https://mastra.ai/docs/reference/workflows/resume#returns)[Error Handling](https://mastra.ai/docs/reference/workflows/resume#error-handling)[Related](https://mastra.ai/docs/reference/workflows/resume#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/resume.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").resume()

Workflow.resume()
=================

The `.resume()` method continues execution of a suspended workflow step, optionally providing new context data that will be merged with existing step results.

Usage[](https://mastra.ai/docs/reference/workflows/resume#usage)
----------------------------------------------------------------

```
await workflow.resume({
  runId: "abc-123",
  stepId: "stepTwo", 
  context: {
    secondValue: 100
  }
});
```

Parameters[](https://mastra.ai/docs/reference/workflows/resume#parameters)
--------------------------------------------------------------------------

### config:

object

Configuration for resuming the workflow

### config[](https://mastra.ai/docs/reference/workflows/resume#config)

### runId:

string

Unique identifier of the workflow run to resume

### stepId:

string

ID of the suspended step to resume

### context?:

Record<string, any\>

New context data to merge with existing step results

Returns[](https://mastra.ai/docs/reference/workflows/resume#returns)
--------------------------------------------------------------------

### Promise<WorkflowResult\>:

object

Result of the resumed workflow execution

Error Handling[](https://mastra.ai/docs/reference/workflows/resume#error-handling)
----------------------------------------------------------------------------------

The resume function may throw several types of errors:

```
try {
  await workflow.resume({
    runId,
    stepId: "stepTwo",
    context: newData
  });
} catch (error) {
  if (error.message === "No snapshot found for workflow run") {
    // Handle missing workflow state
  }
  if (error.message === "Failed to parse workflow snapshot") {
    // Handle corrupted workflow state
  }
}
```

Related[](https://mastra.ai/docs/reference/workflows/resume#related)
--------------------------------------------------------------------

*   [Suspend and Resume](https://mastra.ai/examples/workflows/suspend-and-resume)

*   [`watch` Reference](https://mastra.ai/docs/reference/workflows/watch)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)

Last updated on February 25, 2025

[.suspend()](https://mastra.ai/docs/reference/workflows/suspend ".suspend()")[.commit()](https://mastra.ai/docs/reference/workflows/commit ".commit()")



================================================================================
Section 75: Content from https://mastra.ai/docs/reference/workflows/commit
================================================================================

Title: Reference: Workflow.commit() | Running Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/commit

Markdown Content:
Reference: Workflow.commit() | Running Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.commit()](https://mastra.ai/docs/reference/workflows/commit#)[Usage](https://mastra.ai/docs/reference/workflows/commit#usage)[Returns](https://mastra.ai/docs/reference/workflows/commit#returns)[Related](https://mastra.ai/docs/reference/workflows/commit#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/commit.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").commit()

Workflow.commit()
=================

The `.commit()` method re-initializes the workflow’s state machine with the current step configuration.

Usage[](https://mastra.ai/docs/reference/workflows/commit#usage)
----------------------------------------------------------------

```
workflow
  .step(stepA)
  .then(stepB)
  .commit();
```

Returns[](https://mastra.ai/docs/reference/workflows/commit#returns)
--------------------------------------------------------------------

### workflow:

Workflow

The workflow instance

Related[](https://mastra.ai/docs/reference/workflows/commit#related)
--------------------------------------------------------------------

*   [Branching Paths example](https://mastra.ai/examples/workflows/branching-paths)
*   [Workflow Class Reference](https://mastra.ai/docs/reference/workflows/workflow)
*   [Step Reference](https://mastra.ai/docs/reference/workflows/step-class)
*   [Control Flow Guide](https://mastra.ai/docs/workflows/control-flow)

Last updated on February 25, 2025

[.resume()](https://mastra.ai/docs/reference/workflows/resume ".resume()")[.watch()](https://mastra.ai/docs/reference/workflows/watch ".watch()")



================================================================================
Section 76: Content from https://mastra.ai/docs/reference/workflows/watch
================================================================================

Title: Reference: Workflow.watch() | Workflows | Mastra Docs

URL Source: https://mastra.ai/docs/reference/workflows/watch

Markdown Content:
Reference: Workflow.watch() | Workflows | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflow.watch()](https://mastra.ai/docs/reference/workflows/watch#)[Usage Example](https://mastra.ai/docs/reference/workflows/watch#usage-example)[Parameters](https://mastra.ai/docs/reference/workflows/watch#parameters)[WorkflowState Properties](https://mastra.ai/docs/reference/workflows/watch#workflowstate-properties)[Returns](https://mastra.ai/docs/reference/workflows/watch#returns)[Additional Examples](https://mastra.ai/docs/reference/workflows/watch#additional-examples)[Related](https://mastra.ai/docs/reference/workflows/watch#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/workflows/watch.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Workflows](https://mastra.ai/docs/reference/workflows/workflow "Workflows").watch()

Workflow.watch()
================

The `.watch()` function subscribes to state changes in a Mastra workflow, allowing you to monitor execution progress and react to state updates.

Usage Example[](https://mastra.ai/docs/reference/workflows/watch#usage-example)
-------------------------------------------------------------------------------

```
import { Workflow } from "@mastra/core/workflows";
 
const workflow = new Workflow({
  name: "document-processor"
});
 
// Subscribe to state changes
const unsubscribe = workflow.watch((state) => {
  console.log('Current step:', state.currentStep);
  console.log('Step outputs:', state.stepOutputs);
});
 
// Run the workflow
await workflow.run({
  input: { text: "Process this document" }
});
 
// Stop watching
unsubscribe();
```

Parameters[](https://mastra.ai/docs/reference/workflows/watch#parameters)
-------------------------------------------------------------------------

### callback:

(state: WorkflowState) =\> void

Function called whenever the workflow state changes

### WorkflowState Properties[](https://mastra.ai/docs/reference/workflows/watch#workflowstate-properties)

### currentStep:

string

ID of the currently executing step

### stepOutputs:

Record<string, any\>

Outputs from completed workflow steps

### status:

'running' | 'completed' | 'failed'

Current status of the workflow

### error?:

Error | null

Error object if workflow failed

Returns[](https://mastra.ai/docs/reference/workflows/watch#returns)
-------------------------------------------------------------------

### unsubscribe:

() =\> void

Function to stop watching workflow state changes

Additional Examples[](https://mastra.ai/docs/reference/workflows/watch#additional-examples)
-------------------------------------------------------------------------------------------

Monitor specific step completion:

```
workflow.watch((state) => {
  if (state.currentStep === 'processDocument') {
    console.log('Document processing output:', state.stepOutputs.processDocument);
  }
});
```

Error handling:

```
workflow.watch((state) => {
  if (state.status === 'failed') {
    console.error('Workflow failed:', state.error);
    // Implement error recovery logic
  }
});
```

### Related[](https://mastra.ai/docs/reference/workflows/watch#related)

*   [Workflow Creation](https://mastra.ai/docs/reference/workflows/createRun)
*   [Step Configuration](https://mastra.ai/docs/reference/workflows/step-class)

Last updated on February 25, 2025

[.commit()](https://mastra.ai/docs/reference/workflows/commit ".commit()")[Overview](https://mastra.ai/docs/reference/observability/providers "Overview")



================================================================================
Section 77: Content from https://mastra.ai/docs/reference/observability/providers
================================================================================

Title: Reference: Provider List | Observability | Mastra Docs

URL Source: https://mastra.ai/docs/reference/observability/providers

Markdown Content:
Reference: Provider List | Observability | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Observability Providers](https://mastra.ai/docs/reference/observability/providers#)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/index.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")ObservabilityProvidersOverview

Observability Providers
=======================

Observability providers include:

*   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
*   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
*   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
*   [Langsmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
*   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
*   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
*   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)

Last updated on February 25, 2025

[.watch()](https://mastra.ai/docs/reference/workflows/watch ".watch()")[SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz "SigNoz")



================================================================================
Section 78: Content from https://mastra.ai/docs/reference/observability/providers/signoz
================================================================================

Title: Reference: SigNoz Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/signoz

Markdown Content:
Reference: SigNoz Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz#)[Configuration](https://mastra.ai/docs/reference/observability/providers/signoz#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/signoz#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/signoz#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/signoz.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")SigNoz

SigNoz
======

SigNoz is an open-source APM and observability platform that provides full-stack monitoring capabilities through OpenTelemetry.

Configuration[](https://mastra.ai/docs/reference/observability/providers/signoz#configuration)
----------------------------------------------------------------------------------------------

To use SigNoz with Mastra, configure these environment variables:

```
OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{region}.signoz.cloud:443
OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key=your_signoz_token
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/signoz#implementation)
------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use SigNoz:

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/signoz#dashboard)
--------------------------------------------------------------------------------------

Access your SigNoz dashboard at [cloud.signoz.io](https://cloud.signoz.io/)

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/reference/observability/providers "Overview")[Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust "Braintrust")



================================================================================
Section 79: Content from https://mastra.ai/docs/reference/observability/providers/braintrust
================================================================================

Title: Reference: Braintrust | Observability | Mastra Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/braintrust

Markdown Content:
Reference: Braintrust | Observability | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust#)[Configuration](https://mastra.ai/docs/reference/observability/providers/braintrust#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/braintrust#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/braintrust#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/braintrust.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")Braintrust

Braintrust
==========

Braintrust is an evaluation and monitoring platform for LLM applications.

Configuration[](https://mastra.ai/docs/reference/observability/providers/braintrust#configuration)
--------------------------------------------------------------------------------------------------

To use Braintrust with Mastra, configure these environment variables:

```
OTEL_EXPORTER_OTLP_ENDPOINT=https://api.braintrust.dev/otel
OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer <Your API Key>, x-bt-parent=project_id:<Your Project ID>"
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/braintrust#implementation)
----------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use Braintrust:

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/braintrust#dashboard)
------------------------------------------------------------------------------------------

Access your Braintrust dashboard at [braintrust.dev](https://www.braintrust.dev/)

Last updated on February 25, 2025

[SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz "SigNoz")[LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith "LangSmith")



================================================================================
Section 80: Content from https://mastra.ai/docs/reference/observability/providers/langsmith
================================================================================

Title: Reference: LangSmith Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/langsmith

Markdown Content:
Reference: LangSmith Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith#)[Configuration](https://mastra.ai/docs/reference/observability/providers/langsmith#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/langsmith#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/langsmith#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/langsmith.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")LangSmith

LangSmith
=========

LangSmith is LangChain’s platform for debugging, testing, evaluating, and monitoring LLM applications.

Configuration[](https://mastra.ai/docs/reference/observability/providers/langsmith#configuration)
-------------------------------------------------------------------------------------------------

To use LangSmith with Mastra, you’ll need to configure the following environment variables:

```
OTEL_EXPORTER_OTLP_ENDPOINT=https://api.smith.langchain.com/v1/traces
OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your_api_key, x-langsmith-project-id=your_project_id"
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/langsmith#implementation)
---------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use LangSmith:

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/langsmith#dashboard)
-----------------------------------------------------------------------------------------

Access your traces and analytics in the LangSmith dashboard at [smith.langchain.com](https://smith.langchain.com/)

Last updated on February 25, 2025

[Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust "Braintrust")[Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse "Langfuse")



================================================================================
Section 81: Content from https://mastra.ai/docs/reference/observability/providers/langfuse
================================================================================

Title: Reference: Langfuse Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/langfuse

Markdown Content:
Reference: Langfuse Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse#)[Configuration](https://mastra.ai/docs/reference/observability/providers/langfuse#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/langfuse#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/langfuse#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/langfuse.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")Langfuse

Langfuse
========

Langfuse is an open-source observability platform designed specifically for LLM applications.

Configuration[](https://mastra.ai/docs/reference/observability/providers/langfuse#configuration)
------------------------------------------------------------------------------------------------

To use Langfuse with Mastra, you’ll need to configure the following environment variables:

```
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
LANGFUSE_BASEURL=https://cloud.langfuse.com  # Optional - defaults to cloud.langfuse.com
```

**Important**: When configuring the telemetry export settings, the `traceName` parameter must be set to `"ai"` for the Langfuse integration to work properly.

Implementation[](https://mastra.ai/docs/reference/observability/providers/langfuse#implementation)
--------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use Langfuse:

```
import { Mastra } from "@mastra/core";
import { LangfuseExporter } from "langfuse-vercel";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "ai", // this must be set to "ai" so that the LangfuseExporter thinks it's an AI SDK trace
    enabled: true,
    export: {
      type: "custom",
      exporter: new LangfuseExporter({
        publicKey: process.env.LANGFUSE_PUBLIC_KEY,
        secretKey: process.env.LANGFUSE_SECRET_KEY,
        baseUrl: process.env.LANGFUSE_BASEURL,
      }),
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/langfuse#dashboard)
----------------------------------------------------------------------------------------

Once configured, you can view your traces and analytics in the Langfuse dashboard at [cloud.langfuse.com](https://cloud.langfuse.com/)

Last updated on February 25, 2025

[LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith "LangSmith")[LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch "LangWatch")



================================================================================
Section 82: Content from https://mastra.ai/docs/reference/observability/providers/langwatch
================================================================================

Title: Reference: LangWatch Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/langwatch

Markdown Content:
Reference: LangWatch Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch#)[Configuration](https://mastra.ai/docs/reference/observability/providers/langwatch#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/langwatch#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/langwatch#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/langwatch.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")LangWatch

LangWatch
=========

LangWatch is a specialized observability platform for LLM applications.

Configuration[](https://mastra.ai/docs/reference/observability/providers/langwatch#configuration)
-------------------------------------------------------------------------------------------------

To use LangWatch with Mastra, configure these environment variables:

```
LANGWATCH_API_KEY=your_api_key
LANGWATCH_PROJECT_ID=your_project_id
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/langwatch#implementation)
---------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use LangWatch:

```
import { Mastra } from "@mastra/core";
import { LangWatchExporter } from "langwatch";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "custom",
      exporter: new LangWatchExporter({
        apiKey: process.env.LANGWATCH_API_KEY,
        projectId: process.env.LANGWATCH_PROJECT_ID,
      }),
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/langwatch#dashboard)
-----------------------------------------------------------------------------------------

Access your LangWatch dashboard at [app.langwatch.ai](https://app.langwatch.ai/)

Last updated on February 25, 2025

[Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse "Langfuse")[New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic "New Relic")



================================================================================
Section 83: Content from https://mastra.ai/docs/reference/observability/providers/new-relic
================================================================================

Title: Reference: New Relic Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/new-relic

Markdown Content:
Reference: New Relic Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic#)[Configuration](https://mastra.ai/docs/reference/observability/providers/new-relic#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/new-relic#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/new-relic#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/new-relic.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")New Relic

New Relic
=========

New Relic is a comprehensive observability platform that supports OpenTelemetry (OTLP) for full-stack monitoring.

Configuration[](https://mastra.ai/docs/reference/observability/providers/new-relic#configuration)
-------------------------------------------------------------------------------------------------

To use New Relic with Mastra via OTLP, configure these environment variables:

```
OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp.nr-data.net:4317
OTEL_EXPORTER_OTLP_HEADERS="api-key=your_license_key"
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/new-relic#implementation)
---------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use New Relic:

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/new-relic#dashboard)
-----------------------------------------------------------------------------------------

View your telemetry data in the New Relic One dashboard at [one.newrelic.com](https://one.newrelic.com/)

Last updated on February 25, 2025

[LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch "LangWatch")[Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop "Traceloop")



================================================================================
Section 85: Content from https://mastra.ai/docs/reference/observability/providers/laminar
================================================================================

Title: Reference: Laminar Integration | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/providers/laminar

Markdown Content:
Reference: Laminar Integration | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Laminar](https://mastra.ai/docs/reference/observability/providers/laminar#)[Configuration](https://mastra.ai/docs/reference/observability/providers/laminar#configuration)[Implementation](https://mastra.ai/docs/reference/observability/providers/laminar#implementation)[Dashboard](https://mastra.ai/docs/reference/observability/providers/laminar#dashboard)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/providers/laminar.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Observability[Providers](https://mastra.ai/docs/reference/observability/providers "Providers")Laminar

Laminar
=======

Laminar is a specialized observability platform for LLM applications.

Configuration[](https://mastra.ai/docs/reference/observability/providers/laminar#configuration)
-----------------------------------------------------------------------------------------------

To use Laminar with Mastra, configure these environment variables:

```
OTEL_EXPORTER_OTLP_ENDPOINT=https://api.laminar.dev/v1/traces
OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your_api_key, x-laminar-team-id=your_team_id"
```

Implementation[](https://mastra.ai/docs/reference/observability/providers/laminar#implementation)
-------------------------------------------------------------------------------------------------

Here’s how to configure Mastra to use Laminar:

```
import { Mastra } from "@mastra/core";
 
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});
```

Dashboard[](https://mastra.ai/docs/reference/observability/providers/laminar#dashboard)
---------------------------------------------------------------------------------------

Access your Laminar dashboard at [https://lmnr.ai/](https://lmnr.ai/)

Last updated on February 25, 2025

[Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop "Traceloop")[Logger](https://mastra.ai/docs/reference/observability/logger "Logger")



================================================================================
Section 86: Content from https://mastra.ai/docs/reference/observability/logger
================================================================================

Title: Reference: Logger Instance | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/logger

Markdown Content:
Reference: Logger Instance | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Logger Instance](https://mastra.ai/docs/reference/observability/logger#)[Example](https://mastra.ai/docs/reference/observability/logger#example)[Methods](https://mastra.ai/docs/reference/observability/logger#methods)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/logger.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Observability](https://mastra.ai/docs/reference/observability/providers "Observability")Logger

Logger Instance
===============

A Logger instance is created by `createLogger()` and provides methods to record events at various severity levels. Depending on the logger type, messages may be written to the console, file, or an external service.

Example[](https://mastra.ai/docs/reference/observability/logger#example)
------------------------------------------------------------------------

```
// Using a console logger
const logger = createLogger({ name: 'Mastra', level: 'info' });
 
logger.debug('Debug message'); // Won't be logged because level is INFO
logger.info({ message: 'User action occurred', destinationPath: 'user-actions', type: 'AGENT' }); // Logged
logger.error('An error occurred'); // Logged as ERROR
```

Methods[](https://mastra.ai/docs/reference/observability/logger#methods)
------------------------------------------------------------------------

### debug:

(message: BaseLogMessage | string, ...args: any\[\]) =\> void | Promise<void\>

Write a DEBUG-level log. Only recorded if level ≤ DEBUG.

### info:

(message: BaseLogMessage | string, ...args: any\[\]) =\> void | Promise<void\>

Write an INFO-level log. Only recorded if level ≤ INFO.

### warn:

(message: BaseLogMessage | string, ...args: any\[\]) =\> void | Promise<void\>

Write a WARN-level log. Only recorded if level ≤ WARN.

### error:

(message: BaseLogMessage | string, ...args: any\[\]) =\> void | Promise<void\>

Write an ERROR-level log. Only recorded if level ≤ ERROR.

### cleanup?:

() =\> Promise<void\>

Cleanup resources held by the logger (e.g., network connections for Upstash). Not all loggers implement this.

**Note:** Some loggers require a `BaseLogMessage` object (with `message`, `destinationPath`, `type` fields). For instance, the `File` and `Upstash` loggers need structured messages.

Last updated on February 25, 2025

[Laminar](https://mastra.ai/docs/reference/observability/providers/laminar "Laminar")[OTelConfig](https://mastra.ai/docs/reference/observability/otel-config "OTelConfig")



================================================================================
Section 87: Content from https://mastra.ai/docs/reference/observability/otel-config
================================================================================

Title: Reference: OtelConfig | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/otel-config

Markdown Content:
Reference: OtelConfig | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[OtelConfig](https://mastra.ai/docs/reference/observability/otel-config#)[Properties](https://mastra.ai/docs/reference/observability/otel-config#properties)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/otel-config.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Observability](https://mastra.ai/docs/reference/observability/providers "Observability")OTelConfig

`OtelConfig`
============

The `OtelConfig` object is used to configure OpenTelemetry instrumentation, tracing, and exporting behavior within your application. By adjusting its properties, you can control how telemetry data (such as traces) is collected, sampled, and exported.

To use the `OtelConfig` within Mastra, pass it as the value of the `telemetry` key when initializing Mastra. This will configure Mastra to use your custom OpenTelemetry settings for tracing and instrumentation.

```
import { Mastra } from 'mastra';
 
const otelConfig: OtelConfig = {
  serviceName: 'my-awesome-service',
  enabled: true,
  sampling: {
    type: 'ratio',
    probability: 0.5,
  },
  export: {
    type: 'otlp',
    endpoint: 'https://otel-collector.example.com/v1/traces',
    headers: {
      Authorization: 'Bearer YOUR_TOKEN_HERE',
    },
  },
};
```

### Properties[](https://mastra.ai/docs/reference/observability/otel-config#properties)

### serviceName?:

string

Human-readable name used to identify your service in telemetry backends.

### enabled?:

boolean

Whether telemetry collection and export are enabled.

### sampling?:

SamplingStrategy

Defines the sampling strategy for traces, controlling how much data is collected.

'ratio' | 'always\_on' | 'always\_off' | 'parent\_based'

number (0.0 to 1.0)

object

### export?:

object

Configuration for exporting collected telemetry data.

'otlp' | 'console'

string

Record<string, string\>

Last updated on February 25, 2025

[Logger](https://mastra.ai/docs/reference/observability/logger "Logger")[.createLogger()](https://mastra.ai/docs/reference/observability/create-logger ".createLogger()")



================================================================================
Section 88: Content from https://mastra.ai/docs/reference/observability/create-logger
================================================================================

Title: Reference: createLogger() | Mastra Observability Docs

URL Source: https://mastra.ai/docs/reference/observability/create-logger

Markdown Content:
Reference: createLogger() | Mastra Observability Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[createLogger()](https://mastra.ai/docs/reference/observability/create-logger#)[Usage](https://mastra.ai/docs/reference/observability/create-logger#usage)[Console Logger (Development)](https://mastra.ai/docs/reference/observability/create-logger#console-logger-development)[File Transport (Structured Logs)](https://mastra.ai/docs/reference/observability/create-logger#file-transport-structured-logs)[Upstash Logger (Remote Log Drain)](https://mastra.ai/docs/reference/observability/create-logger#upstash-logger-remote-log-drain)[Parameters](https://mastra.ai/docs/reference/observability/create-logger#parameters)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/observability/create-logger.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Observability](https://mastra.ai/docs/reference/observability/providers "Observability").createLogger()

createLogger()
==============

The `createLogger()` function is used to instantiate a logger based on a given configuration. You can create console-based, file-based, or Upstash Redis-based loggers by specifying the type and any additional parameters relevant to that type.

### Usage[](https://mastra.ai/docs/reference/observability/create-logger#usage)

#### Console Logger (Development)[](https://mastra.ai/docs/reference/observability/create-logger#console-logger-development)

```
const consoleLogger = createLogger({ name: "Mastra", level: "debug" });
consoleLogger.info("App started");
```

#### File Transport (Structured Logs)[](https://mastra.ai/docs/reference/observability/create-logger#file-transport-structured-logs)

```
import { FileTransport } from "@mastra/loggers/file";
 
const fileLogger = createLogger({
  name: "Mastra",
  transports: { file: new FileTransport({ path: "test-dir/test.log" }) },
  level: "warn",
});
fileLogger.warn("Low disk space", {
  destinationPath: "system",
  type: "WORKFLOW",
});
```

#### Upstash Logger (Remote Log Drain)[](https://mastra.ai/docs/reference/observability/create-logger#upstash-logger-remote-log-drain)

```
import { UpstashTransport } from "@mastra/loggers/upstash";
 
const logger = createLogger({
  name: "Mastra",
  transports: {
    upstash: new UpstashTransport({
      listName: "production-logs",
      upstashUrl: process.env.UPSTASH_URL!,
      upstashToken: process.env.UPSTASH_TOKEN!,
    }),
  },
  level: "info",
});
 
logger.info({
  message: "User signed in",
  destinationPath: "auth",
  type: "AGENT",
  runId: "run_123",
});
```

### Parameters[](https://mastra.ai/docs/reference/observability/create-logger#parameters)

### type:

0

Specifies the logger implementation to create.

### level?:

LogLevel

Minimum severity level of logs to record. One of DEBUG, INFO, WARN, or ERROR.

### dirPath?:

string

For FILE type only. Directory path where log files are stored (default: "logs").

### url?:

string

For UPSTASH type only. Upstash Redis endpoint URL used for storing logs.

### token?:

string

For UPSTASH type only. Upstash Redis access token.

### key?:

string

For UPSTASH type only. Redis list key under which logs are stored.

Last updated on February 25, 2025

[OTelConfig](https://mastra.ai/docs/reference/observability/otel-config "OTelConfig")[AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy "AnswerRelevancy")



================================================================================
Section 89: Content from https://mastra.ai/docs/reference/evals/answer-relevancy
================================================================================

Title: Reference: Answer Relevancy | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/answer-relevancy

Markdown Content:
Reference: Answer Relevancy | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[AnswerRelevancyMetric](https://mastra.ai/docs/reference/evals/answer-relevancy#)[Basic Usage](https://mastra.ai/docs/reference/evals/answer-relevancy#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/answer-relevancy#constructor-parameters)[AnswerRelevancyMetricOptions](https://mastra.ai/docs/reference/evals/answer-relevancy#answerrelevancymetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/answer-relevancy#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/answer-relevancy#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/answer-relevancy#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/answer-relevancy#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/answer-relevancy#score-interpretation)[Example with Custom Configuration](https://mastra.ai/docs/reference/evals/answer-relevancy#example-with-custom-configuration)[Related](https://mastra.ai/docs/reference/evals/answer-relevancy#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/answer-relevancy.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")EvalsAnswerRelevancy

AnswerRelevancyMetric
=====================

The `AnswerRelevancyMetric` class evaluates how well an LLM’s output answers or addresses the input query. It uses a judge-based system to determine relevancy and provides detailed scoring and reasoning.

Basic Usage[](https://mastra.ai/docs/reference/evals/answer-relevancy#basic-usage)
----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { AnswerRelevancyMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new AnswerRelevancyMetric(model, {
  uncertaintyWeight: 0.3,
  scale: 1,
});
 
const result = await metric.measure(
  "What is the capital of France?",
  "Paris is the capital of France.",
);
 
console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the score
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/answer-relevancy#constructor-parameters)
--------------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate relevancy

### options?:

AnswerRelevancyMetricOptions

\= { uncertaintyWeight: 0.3, scale: 1 }

Configuration options for the metric

### AnswerRelevancyMetricOptions[](https://mastra.ai/docs/reference/evals/answer-relevancy#answerrelevancymetricoptions)

### uncertaintyWeight?:

number

\= 0.3

Weight given to 'unsure' verdicts in scoring (0-1)

### scale?:

number

\= 1

Maximum score value

measure() Parameters[](https://mastra.ai/docs/reference/evals/answer-relevancy#measure-parameters)
--------------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/answer-relevancy#returns)
--------------------------------------------------------------------------

### score:

number

Relevancy score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Explanation of the score

Scoring Details[](https://mastra.ai/docs/reference/evals/answer-relevancy#scoring-details)
------------------------------------------------------------------------------------------

The metric evaluates relevancy through query-answer alignment, considering completeness, accuracy, and detail level.

### Scoring Process[](https://mastra.ai/docs/reference/evals/answer-relevancy#scoring-process)

1.  Statement Analysis:
    
    *   Breaks output into meaningful statements while preserving context
    *   Evaluates each statement against query requirements
2.  Evaluates relevance of each statement:
    
    *   “yes”: Full weight for direct matches
    *   “unsure”: Partial weight (default: 0.3) for approximate matches
    *   “no”: Zero weight for irrelevant content

Final score: `((direct + uncertainty * partial) / total_statements) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/answer-relevancy#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect relevance - complete and accurate
*   0.7-0.9: High relevance - minor gaps or imprecisions
*   0.4-0.6: Moderate relevance - significant gaps
*   0.1-0.3: Low relevance - major issues
*   0.0: No relevance - incorrect or off-topic

Example with Custom Configuration[](https://mastra.ai/docs/reference/evals/answer-relevancy#example-with-custom-configuration)
------------------------------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { AnswerRelevancyMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new AnswerRelevancyMetric(
  model,
  {
    uncertaintyWeight: 0.5, // Higher weight for uncertain verdicts
    scale: 5, // Use 0-5 scale instead of 0-1
  },
);
 
const result = await metric.measure(
  "What are the benefits of exercise?",
  "Regular exercise improves cardiovascular health, builds strength, and boosts mental wellbeing.",
);
 
// Example output:
// {
//   score: 4.5,
//   info: {
//     reason: "The score is 4.5 out of 5 because the response directly addresses the query
//           with specific, accurate benefits of exercise. It covers multiple aspects
//           (cardiovascular, muscular, and mental health) in a clear and concise manner.
//           The answer is highly relevant and provides appropriate detail without
//           including unnecessary information."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/answer-relevancy#related)
--------------------------------------------------------------------------

*   [Prompt Alignment Metric](https://mastra.ai/docs/reference/evals/prompt-alignment)
*   [Context Precision Metric](https://mastra.ai/docs/reference/evals/context-precision)
*   [Faithfulness Metric](https://mastra.ai/docs/reference/evals/faithfulness)

Last updated on February 25, 2025

[.createLogger()](https://mastra.ai/docs/reference/observability/create-logger ".createLogger()")[Bias](https://mastra.ai/docs/reference/evals/bias "Bias")



================================================================================
Section 90: Content from https://mastra.ai/docs/reference/evals/bias
================================================================================

Title: Reference: Bias | Output Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/bias

Markdown Content:
Reference: Bias | Output Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[BiasMetric](https://mastra.ai/docs/reference/evals/bias#)[Basic Usage](https://mastra.ai/docs/reference/evals/bias#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/bias#constructor-parameters)[BiasMetricOptions](https://mastra.ai/docs/reference/evals/bias#biasmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/bias#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/bias#returns)[Bias Categories](https://mastra.ai/docs/reference/evals/bias#bias-categories)[Scoring Details](https://mastra.ai/docs/reference/evals/bias#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/bias#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/bias#score-interpretation)[Example with Different Types of Bias](https://mastra.ai/docs/reference/evals/bias#example-with-different-types-of-bias)[Related](https://mastra.ai/docs/reference/evals/bias#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/bias.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Bias

BiasMetric
==========

The `BiasMetric` class evaluates whether an LLM’s output contains various forms of bias, including gender, political, racial/ethnic, or geographical bias. This metric is particularly useful for detecting unintended biases that may emerge after fine-tuning models or applying optimizations.

Basic Usage[](https://mastra.ai/docs/reference/evals/bias#basic-usage)
----------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { BiasMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new BiasMetric(model, {
  scale: 1
});
 
const result = await metric.measure(
  "Describe leadership qualities in the workplace",
  "Strong leaders are typically men who can make tough decisions..."
);
 
console.log(result.score); // Score from 0-1, higher means more biased
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/bias#constructor-parameters)
--------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate bias

### options?:

BiasMetricOptions

\= { scale: 1 }

Configuration options for the metric

### BiasMetricOptions[](https://mastra.ai/docs/reference/evals/bias#biasmetricoptions)

### scale?:

number

\= 1

Maximum score value

measure() Parameters[](https://mastra.ai/docs/reference/evals/bias#measure-parameters)
--------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/bias#returns)
--------------------------------------------------------------

### score:

number

Bias score (0 to scale, default 0-1). Higher scores indicate more bias

### info:

object

Object containing the reason for the score

string

### reason:

string

Explanation of the score

Bias Categories[](https://mastra.ai/docs/reference/evals/bias#bias-categories)
------------------------------------------------------------------------------

The metric evaluates several types of bias:

1.  **Gender Bias**: Discrimination or stereotypes based on gender
2.  **Political Bias**: Prejudice against political ideologies or beliefs
3.  **Racial/Ethnic Bias**: Discrimination based on race, ethnicity, or national origin
4.  **Geographical Bias**: Prejudice based on location or regional stereotypes

Scoring Details[](https://mastra.ai/docs/reference/evals/bias#scoring-details)
------------------------------------------------------------------------------

The metric evaluates bias through opinion analysis based on:

*   Opinion identification and extraction
*   Presence of discriminatory language
*   Use of stereotypes or generalizations
*   Balance in perspective presentation
*   Loaded or prejudicial terminology

### Scoring Process[](https://mastra.ai/docs/reference/evals/bias#scoring-process)

1.  Extracts opinions from text:
    
    *   Identifies subjective statements
    *   Excludes factual claims
    *   Includes cited opinions
2.  Evaluates each opinion:
    
    *   Checks for discriminatory language
    *   Assesses stereotypes and generalizations
    *   Analyzes perspective balance

Final score: `(biased_opinions / total_opinions) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/bias#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Complete bias - all opinions contain bias
*   0.7-0.9: Significant bias - majority of opinions show bias
*   0.4-0.6: Moderate bias - mix of biased and neutral opinions
*   0.1-0.3: Minimal bias - most opinions show balanced perspective
*   0.0: No detectable bias - opinions are balanced and neutral

Example with Different Types of Bias[](https://mastra.ai/docs/reference/evals/bias#example-with-different-types-of-bias)
------------------------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { BiasMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new BiasMetric(model);
 
// Testing for different types of bias
const results = await Promise.all([
  metric.measure(
    "Describe voting patterns",
    "These radical right-wing voters consistently vote against their interests..."
  ),
  metric.measure(
    "Describe workplace dynamics",
    "Modern offices have diverse teams working together based on merit..."
  )
]);
 
// Example outputs:
// Political bias example: { score: 1.0 }
// Unbiased example: { score: 0.0 }
```

Related[](https://mastra.ai/docs/reference/evals/bias#related)
--------------------------------------------------------------

*   [Toxicity Metric](https://mastra.ai/docs/reference/evals/toxicity)
*   [Faithfulness Metric](https://mastra.ai/docs/reference/evals/faithfulness)
*   [Hallucination Metric](https://mastra.ai/docs/reference/evals/hallucination)
*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy "AnswerRelevancy")[Completeness](https://mastra.ai/docs/reference/evals/completeness "Completeness")



================================================================================
Section 91: Content from https://mastra.ai/docs/reference/evals/completeness
================================================================================

Title: Reference: Completeness | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/completeness

Markdown Content:
Reference: Completeness | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[CompletenessMetric](https://mastra.ai/docs/reference/evals/completeness#)[Basic Usage](https://mastra.ai/docs/reference/evals/completeness#basic-usage)[measure() Parameters](https://mastra.ai/docs/reference/evals/completeness#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/completeness#returns)[Element Extraction Details](https://mastra.ai/docs/reference/evals/completeness#element-extraction-details)[Scoring Details](https://mastra.ai/docs/reference/evals/completeness#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/completeness#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/completeness#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/completeness#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/completeness#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/completeness.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Completeness

CompletenessMetric
==================

The `CompletenessMetric` class evaluates how thoroughly an LLM’s output covers the key elements present in the input. It analyzes nouns, verbs, topics, and terms to determine coverage and provides a detailed completeness score.

Basic Usage[](https://mastra.ai/docs/reference/evals/completeness#basic-usage)
------------------------------------------------------------------------------

```
import { CompletenessMetric } from "@mastra/evals/nlp";
 
const metric = new CompletenessMetric();
 
const result = await metric.measure(
  "Explain how photosynthesis works in plants using sunlight, water, and carbon dioxide.",
  "Plants use sunlight to convert water and carbon dioxide into glucose through photosynthesis."
);
 
console.log(result.score); // Coverage score from 0-1
console.log(result.info); // Object containing detailed metrics about element coverage
```

measure() Parameters[](https://mastra.ai/docs/reference/evals/completeness#measure-parameters)
----------------------------------------------------------------------------------------------

### input:

string

The original text containing key elements to be covered

### output:

string

The LLM's response to evaluate for completeness

Returns[](https://mastra.ai/docs/reference/evals/completeness#returns)
----------------------------------------------------------------------

### score:

number

Completeness score (0-1) representing the proportion of input elements covered in the output

### info:

object

Object containing detailed metrics about element coverage

string\[\]

### inputElements:

string\[\]

Array of key elements extracted from the input

string\[\]

### outputElements:

string\[\]

Array of key elements found in the output

string\[\]

### missingElements:

string\[\]

Array of input elements not found in the output

object

### elementCounts:

object

Count of elements in input and output

Element Extraction Details[](https://mastra.ai/docs/reference/evals/completeness#element-extraction-details)
------------------------------------------------------------------------------------------------------------

The metric extracts and analyzes several types of elements:

*   Nouns: Key objects, concepts, and entities
*   Verbs: Actions and states (converted to infinitive form)
*   Topics: Main subjects and themes
*   Terms: Individual significant words

The extraction process includes:

*   Normalization of text (removing diacritics, converting to lowercase)
*   Splitting camelCase words
*   Handling of word boundaries
*   Special handling of short words (3 characters or less)
*   Deduplication of elements

Scoring Details[](https://mastra.ai/docs/reference/evals/completeness#scoring-details)
--------------------------------------------------------------------------------------

The metric evaluates completeness through linguistic element coverage analysis.

### Scoring Process[](https://mastra.ai/docs/reference/evals/completeness#scoring-process)

1.  Extracts key elements:
    
    *   Nouns and named entities
    *   Action verbs
    *   Topic-specific terms
    *   Normalized word forms
2.  Calculates coverage of input elements:
    
    *   Exact matches for short terms (≤3 chars)
    *   Substantial overlap (\>60%) for longer terms

Final score: `(covered_elements / total_input_elements) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/completeness#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Complete coverage - contains all input elements
*   0.7-0.9: High coverage - includes most key elements
*   0.4-0.6: Partial coverage - contains some key elements
*   0.1-0.3: Low coverage - missing most key elements
*   0.0: No coverage - output lacks all input elements

Example with Analysis[](https://mastra.ai/docs/reference/evals/completeness#example-with-analysis)
--------------------------------------------------------------------------------------------------

```
import { CompletenessMetric } from "@mastra/evals/nlp";
 
const metric = new CompletenessMetric();
 
const result = await metric.measure(
  "The quick brown fox jumps over the lazy dog",
  "A brown fox jumped over a dog"
);
 
// Example output:
// {
//   score: 0.75,
//   info: {
//     inputElements: ["quick", "brown", "fox", "jump", "lazy", "dog"],
//     outputElements: ["brown", "fox", "jump", "dog"],
//     missingElements: ["quick", "lazy"],
//     elementCounts: { input: 6, output: 4 }
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/completeness#related)
----------------------------------------------------------------------

*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Content Similarity Metric](https://mastra.ai/docs/reference/evals/content-similarity)
*   [Textual Difference Metric](https://mastra.ai/docs/reference/evals/textual-difference)
*   [Keyword Coverage Metric](https://mastra.ai/docs/reference/evals/keyword-coverage)

Last updated on February 25, 2025

[Bias](https://mastra.ai/docs/reference/evals/bias "Bias")[ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity "ContentSimilarity")



================================================================================
Section 92: Content from https://mastra.ai/docs/reference/evals/content-similarity
================================================================================

Title: Reference: Content Similarity | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/content-similarity

Markdown Content:
Reference: Content Similarity | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ContentSimilarityMetric](https://mastra.ai/docs/reference/evals/content-similarity#)[Basic Usage](https://mastra.ai/docs/reference/evals/content-similarity#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/content-similarity#constructor-parameters)[ContentSimilarityOptions](https://mastra.ai/docs/reference/evals/content-similarity#contentsimilarityoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/content-similarity#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/content-similarity#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/content-similarity#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/content-similarity#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/content-similarity#score-interpretation)[Example with Different Options](https://mastra.ai/docs/reference/evals/content-similarity#example-with-different-options)[Related](https://mastra.ai/docs/reference/evals/content-similarity#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/content-similarity.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ContentSimilarity

ContentSimilarityMetric
=======================

The `ContentSimilarityMetric` class measures the textual similarity between two strings, providing a score that indicates how closely they match. It supports configurable options for case sensitivity and whitespace handling.

Basic Usage[](https://mastra.ai/docs/reference/evals/content-similarity#basic-usage)
------------------------------------------------------------------------------------

```
import { ContentSimilarityMetric } from "@mastra/evals/nlp";
 
const metric = new ContentSimilarityMetric({
  ignoreCase: true,
  ignoreWhitespace: true
});
 
const result = await metric.measure(
  "Hello, world!",
  "hello world"
);
 
console.log(result.score); // Similarity score from 0-1
console.log(result.info); // Detailed similarity metrics
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/content-similarity#constructor-parameters)
----------------------------------------------------------------------------------------------------------

### options?:

ContentSimilarityOptions

\= { ignoreCase: true, ignoreWhitespace: true }

Configuration options for similarity comparison

### ContentSimilarityOptions[](https://mastra.ai/docs/reference/evals/content-similarity#contentsimilarityoptions)

### ignoreCase?:

boolean

\= true

Whether to ignore case differences when comparing strings

### ignoreWhitespace?:

boolean

\= true

Whether to normalize whitespace when comparing strings

measure() Parameters[](https://mastra.ai/docs/reference/evals/content-similarity#measure-parameters)
----------------------------------------------------------------------------------------------------

### input:

string

The reference text to compare against

### output:

string

The text to evaluate for similarity

Returns[](https://mastra.ai/docs/reference/evals/content-similarity#returns)
----------------------------------------------------------------------------

### score:

number

Similarity score (0-1) where 1 indicates perfect similarity

### info:

object

Detailed similarity metrics

number

### similarity:

number

Raw similarity score between the two texts

Scoring Details[](https://mastra.ai/docs/reference/evals/content-similarity#scoring-details)
--------------------------------------------------------------------------------------------

The metric evaluates textual similarity through character-level matching and configurable text normalization.

### Scoring Process[](https://mastra.ai/docs/reference/evals/content-similarity#scoring-process)

1.  Normalizes text:
    
    *   Case normalization (if ignoreCase: true)
    *   Whitespace normalization (if ignoreWhitespace: true)
2.  Compares processed strings using string-similarity algorithm:
    
    *   Analyzes character sequences
    *   Aligns word boundaries
    *   Considers relative positions
    *   Accounts for length differences

Final score: `similarity_value * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/content-similarity#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect match - identical texts
*   0.7-0.9: High similarity - mostly matching content
*   0.4-0.6: Moderate similarity - partial matches
*   0.1-0.3: Low similarity - few matching patterns
*   0.0: No similarity - completely different texts

Example with Different Options[](https://mastra.ai/docs/reference/evals/content-similarity#example-with-different-options)
--------------------------------------------------------------------------------------------------------------------------

```
import { ContentSimilarityMetric } from "@mastra/evals/nlp";
 
// Case-sensitive comparison
const caseSensitiveMetric = new ContentSimilarityMetric({
  ignoreCase: false,
  ignoreWhitespace: true
});
 
const result1 = await caseSensitiveMetric.measure(
  "Hello World",
  "hello world"
); // Lower score due to case difference
 
// Example output:
// {
//   score: 0.75,
//   info: { similarity: 0.75 }
// }
 
// Strict whitespace comparison
const strictWhitespaceMetric = new ContentSimilarityMetric({
  ignoreCase: true,
  ignoreWhitespace: false
});
 
const result2 = await strictWhitespaceMetric.measure(
  "Hello   World",
  "Hello World"
); // Lower score due to whitespace difference
 
// Example output:
// {
//   score: 0.85,
//   info: { similarity: 0.85 }
// }
```

Related[](https://mastra.ai/docs/reference/evals/content-similarity#related)
----------------------------------------------------------------------------

*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Textual Difference Metric](https://mastra.ai/docs/reference/evals/textual-difference)
*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Keyword Coverage Metric](https://mastra.ai/docs/reference/evals/keyword-coverage)

Last updated on February 25, 2025

[Completeness](https://mastra.ai/docs/reference/evals/completeness "Completeness")[ContextPosition](https://mastra.ai/docs/reference/evals/context-position "ContextPosition")



================================================================================
Section 93: Content from https://mastra.ai/docs/reference/evals/context-position
================================================================================

Title: Reference: Context Position | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/context-position

Markdown Content:
Reference: Context Position | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ContextPositionMetric](https://mastra.ai/docs/reference/evals/context-position#)[Basic Usage](https://mastra.ai/docs/reference/evals/context-position#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/context-position#constructor-parameters)[ContextPositionMetricOptions](https://mastra.ai/docs/reference/evals/context-position#contextpositionmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/context-position#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/context-position#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/context-position#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/context-position#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/context-position#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/context-position#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/context-position#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/context-position.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ContextPosition

ContextPositionMetric
=====================

The `ContextPositionMetric` class evaluates how well context nodes are ordered based on their relevance to the query and output. It uses position-weighted scoring to emphasize the importance of having the most relevant context pieces appear earlier in the sequence.

Basic Usage[](https://mastra.ai/docs/reference/evals/context-position#basic-usage)
----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextPositionMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextPositionMetric(model, {
  context: [
    "Photosynthesis is a biological process used by plants to create energy from sunlight.",
    "The process of photosynthesis produces oxygen as a byproduct.",
    "Plants need water and nutrients from the soil to grow.",
  ],
});
 
const result = await metric.measure(
  "What is photosynthesis?",
  "Photosynthesis is the process by which plants convert sunlight into energy.",
);
 
console.log(result.score); // Position score from 0-1
console.log(result.info.reason); // Explanation of the score
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/context-position#constructor-parameters)
--------------------------------------------------------------------------------------------------------

### model:

ModelConfig

Configuration for the model used to evaluate context positioning

### options:

ContextPositionMetricOptions

Configuration options for the metric

### ContextPositionMetricOptions[](https://mastra.ai/docs/reference/evals/context-position#contextpositionmetricoptions)

### scale?:

number

\= 1

Maximum score value

### context:

string\[\]

Array of context pieces in their retrieval order

measure() Parameters[](https://mastra.ai/docs/reference/evals/context-position#measure-parameters)
--------------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The generated response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/context-position#returns)
--------------------------------------------------------------------------

### score:

number

Position score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Detailed explanation of the score

Scoring Details[](https://mastra.ai/docs/reference/evals/context-position#scoring-details)
------------------------------------------------------------------------------------------

The metric evaluates context positioning through binary relevance assessment and position-based weighting.

### Scoring Process[](https://mastra.ai/docs/reference/evals/context-position#scoring-process)

1.  Evaluates context relevance:
    
    *   Assigns binary verdict (yes/no) to each piece
    *   Records position in sequence
    *   Documents relevance reasoning
2.  Applies position weights:
    
    *   Earlier positions weighted more heavily (weight = 1/(position + 1))
    *   Sums weights of relevant pieces
    *   Normalizes by maximum possible score

Final score: `(weighted_sum / max_possible_sum) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/context-position#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Optimal - most relevant context first
*   0.7-0.9: Good - relevant context mostly early
*   0.4-0.6: Mixed - relevant context scattered
*   0.1-0.3: Suboptimal - relevant context mostly later
*   0.0: Poor ordering - relevant context at end or missing

Example with Analysis[](https://mastra.ai/docs/reference/evals/context-position#example-with-analysis)
------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextPositionMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextPositionMetric(model, {
  context: [
    "A balanced diet is important for health.",
    "Exercise strengthens the heart and improves blood circulation.",
    "Regular physical activity reduces stress and anxiety.",
    "Exercise equipment can be expensive.",
  ],
});
 
const result = await metric.measure(
  "What are the benefits of exercise?",
  "Regular exercise improves cardiovascular health and mental wellbeing.",
);
 
// Example output:
// {
//   score: 0.5,
//   info: {
//     reason: "The score is 0.5 because while the second and third contexts are highly
//           relevant to the benefits of exercise, they are not optimally positioned at
//           the beginning of the sequence. The first and last contexts are not relevant
//           to the query, which impacts the position-weighted scoring."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/context-position#related)
--------------------------------------------------------------------------

*   [Context Precision Metric](https://mastra.ai/docs/reference/evals/context-precision)
*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)

*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity "ContentSimilarity")[ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision "ContextPrecision")



================================================================================
Section 94: Content from https://mastra.ai/docs/reference/evals/context-precision
================================================================================

Title: Reference: Context Precision | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/context-precision

Markdown Content:
Reference: Context Precision | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ContextPrecisionMetric](https://mastra.ai/docs/reference/evals/context-precision#)[Basic Usage](https://mastra.ai/docs/reference/evals/context-precision#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/context-precision#constructor-parameters)[ContextPrecisionMetricOptions](https://mastra.ai/docs/reference/evals/context-precision#contextprecisionmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/context-precision#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/context-precision#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/context-precision#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/context-precision#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/context-precision#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/context-precision#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/context-precision#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/context-precision.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ContextPrecision

ContextPrecisionMetric
======================

The `ContextPrecisionMetric` class evaluates how relevant and precise the retrieved context nodes are for generating the expected output. It uses a judge-based system to analyze each context piece’s contribution and provides weighted scoring based on position.

Basic Usage[](https://mastra.ai/docs/reference/evals/context-precision#basic-usage)
-----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextPrecisionMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextPrecisionMetric(model, {
  context: [
    "Photosynthesis is a biological process used by plants to create energy from sunlight.",
    "Plants need water and nutrients from the soil to grow.",
    "The process of photosynthesis produces oxygen as a byproduct.",
  ],
});
 
const result = await metric.measure(
  "What is photosynthesis?",
  "Photosynthesis is the process by which plants convert sunlight into energy.",
);
 
console.log(result.score); // Precision score from 0-1
console.log(result.info.reason); // Explanation of the score
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/context-precision#constructor-parameters)
---------------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate context relevance

### options:

ContextPrecisionMetricOptions

Configuration options for the metric

### ContextPrecisionMetricOptions[](https://mastra.ai/docs/reference/evals/context-precision#contextprecisionmetricoptions)

### scale?:

number

\= 1

Maximum score value

### context:

string\[\]

Array of context pieces in their retrieval order

measure() Parameters[](https://mastra.ai/docs/reference/evals/context-precision#measure-parameters)
---------------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The generated response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/context-precision#returns)
---------------------------------------------------------------------------

### score:

number

Precision score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Detailed explanation of the score

Scoring Details[](https://mastra.ai/docs/reference/evals/context-precision#scoring-details)
-------------------------------------------------------------------------------------------

The metric evaluates context precision through binary relevance assessment and Mean Average Precision (MAP) scoring.

### Scoring Process[](https://mastra.ai/docs/reference/evals/context-precision#scoring-process)

1.  Assigns binary relevance scores:
    
    *   Relevant context: 1
    *   Irrelevant context: 0
2.  Calculates Mean Average Precision:
    
    *   Computes precision at each position
    *   Weights earlier positions more heavily
    *   Normalizes to configured scale

Final score: `Mean Average Precision * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/context-precision#score-interpretation)

(0 to scale, default 0-1)

*   1.0: All relevant context in optimal order
*   0.7-0.9: Mostly relevant context with good ordering
*   0.4-0.6: Mixed relevance or suboptimal ordering
*   0.1-0.3: Limited relevance or poor ordering
*   0.0: No relevant context

Example with Analysis[](https://mastra.ai/docs/reference/evals/context-precision#example-with-analysis)
-------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextPrecisionMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextPrecisionMetric(model, {
  context: [
    "Exercise strengthens the heart and improves blood circulation.",
    "A balanced diet is important for health.",
    "Regular physical activity reduces stress and anxiety.",
    "Exercise equipment can be expensive.",
  ],
});
 
const result = await metric.measure(
  "What are the benefits of exercise?",
  "Regular exercise improves cardiovascular health and mental wellbeing.",
);
 
// Example output:
// {
//   score: 0.75,
//   info: {
//     reason: "The score is 0.75 because the first and third contexts are highly relevant
//           to the benefits mentioned in the output, while the second and fourth contexts
//           are not directly related to exercise benefits. The relevant contexts are well-positioned
//           at the beginning and middle of the sequence."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/context-precision#related)
---------------------------------------------------------------------------

*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Context Position Metric](https://mastra.ai/docs/reference/evals/context-position)
*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[ContextPosition](https://mastra.ai/docs/reference/evals/context-position "ContextPosition")[ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy "ContextRelevancy")



================================================================================
Section 95: Content from https://mastra.ai/docs/reference/evals/context-relevancy
================================================================================

Title: Reference: Context Relevancy | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/context-relevancy

Markdown Content:
Reference: Context Relevancy | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ContextRelevancyMetric](https://mastra.ai/docs/reference/evals/context-relevancy#)[Basic Usage](https://mastra.ai/docs/reference/evals/context-relevancy#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/context-relevancy#constructor-parameters)[ContextRelevancyMetricOptions](https://mastra.ai/docs/reference/evals/context-relevancy#contextrelevancymetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/context-relevancy#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/context-relevancy#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/context-relevancy#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/context-relevancy#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/context-relevancy#score-interpretation)[Example with Custom Configuration](https://mastra.ai/docs/reference/evals/context-relevancy#example-with-custom-configuration)[Related](https://mastra.ai/docs/reference/evals/context-relevancy#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/context-relevancy.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ContextRelevancy

ContextRelevancyMetric
======================

The `ContextRelevancyMetric` class evaluates the quality of your RAG (Retrieval-Augmented Generation) pipeline’s retriever by measuring how relevant the retrieved context is to the input query. It uses an LLM-based evaluation system that first extracts statements from the context and then assesses their relevance to the input.

Basic Usage[](https://mastra.ai/docs/reference/evals/context-relevancy#basic-usage)
-----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextRelevancyMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextRelevancyMetric(model, {
  context: [
    "All data is encrypted at rest and in transit",
    "Two-factor authentication is mandatory",
    "The platform supports multiple languages",
    "Our offices are located in San Francisco"
  ]
});
 
const result = await metric.measure(
  "What are our product's security features?",
  "Our product uses encryption and requires 2FA.",
  );
 
console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the relevancy assessment
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/context-relevancy#constructor-parameters)
---------------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate context relevancy

### options:

ContextRelevancyMetricOptions

Configuration options for the metric

### ContextRelevancyMetricOptions[](https://mastra.ai/docs/reference/evals/context-relevancy#contextrelevancymetricoptions)

### scale?:

number

\= 1

Maximum score value

### context:

string\[\]

Array of retrieved context documents used to generate the response

measure() Parameters[](https://mastra.ai/docs/reference/evals/context-relevancy#measure-parameters)
---------------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/context-relevancy#returns)
---------------------------------------------------------------------------

### score:

number

Context relevancy score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Detailed explanation of the relevancy assessment

Scoring Details[](https://mastra.ai/docs/reference/evals/context-relevancy#scoring-details)
-------------------------------------------------------------------------------------------

The metric evaluates how well retrieved context matches the query through binary relevance classification.

### Scoring Process[](https://mastra.ai/docs/reference/evals/context-relevancy#scoring-process)

1.  Extracts statements from context:
    
    *   Breaks down context into meaningful units
    *   Preserves semantic relationships
2.  Evaluates statement relevance:
    
    *   Assesses each statement against query
    *   Counts relevant statements
    *   Calculates relevance ratio

Final score: `(relevant_statements / total_statements) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/context-relevancy#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect relevancy - all retrieved context is relevant
*   0.7-0.9: High relevancy - most context is relevant with few irrelevant pieces
*   0.4-0.6: Moderate relevancy - a mix of relevant and irrelevant context
*   0.1-0.3: Low relevancy - mostly irrelevant context
*   0.0: No relevancy - completely irrelevant context

Example with Custom Configuration[](https://mastra.ai/docs/reference/evals/context-relevancy#example-with-custom-configuration)
-------------------------------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextRelevancyMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextRelevancyMetric(model, {
  scale: 100, // Use 0-100 scale instead of 0-1
  context: [
    "Basic plan costs $10/month",
    "Pro plan includes advanced features at $30/month",
    "Enterprise plan has custom pricing",
    "Our company was founded in 2020",
    "We have offices worldwide"
  ]
});
 
const result = await metric.measure(
  "What are our pricing plans?",
  "We offer Basic, Pro, and Enterprise plans.",
);
 
// Example output:
// {
//   score: 60,
//   info: {
//     reason: "3 out of 5 statements are relevant to pricing plans. The statements about 
//           company founding and office locations are not relevant to the pricing query."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/context-relevancy#related)
---------------------------------------------------------------------------

*   [Contextual Recall Metric](https://mastra.ai/docs/reference/evals/contextual-recall)
*   [Context Precision Metric](https://mastra.ai/docs/reference/evals/context-precision)
*   [Context Position Metric](https://mastra.ai/docs/reference/evals/context-position)

Last updated on February 25, 2025

[ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision "ContextPrecision")[ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall "ContextualRecall")



================================================================================
Section 96: Content from https://mastra.ai/docs/reference/evals/contextual-recall
================================================================================

Title: Reference: Contextual Recall | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/contextual-recall

Markdown Content:
Reference: Contextual Recall | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ContextualRecallMetric](https://mastra.ai/docs/reference/evals/contextual-recall#)[Basic Usage](https://mastra.ai/docs/reference/evals/contextual-recall#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/contextual-recall#constructor-parameters)[ContextualRecallMetricOptions](https://mastra.ai/docs/reference/evals/contextual-recall#contextualrecallmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/contextual-recall#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/contextual-recall#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/contextual-recall#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/contextual-recall#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/contextual-recall#score-interpretation)[Example with Custom Configuration](https://mastra.ai/docs/reference/evals/contextual-recall#example-with-custom-configuration)[Related](https://mastra.ai/docs/reference/evals/contextual-recall#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/contextual-recall.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ContextualRecall

ContextualRecallMetric
======================

The `ContextualRecallMetric` class evaluates how effectively an LLM’s response incorporates all relevant information from the provided context. It measures whether important information from the reference documents was successfully included in the response, focusing on completeness rather than precision.

Basic Usage[](https://mastra.ai/docs/reference/evals/contextual-recall#basic-usage)
-----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextualRecallMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextualRecallMetric(model, {
  context: [
    "Product features: cloud synchronization capability",
    "Offline mode available for all users",
    "Supports multiple devices simultaneously",
    "End-to-end encryption for all data"
  ]
});
 
const result = await metric.measure(
  "What are the key features of the product?",
  "The product includes cloud sync, offline mode, and multi-device support.",
);
 
console.log(result.score); // Score from 0-1
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/contextual-recall#constructor-parameters)
---------------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate contextual recall

### options:

ContextualRecallMetricOptions

Configuration options for the metric

### ContextualRecallMetricOptions[](https://mastra.ai/docs/reference/evals/contextual-recall#contextualrecallmetricoptions)

### scale?:

number

\= 1

Maximum score value

### context:

string\[\]

Array of reference documents or pieces of information to check against

measure() Parameters[](https://mastra.ai/docs/reference/evals/contextual-recall#measure-parameters)
---------------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/contextual-recall#returns)
---------------------------------------------------------------------------

### score:

number

Recall score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Detailed explanation of the score

Scoring Details[](https://mastra.ai/docs/reference/evals/contextual-recall#scoring-details)
-------------------------------------------------------------------------------------------

The metric evaluates recall through comparison of response content against relevant context items.

### Scoring Process[](https://mastra.ai/docs/reference/evals/contextual-recall#scoring-process)

1.  Evaluates information recall:
    
    *   Identifies relevant items in context
    *   Tracks correctly recalled information
    *   Measures completeness of recall
2.  Calculates recall score:
    
    *   Counts correctly recalled items
    *   Compares against total relevant items
    *   Computes coverage ratio

Final score: `(correctly_recalled_items / total_relevant_items) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/contextual-recall#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect recall - all relevant information included
*   0.7-0.9: High recall - most relevant information included
*   0.4-0.6: Moderate recall - some relevant information missed
*   0.1-0.3: Low recall - significant information missed
*   0.0: No recall - no relevant information included

Example with Custom Configuration[](https://mastra.ai/docs/reference/evals/contextual-recall#example-with-custom-configuration)
-------------------------------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ContextualRecallMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ContextualRecallMetric(
  model,
  {
    scale: 100, // Use 0-100 scale instead of 0-1
    context: [
      "All data is encrypted at rest and in transit",
      "Two-factor authentication (2FA) is mandatory",
      "Regular security audits are performed",
      "Incident response team available 24/7"
    ]
  }
);
 
const result = await metric.measure(
  "Summarize the company's security measures",
  "The company implements encryption for data protection and requires 2FA for all users.",
);
 
// Example output:
// {
//   score: 50, // Only half of the security measures were mentioned
//   info: {
//     reason: "The score is 50 because only half of the security measures were mentioned 
//           in the response. The response missed the regular security audits and incident 
//           response team information."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/contextual-recall#related)
---------------------------------------------------------------------------

*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)
*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Summarization Metric](https://mastra.ai/docs/reference/evals/summarization)

Last updated on February 25, 2025

[ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy "ContextRelevancy")[Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness "Faithfulness")



================================================================================
Section 97: Content from https://mastra.ai/docs/reference/evals/faithfulness
================================================================================

Title: Reference: Faithfulness | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/faithfulness

Markdown Content:
Reference: Faithfulness | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[FaithfulnessMetric Reference](https://mastra.ai/docs/reference/evals/faithfulness#)[Basic Usage](https://mastra.ai/docs/reference/evals/faithfulness#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/faithfulness#constructor-parameters)[FaithfulnessMetricOptions](https://mastra.ai/docs/reference/evals/faithfulness#faithfulnessmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/faithfulness#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/faithfulness#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/faithfulness#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/faithfulness#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/faithfulness#score-interpretation)[Advanced Example](https://mastra.ai/docs/reference/evals/faithfulness#advanced-example)[Related](https://mastra.ai/docs/reference/evals/faithfulness#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/faithfulness.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Faithfulness

FaithfulnessMetric Reference
============================

The `FaithfulnessMetric` in Mastra evaluates how factually accurate an LLM’s output is compared to the provided context. It extracts claims from the output and verifies them against the context, making it essential to measure RAG pipeline responses’ reliability.

Basic Usage[](https://mastra.ai/docs/reference/evals/faithfulness#basic-usage)
------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { FaithfulnessMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new FaithfulnessMetric(model, {
  context: [
    "The company was established in 1995.",
    "Currently employs around 450-550 people.",
  ],
});
 
const result = await metric.measure(
  "Tell me about the company.",
  "The company was founded in 1995 and has 500 employees.",
);
 
console.log(result.score); // 1.0
console.log(result.info.reason); // "All claims are supported by the context."
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/faithfulness#constructor-parameters)
----------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate faithfulness.

### options:

FaithfulnessMetricOptions

Additional options for configuring the metric.

### FaithfulnessMetricOptions[](https://mastra.ai/docs/reference/evals/faithfulness#faithfulnessmetricoptions)

### scale:

number

\= 1

The maximum score value. The final score will be normalized to this scale.

### context:

string\[\]

Array of context chunks against which the output's claims will be verified.

measure() Parameters[](https://mastra.ai/docs/reference/evals/faithfulness#measure-parameters)
----------------------------------------------------------------------------------------------

### input:

string

The original query or prompt given to the LLM.

### output:

string

The LLM's response to be evaluated for faithfulness.

Returns[](https://mastra.ai/docs/reference/evals/faithfulness#returns)
----------------------------------------------------------------------

### score:

number

A score between 0 and the configured scale, representing the proportion of claims that are supported by the context.

### info:

object

Object containing the reason for the score

string

### reason:

string

A detailed explanation of the score, including which claims were supported, contradicted, or marked as unsure.

Scoring Details[](https://mastra.ai/docs/reference/evals/faithfulness#scoring-details)
--------------------------------------------------------------------------------------

The metric evaluates faithfulness through claim verification against provided context.

### Scoring Process[](https://mastra.ai/docs/reference/evals/faithfulness#scoring-process)

1.  Analyzes claims and context:
    
    *   Extracts all claims (factual and speculative)
    *   Verifies each claim against context
    *   Assigns one of three verdicts:
        *   “yes” - claim supported by context
        *   “no” - claim contradicts context
        *   “unsure” - claim unverifiable
2.  Calculates faithfulness score:
    
    *   Counts supported claims
    *   Divides by total claims
    *   Scales to configured range

Final score: `(supported_claims / total_claims) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/faithfulness#score-interpretation)

(0 to scale, default 0-1)

*   1.0: All claims supported by context
*   0.7-0.9: Most claims supported, few unverifiable
*   0.4-0.6: Mixed support with some contradictions
*   0.1-0.3: Limited support, many contradictions
*   0.0: No supported claims

Advanced Example[](https://mastra.ai/docs/reference/evals/faithfulness#advanced-example)
----------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { FaithfulnessMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new FaithfulnessMetric(model, {
  context: [
    "The company had 100 employees in 2020.",
    "Current employee count is approximately 500.",
  ],
});
 
// Example with mixed claim types
const result = await metric.measure(
  "What's the company's growth like?",
  "The company has grown from 100 employees in 2020 to 500 now, and might expand to 1000 by next year.",
);
 
// Example output:
// {
//   score: 0.67,
//   info: {
//     reason: "The score is 0.67 because two claims are supported by the context
//           (initial employee count of 100 in 2020 and current count of 500),
//           while the future expansion claim is marked as unsure as it cannot
//           be verified against the context."
//   }
// }
```

### Related[](https://mastra.ai/docs/reference/evals/faithfulness#related)

*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Hallucination Metric](https://mastra.ai/docs/reference/evals/hallucination)
*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall "ContextualRecall")[Hallucination](https://mastra.ai/docs/reference/evals/hallucination "Hallucination")



================================================================================
Section 98: Content from https://mastra.ai/docs/reference/evals/hallucination
================================================================================

Title: Reference: Hallucination | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/hallucination

Markdown Content:
Reference: Hallucination | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[HallucinationMetric](https://mastra.ai/docs/reference/evals/hallucination#)[Basic Usage](https://mastra.ai/docs/reference/evals/hallucination#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/hallucination#constructor-parameters)[HallucinationMetricOptions](https://mastra.ai/docs/reference/evals/hallucination#hallucinationmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/hallucination#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/hallucination#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/hallucination#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/hallucination#scoring-process)[Important Considerations](https://mastra.ai/docs/reference/evals/hallucination#important-considerations)[Score interpretation](https://mastra.ai/docs/reference/evals/hallucination#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/hallucination#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/hallucination#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/hallucination.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Hallucination

HallucinationMetric
===================

The `HallucinationMetric` evaluates whether an LLM generates factually correct information by comparing its output against the provided context. This metric measures hallucination by identifying direct contradictions between the context and the output.

Basic Usage[](https://mastra.ai/docs/reference/evals/hallucination#basic-usage)
-------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { HallucinationMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new HallucinationMetric(model, {
  context: [
    "Tesla was founded in 2003 by Martin Eberhard and Marc Tarpenning in San Carlos, California.",
  ],
});
 
const result = await metric.measure(
  "Tell me about Tesla's founding.",
  "Tesla was founded in 2004 by Elon Musk in California.",
);
 
console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the score
 
// Example output:
// {
//   score: 0.67,
//   info: {
//     reason: "The score is 0.67 because two out of three statements from the context
//           (founding year and founders) were contradicted by the output, while the
//           location statement was not contradicted."
//   }
// }
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/hallucination#constructor-parameters)
-----------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate hallucination

### options:

HallucinationMetricOptions

Configuration options for the metric

### HallucinationMetricOptions[](https://mastra.ai/docs/reference/evals/hallucination#hallucinationmetricoptions)

### scale?:

number

\= 1

Maximum score value

### context:

string\[\]

Array of context pieces used as the source of truth

measure() Parameters[](https://mastra.ai/docs/reference/evals/hallucination#measure-parameters)
-----------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/hallucination#returns)
-----------------------------------------------------------------------

### score:

number

Hallucination score (0 to scale, default 0-1)

### info:

object

Object containing the reason for the score

string

### reason:

string

Detailed explanation of the score and identified contradictions

Scoring Details[](https://mastra.ai/docs/reference/evals/hallucination#scoring-details)
---------------------------------------------------------------------------------------

The metric evaluates hallucination through contradiction detection and numerical precision analysis.

### Scoring Process[](https://mastra.ai/docs/reference/evals/hallucination#scoring-process)

1.  Analyzes factual content:
    
    *   Extracts statements from context
    *   Identifies numerical values
    *   Maps statement relationships
2.  Analyzes output for contradictions:
    
    *   Compares against context statements
    *   Marks direct conflicts as contradictions
    *   Evaluates numerical accuracy
    *   Considers approximation context
3.  Calculates hallucination score:
    
    *   Counts contradicted statements
    *   Divides by total statements
    *   Scales to configured range

Final score: `(contradicted_statements / total_statements) * scale`

### Important Considerations[](https://mastra.ai/docs/reference/evals/hallucination#important-considerations)

*   Speculative language (“might”, “possibly”, “believe”) does not constitute contradictions
*   Additional information beyond context scope is allowed unless it directly conflicts
*   Empty outputs result in zero contradictions
*   Numerical evaluation considers:
    *   Scale-appropriate precision
    *   Contextual approximations
    *   Explicit precision indicators

### Score interpretation[](https://mastra.ai/docs/reference/evals/hallucination#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Complete hallucination - contradicts all context statements
*   0.75: High hallucination - contradicts 75% of context statements
*   0.5: Moderate hallucination - contradicts half of context statements
*   0.25: Low hallucination - contradicts 25% of context statements
*   0.0: No hallucination - output aligns with all context statements

**Note:** The score represents the degree of hallucination - lower scores indicate better factual alignment with the provided context

Example with Analysis[](https://mastra.ai/docs/reference/evals/hallucination#example-with-analysis)
---------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { HallucinationMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new HallucinationMetric(model, {
  context: [
    "OpenAI was founded in December 2015 by Sam Altman, Greg Brockman, and others.",
    "The company launched with a $1 billion investment commitment.",
    "Elon Musk was an early supporter but left the board in 2018.",
  ],
});
 
const result = await metric.measure({
  input: "What are the key details about OpenAI?",
  output:
    "OpenAI was founded in 2015 by Elon Musk and Sam Altman with a $2 billion investment.",
});
 
// Example output:
// {
//   score: 0.33,
//   info: {
//     reason: "The score is 0.33 because one out of three statements from the context
//           was contradicted (the investment amount was stated as $2 billion instead
//           of $1 billion). The founding date was correct, and while the output's
//           description of founders was incomplete, it wasn't strictly contradictory."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/hallucination#related)
-----------------------------------------------------------------------

*   [Faithfulness Metric](https://mastra.ai/docs/reference/evals/faithfulness)
*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Context Precision Metric](https://mastra.ai/docs/reference/evals/context-precision)
*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness "Faithfulness")[KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage "KeywordCoverage")



================================================================================
Section 99: Content from https://mastra.ai/docs/reference/evals/keyword-coverage
================================================================================

Title: Reference: Keyword Coverage | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/keyword-coverage

Markdown Content:
Reference: Keyword Coverage | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[KeywordCoverageMetric](https://mastra.ai/docs/reference/evals/keyword-coverage#)[Basic Usage](https://mastra.ai/docs/reference/evals/keyword-coverage#basic-usage)[measure() Parameters](https://mastra.ai/docs/reference/evals/keyword-coverage#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/keyword-coverage#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/keyword-coverage#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/keyword-coverage#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/keyword-coverage#score-interpretation)[Examples with Analysis](https://mastra.ai/docs/reference/evals/keyword-coverage#examples-with-analysis)[Special Cases](https://mastra.ai/docs/reference/evals/keyword-coverage#special-cases)[Related](https://mastra.ai/docs/reference/evals/keyword-coverage#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/keyword-coverage.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")KeywordCoverage

KeywordCoverageMetric
=====================

The `KeywordCoverageMetric` class evaluates how well an LLM’s output covers the important keywords from the input. It analyzes keyword presence and matches while ignoring common words and stop words.

Basic Usage[](https://mastra.ai/docs/reference/evals/keyword-coverage#basic-usage)
----------------------------------------------------------------------------------

```
import { KeywordCoverageMetric } from "@mastra/evals/nlp";
 
const metric = new KeywordCoverageMetric();
 
const result = await metric.measure(
  "What are the key features of Python programming language?",
  "Python is a high-level programming language known for its simple syntax and extensive libraries."
);
 
console.log(result.score); // Coverage score from 0-1
console.log(result.info); // Object containing detailed metrics about keyword coverage
```

measure() Parameters[](https://mastra.ai/docs/reference/evals/keyword-coverage#measure-parameters)
--------------------------------------------------------------------------------------------------

### input:

string

The original text containing keywords to be matched

### output:

string

The text to evaluate for keyword coverage

Returns[](https://mastra.ai/docs/reference/evals/keyword-coverage#returns)
--------------------------------------------------------------------------

### score:

number

Coverage score (0-1) representing the proportion of matched keywords

### info:

object

Object containing detailed metrics about keyword coverage

number

### matchedKeywords:

number

Number of keywords found in the output

number

### totalKeywords:

number

Total number of keywords from the input

Scoring Details[](https://mastra.ai/docs/reference/evals/keyword-coverage#scoring-details)
------------------------------------------------------------------------------------------

The metric evaluates keyword coverage by matching keywords with the following features:

*   Common word and stop word filtering (e.g., “the”, “a”, “and”)
*   Case-insensitive matching
*   Word form variation handling
*   Special handling of technical terms and compound words

### Scoring Process[](https://mastra.ai/docs/reference/evals/keyword-coverage#scoring-process)

1.  Processes keywords from input and output:
    
    *   Filters out common words and stop words
    *   Normalizes case and word forms
    *   Handles special terms and compounds
2.  Calculates keyword coverage:
    
    *   Matches keywords between texts
    *   Counts successful matches
    *   Computes coverage ratio

Final score: `(matched_keywords / total_keywords) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/keyword-coverage#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect keyword coverage
*   0.7-0.9: Good coverage with most keywords present
*   0.4-0.6: Moderate coverage with some keywords missing
*   0.1-0.3: Poor coverage with many keywords missing
*   0.0: No keyword matches

Examples with Analysis[](https://mastra.ai/docs/reference/evals/keyword-coverage#examples-with-analysis)
--------------------------------------------------------------------------------------------------------

```
import { KeywordCoverageMetric } from "@mastra/evals/nlp";
 
const metric = new KeywordCoverageMetric();
 
// Perfect coverage example
const result1 = await metric.measure(
  "The quick brown fox jumps over the lazy dog",
  "A quick brown fox jumped over a lazy dog"
);
// {
//   score: 1.0,
//   info: {
//     matchedKeywords: 6,
//     totalKeywords: 6
//   }
// }
 
// Partial coverage example
const result2 = await metric.measure(
  "Python features include easy syntax, dynamic typing, and extensive libraries",
  "Python has simple syntax and many libraries"
);
// {
//   score: 0.67,
//   info: {
//     matchedKeywords: 4,
//     totalKeywords: 6
//   }
// }
 
// Technical terms example
const result3 = await metric.measure(
  "Discuss React.js component lifecycle and state management",
  "React components have lifecycle methods and manage state"
);
// {
//   score: 1.0,
//   info: {
//     matchedKeywords: 4,
//     totalKeywords: 4
//   }
// }
```

Special Cases[](https://mastra.ai/docs/reference/evals/keyword-coverage#special-cases)
--------------------------------------------------------------------------------------

The metric handles several special cases:

*   Empty input/output: Returns score of 1.0 if both empty, 0.0 if only one is empty
*   Single word: Treated as a single keyword
*   Technical terms: Preserves compound technical terms (e.g., “React.js”, “machine learning”)
*   Case differences: “JavaScript” matches “javascript”
*   Common words: Ignored in scoring to focus on meaningful keywords

Related[](https://mastra.ai/docs/reference/evals/keyword-coverage#related)
--------------------------------------------------------------------------

*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Content Similarity Metric](https://mastra.ai/docs/reference/evals/content-similarity)
*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Textual Difference Metric](https://mastra.ai/docs/reference/evals/textual-difference)
*   [Context Relevancy Metric](https://mastra.ai/docs/reference/evals/context-relevancy)

Last updated on February 25, 2025

[Hallucination](https://mastra.ai/docs/reference/evals/hallucination "Hallucination")[PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment "PromptAlignment")



================================================================================
Section 100: Content from https://mastra.ai/docs/reference/evals/prompt-alignment
================================================================================

Title: Reference: Prompt Alignment | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/prompt-alignment

Markdown Content:
Reference: Prompt Alignment | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[PromptAlignmentMetric](https://mastra.ai/docs/reference/evals/prompt-alignment#)[Basic Usage](https://mastra.ai/docs/reference/evals/prompt-alignment#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/prompt-alignment#constructor-parameters)[PromptAlignmentOptions](https://mastra.ai/docs/reference/evals/prompt-alignment#promptalignmentoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/prompt-alignment#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/prompt-alignment#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/prompt-alignment#scoring-details)[Instruction Verdicts](https://mastra.ai/docs/reference/evals/prompt-alignment#instruction-verdicts)[Scoring Process](https://mastra.ai/docs/reference/evals/prompt-alignment#scoring-process)[Important Considerations](https://mastra.ai/docs/reference/evals/prompt-alignment#important-considerations)[Score interpretation](https://mastra.ai/docs/reference/evals/prompt-alignment#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/prompt-alignment#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/prompt-alignment#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/prompt-alignment.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")PromptAlignment

PromptAlignmentMetric
=====================

The `PromptAlignmentMetric` class evaluates how strictly an LLM’s output follows a set of given prompt instructions. It uses a judge-based system to verify each instruction is followed exactly and provides detailed reasoning for any deviations.

Basic Usage[](https://mastra.ai/docs/reference/evals/prompt-alignment#basic-usage)
----------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { PromptAlignmentMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const instructions = [
  "Start sentences with capital letters",
  "End each sentence with a period",
  "Use present tense",
];
 
const metric = new PromptAlignmentMetric(model, {
  instructions,
  scale: 1,
});
 
const result = await metric.measure(
  "describe the weather",
  "The sun is shining. Clouds float in the sky. A gentle breeze blows.",
);
 
console.log(result.score); // Alignment score from 0-1
console.log(result.info.reason); // Explanation of the score
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/prompt-alignment#constructor-parameters)
--------------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate instruction alignment

### options:

PromptAlignmentOptions

Configuration options for the metric

### PromptAlignmentOptions[](https://mastra.ai/docs/reference/evals/prompt-alignment#promptalignmentoptions)

### instructions:

string\[\]

Array of instructions that the output should follow

### scale?:

number

\= 1

Maximum score value

measure() Parameters[](https://mastra.ai/docs/reference/evals/prompt-alignment#measure-parameters)
--------------------------------------------------------------------------------------------------

### input:

string

The original prompt or query

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/prompt-alignment#returns)
--------------------------------------------------------------------------

### score:

number

Alignment score (0 to scale, default 0-1)

### info:

object

Object containing detailed metrics about instruction compliance

string

### reason:

string

Detailed explanation of the score and instruction compliance

Scoring Details[](https://mastra.ai/docs/reference/evals/prompt-alignment#scoring-details)
------------------------------------------------------------------------------------------

The metric evaluates instruction alignment through:

*   Applicability assessment for each instruction
*   Strict compliance evaluation for applicable instructions
*   Detailed reasoning for all verdicts
*   Proportional scoring based on applicable instructions

### Instruction Verdicts[](https://mastra.ai/docs/reference/evals/prompt-alignment#instruction-verdicts)

Each instruction receives one of three verdicts:

*   “yes”: Instruction is applicable and completely followed
*   “no”: Instruction is applicable but not followed or only partially followed
*   “n/a”: Instruction is not applicable to the given context

### Scoring Process[](https://mastra.ai/docs/reference/evals/prompt-alignment#scoring-process)

1.  Evaluates instruction applicability:
    
    *   Determines if each instruction applies to the context
    *   Marks irrelevant instructions as “n/a”
    *   Considers domain-specific requirements
2.  Assesses compliance for applicable instructions:
    
    *   Evaluates each applicable instruction independently
    *   Requires complete compliance for “yes” verdict
    *   Documents specific reasons for all verdicts
3.  Calculates alignment score:
    
    *   Counts followed instructions (“yes” verdicts)
    *   Divides by total applicable instructions (excluding “n/a”)
    *   Scales to configured range

Final score: `(followed_instructions / applicable_instructions) * scale`

### Important Considerations[](https://mastra.ai/docs/reference/evals/prompt-alignment#important-considerations)

*   Empty outputs:
    *   All formatting instructions are considered applicable
    *   Marked as “no” since they cannot satisfy requirements
*   Domain-specific instructions:
    *   Always applicable if about the queried domain
    *   Marked as “no” if not followed, not “n/a”
*   “n/a” verdicts:
    *   Only used for completely different domains
    *   Do not affect the final score calculation

### Score interpretation[](https://mastra.ai/docs/reference/evals/prompt-alignment#score-interpretation)

(0 to scale, default 0-1)

*   1.0: All applicable instructions followed perfectly
*   0.7-0.9: Most applicable instructions followed
*   0.4-0.6: Mixed compliance with applicable instructions
*   0.1-0.3: Limited compliance with applicable instructions
*   0.0: No applicable instructions followed

Example with Analysis[](https://mastra.ai/docs/reference/evals/prompt-alignment#example-with-analysis)
------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { PromptAlignmentMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new PromptAlignmentMetric(model, {
  instructions: [
    "Use bullet points for each item",
    "Include exactly three examples",
    "End each point with a semicolon"
  ],
  scale: 1
});
 
const result = await metric.measure(
  "List three fruits",
  "• Apple is red and sweet;
• Banana is yellow and curved;
• Orange is citrus and round."
);
 
// Example output:
// {
//   score: 1.0,
//   info: {
//     reason: "The score is 1.0 because all instructions were followed exactly:
//           bullet points were used, exactly three examples were provided, and
//           each point ends with a semicolon."
//   }
// }
 
const result2 = await metric.measure(
  "List three fruits",
  "1. Apple
2. Banana
3. Orange and Grape"
);
 
// Example output:
// {
//   score: 0.33,
//   info: {
//     reason: "The score is 0.33 because: numbered lists were used instead of bullet points,
//           no semicolons were used, and four fruits were listed instead of exactly three."
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/prompt-alignment#related)
--------------------------------------------------------------------------

*   [Answer Relevancy Metric](https://mastra.ai/docs/reference/evals/answer-relevancy)
*   [Keyword Coverage Metric](https://mastra.ai/docs/reference/evals/keyword-coverage)

Last updated on February 25, 2025

[KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage "KeywordCoverage")[Summarization](https://mastra.ai/docs/reference/evals/summarization "Summarization")



================================================================================
Section 101: Content from https://mastra.ai/docs/reference/evals/summarization
================================================================================

Title: Reference: Summarization | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/summarization

Markdown Content:
Reference: Summarization | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[SummarizationMetric](https://mastra.ai/docs/reference/evals/summarization#)[Basic Usage](https://mastra.ai/docs/reference/evals/summarization#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/summarization#constructor-parameters)[SummarizationMetricOptions](https://mastra.ai/docs/reference/evals/summarization#summarizationmetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/summarization#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/summarization#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/summarization#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/summarization#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/summarization#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/summarization#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/summarization#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/summarization.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Summarization

SummarizationMetric
===================

, The `SummarizationMetric` evaluates how well an LLM’s summary captures the original text’s content while maintaining factual accuracy. It combines two aspects: alignment (factual correctness) and coverage (inclusion of key information), using the minimum scores to ensure both qualities are necessary for a good summary.

Basic Usage[](https://mastra.ai/docs/reference/evals/summarization#basic-usage)
-------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { SummarizationMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new SummarizationMetric(model);
 
const result = await metric.measure(
  "The company was founded in 1995 by John Smith. It started with 10 employees and grew to 500 by 2020. The company is based in Seattle.",
  "Founded in 1995 by John Smith, the company grew from 10 to 500 employees by 2020.",
);
 
console.log(result.score); // Score from 0-1
console.log(result.info); // Object containing detailed metrics about the summary
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/summarization#constructor-parameters)
-----------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate summaries

### options?:

SummarizationMetricOptions

\= { scale: 1 }

Configuration options for the metric

### SummarizationMetricOptions[](https://mastra.ai/docs/reference/evals/summarization#summarizationmetricoptions)

### scale?:

number

\= 1

Maximum score value

measure() Parameters[](https://mastra.ai/docs/reference/evals/summarization#measure-parameters)
-----------------------------------------------------------------------------------------------

### input:

string

The original text to be summarized

### output:

string

The generated summary to evaluate

Returns[](https://mastra.ai/docs/reference/evals/summarization#returns)
-----------------------------------------------------------------------

### score:

number

Summarization score (0 to scale, default 0-1)

### info:

object

Object containing detailed metrics about the summary

string

### reason:

string

Detailed explanation of the score, including both alignment and coverage aspects

number

### alignmentScore:

number

Alignment score (0 to 1)

number

### coverageScore:

number

Coverage score (0 to 1)

Scoring Details[](https://mastra.ai/docs/reference/evals/summarization#scoring-details)
---------------------------------------------------------------------------------------

The metric evaluates summaries through two essential components:

1.  **Alignment Score**: Measures factual correctness
    
    *   Extracts claims from the summary
    *   Verifies each claim against the original text
    *   Assigns “yes”, “no”, or “unsure” verdicts
2.  **Coverage Score**: Measures inclusion of key information
    
    *   Generates key questions from the original text
    *   Check if the summary answers these questions
    *   Checks information inclusion and assesses comprehensiveness

### Scoring Process[](https://mastra.ai/docs/reference/evals/summarization#scoring-process)

1.  Calculates alignment score:
    
    *   Extracts claims from summary
    *   Verifies against source text
    *   Computes: `supported_claims / total_claims`
2.  Determines coverage score:
    
    *   Generates questions from source
    *   Checks summary for answers
    *   Evaluates completeness
    *   Calculates: `answerable_questions / total_questions`

Final score: `min(alignment_score, coverage_score) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/summarization#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect summary - completely factual and covers all key information
*   0.7-0.9: Strong summary with minor omissions or slight inaccuracies
*   0.4-0.6: Moderate quality with significant gaps or inaccuracies
*   0.1-0.3: Poor summary with major omissions or factual errors
*   0.0: Invalid summary - either completely inaccurate or missing critical information

Example with Analysis[](https://mastra.ai/docs/reference/evals/summarization#example-with-analysis)
---------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { SummarizationMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new SummarizationMetric(model);
 
const result = await metric.measure(
  "The electric car company Tesla was founded in 2003 by Martin Eberhard and Marc Tarpenning. Elon Musk joined in 2004 as the largest investor and became CEO in 2008. The company's first car, the Roadster, was launched in 2008.",
  "Tesla, founded by Elon Musk in 2003, revolutionized the electric car industry starting with the Roadster in 2008.",
);
 
// Example output:
// {
//   score: 0.5,
//   info: {
//     reason: "The score is 0.5 because while the coverage is good (0.75) - mentioning the founding year,
//           first car model, and launch date - the alignment score is lower (0.5) due to incorrectly
//           attributing the company's founding to Elon Musk instead of Martin Eberhard and Marc Tarpenning.
//           The final score takes the minimum of these two scores to ensure both factual accuracy and
//           coverage are necessary for a good summary."
//     alignmentScore: 0.5,
//     coverageScore: 0.75,
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/summarization#related)
-----------------------------------------------------------------------

*   [Faithfulness Metric](https://mastra.ai/docs/reference/evals/faithfulness)
*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Contextual Recall Metric](https://mastra.ai/docs/reference/evals/contextual-recall)
*   [Hallucination Metric](https://mastra.ai/docs/reference/evals/hallucination)

Last updated on February 25, 2025

[PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment "PromptAlignment")[TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference "TextualDifference")



================================================================================
Section 102: Content from https://mastra.ai/docs/reference/evals/textual-difference
================================================================================

Title: Reference: Textual Difference | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/textual-difference

Markdown Content:
Reference: Textual Difference | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[TextualDifferenceMetric](https://mastra.ai/docs/reference/evals/textual-difference#)[Basic Usage](https://mastra.ai/docs/reference/evals/textual-difference#basic-usage)[measure() Parameters](https://mastra.ai/docs/reference/evals/textual-difference#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/textual-difference#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/textual-difference#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/textual-difference#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/textual-difference#score-interpretation)[Example with Analysis](https://mastra.ai/docs/reference/evals/textual-difference#example-with-analysis)[Related](https://mastra.ai/docs/reference/evals/textual-difference#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/textual-difference.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")TextualDifference

TextualDifferenceMetric
=======================

The `TextualDifferenceMetric` class uses sequence matching to measure the textual differences between two strings. It provides detailed information about changes, including the number of operations needed to transform one text into another.

Basic Usage[](https://mastra.ai/docs/reference/evals/textual-difference#basic-usage)
------------------------------------------------------------------------------------

```
import { TextualDifferenceMetric } from "@mastra/evals/nlp";
 
const metric = new TextualDifferenceMetric();
 
const result = await metric.measure(
  "The quick brown fox",
  "The fast brown fox"
);
 
console.log(result.score); // Similarity ratio from 0-1
console.log(result.info); // Detailed change metrics
```

measure() Parameters[](https://mastra.ai/docs/reference/evals/textual-difference#measure-parameters)
----------------------------------------------------------------------------------------------------

### input:

string

The original text to compare against

### output:

string

The text to evaluate for differences

Returns[](https://mastra.ai/docs/reference/evals/textual-difference#returns)
----------------------------------------------------------------------------

### score:

number

Similarity ratio (0-1) where 1 indicates identical texts

### info:

Detailed metrics about the differences

number

### confidence:

number

Confidence score based on length difference between texts (0-1)

number

### ratio:

number

Raw similarity ratio between the texts

number

### changes:

number

Number of change operations (insertions, deletions, replacements)

number

### lengthDiff:

number

Normalized difference in length between input and output (0-1)

Scoring Details[](https://mastra.ai/docs/reference/evals/textual-difference#scoring-details)
--------------------------------------------------------------------------------------------

The metric calculates several measures:

*   **Similarity Ratio**: Based on sequence matching between texts (0-1)
*   **Changes**: Count of non-matching operations needed
*   **Length Difference**: Normalized difference in text lengths
*   **Confidence**: Inversely proportional to length difference

### Scoring Process[](https://mastra.ai/docs/reference/evals/textual-difference#scoring-process)

1.  Analyzes textual differences:
    
    *   Performs sequence matching between input and output
    *   Counts the number of change operations required
    *   Measures length differences
2.  Calculates metrics:
    
    *   Computes similarity ratio
    *   Determines confidence score
    *   Combines into weighted score

Final score: `(similarity_ratio * confidence) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/textual-difference#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Identical texts - no differences
*   0.7-0.9: Minor differences - few changes needed
*   0.4-0.6: Moderate differences - significant changes
*   0.1-0.3: Major differences - extensive changes
*   0.0: Completely different texts

Example with Analysis[](https://mastra.ai/docs/reference/evals/textual-difference#example-with-analysis)
--------------------------------------------------------------------------------------------------------

```
import { TextualDifferenceMetric } from "@mastra/evals/nlp";
 
const metric = new TextualDifferenceMetric();
 
const result = await metric.measure(
  "Hello world! How are you?",
  "Hello there! How is it going?"
);
 
// Example output:
// {
//   score: 0.65,
//   info: {
//     confidence: 0.95,
//     ratio: 0.65,
//     changes: 2,
//     lengthDiff: 0.05
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/textual-difference#related)
----------------------------------------------------------------------------

*   [Content Similarity Metric](https://mastra.ai/docs/reference/evals/content-similarity)
*   [Completeness Metric](https://mastra.ai/docs/reference/evals/completeness)
*   [Keyword Coverage Metric](https://mastra.ai/docs/reference/evals/keyword-coverage)

Last updated on February 25, 2025

[Summarization](https://mastra.ai/docs/reference/evals/summarization "Summarization")[ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency "ToneConsistency")



================================================================================
Section 103: Content from https://mastra.ai/docs/reference/evals/tone-consistency
================================================================================

Title: Reference: Tone Consistency | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/tone-consistency

Markdown Content:
Reference: Tone Consistency | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ToneConsistencyMetric](https://mastra.ai/docs/reference/evals/tone-consistency#)[Basic Usage](https://mastra.ai/docs/reference/evals/tone-consistency#basic-usage)[measure() Parameters](https://mastra.ai/docs/reference/evals/tone-consistency#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/tone-consistency#returns)[info Object (Tone Comparison)](https://mastra.ai/docs/reference/evals/tone-consistency#info-object-tone-comparison)[info Object (Tone Stability)](https://mastra.ai/docs/reference/evals/tone-consistency#info-object-tone-stability)[Scoring Details](https://mastra.ai/docs/reference/evals/tone-consistency#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/tone-consistency#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/tone-consistency#score-interpretation)[Example with Both Modes](https://mastra.ai/docs/reference/evals/tone-consistency#example-with-both-modes)[Related](https://mastra.ai/docs/reference/evals/tone-consistency#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/tone-consistency.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")ToneConsistency

ToneConsistencyMetric
=====================

The `ToneConsistencyMetric` class evaluates the text’s emotional tone and sentiment consistency. It can operate in two modes: comparing tone between input/output pairs or analyzing tone stability within a single text.

Basic Usage[](https://mastra.ai/docs/reference/evals/tone-consistency#basic-usage)
----------------------------------------------------------------------------------

```
import { ToneConsistencyMetric } from "@mastra/evals/nlp";
 
const metric = new ToneConsistencyMetric();
 
// Compare tone between input and output
const result1 = await metric.measure(
  "I love this amazing product!",
  "This product is wonderful and fantastic!"
);
 
// Analyze tone stability in a single text
const result2 = await metric.measure(
  "The service is excellent. The staff is friendly. The atmosphere is perfect.",
  ""  // Empty string for single-text analysis
);
 
console.log(result1.score); // Tone consistency score from 0-1
console.log(result2.score); // Tone stability score from 0-1
```

measure() Parameters[](https://mastra.ai/docs/reference/evals/tone-consistency#measure-parameters)
--------------------------------------------------------------------------------------------------

### input:

string

The text to analyze for tone

### output:

string

Reference text for tone comparison (empty string for stability analysis)

Returns[](https://mastra.ai/docs/reference/evals/tone-consistency#returns)
--------------------------------------------------------------------------

### score:

number

Tone consistency/stability score (0-1)

### info:

object

Detailed tone info

### info Object (Tone Comparison)[](https://mastra.ai/docs/reference/evals/tone-consistency#info-object-tone-comparison)

### responseSentiment:

number

Sentiment score for the input text

### referenceSentiment:

number

Sentiment score for the output text

### difference:

number

Absolute difference between sentiment scores

### info Object (Tone Stability)[](https://mastra.ai/docs/reference/evals/tone-consistency#info-object-tone-stability)

### avgSentiment:

number

Average sentiment score across sentences

### sentimentVariance:

number

Variance in sentiment between sentences

Scoring Details[](https://mastra.ai/docs/reference/evals/tone-consistency#scoring-details)
------------------------------------------------------------------------------------------

The metric evaluates sentiment consistency through tone pattern analysis and mode-specific scoring.

### Scoring Process[](https://mastra.ai/docs/reference/evals/tone-consistency#scoring-process)

1.  Analyzes tone patterns:
    
    *   Extracts sentiment features
    *   Computes sentiment scores
    *   Measures tone variations
2.  Calculates mode-specific score: **Tone Consistency** (input and output):
    
    *   Compares sentiment between texts
    *   Calculates sentiment difference
    *   Score = 1 - (sentiment\_difference / max\_difference)
    
    **Tone Stability** (single input):
    
    *   Analyzes sentiment across sentences
    *   Calculates sentiment variance
    *   Score = 1 - (sentiment\_variance / max\_variance)

Final score: `mode_specific_score * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/tone-consistency#score-interpretation)

(0 to scale, default 0-1)

*   1.0: Perfect tone consistency/stability
*   0.7-0.9: Strong consistency with minor variations
*   0.4-0.6: Moderate consistency with noticeable shifts
*   0.1-0.3: Poor consistency with major tone changes
*   0.0: No consistency - completely different tones

Example with Both Modes[](https://mastra.ai/docs/reference/evals/tone-consistency#example-with-both-modes)
----------------------------------------------------------------------------------------------------------

```
import { ToneConsistencyMetric } from "@mastra/evals/nlp";
 
const metric = new ToneConsistencyMetric();
 
// Tone Consistency Mode
const consistencyResult = await metric.measure(
  "This product is fantastic and amazing!",
  "The product is excellent and wonderful!"
);
// Example output:
// {
//   score: 0.95,
//   info: {
//     responseSentiment: 0.8,
//     referenceSentiment: 0.75,
//     difference: 0.05
//   }
// }
 
// Tone Stability Mode
const stabilityResult = await metric.measure(
  "Great service! Friendly staff. Perfect atmosphere.",
  ""
);
// Example output:
// {
//   score: 0.9,
//   info: {
//     avgSentiment: 0.6,
//     sentimentVariance: 0.1
//   }
// }
```

Related[](https://mastra.ai/docs/reference/evals/tone-consistency#related)
--------------------------------------------------------------------------

*   [Content Similarity Metric](https://mastra.ai/docs/reference/evals/content-similarity)
*   [Toxicity Metric](https://mastra.ai/docs/reference/evals/toxicity)

Last updated on February 25, 2025

[TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference "TextualDifference")[Toxicity](https://mastra.ai/docs/reference/evals/toxicity "Toxicity")



================================================================================
Section 104: Content from https://mastra.ai/docs/reference/evals/toxicity
================================================================================

Title: Reference: Toxicity | Metrics | Evals | Mastra Docs

URL Source: https://mastra.ai/docs/reference/evals/toxicity

Markdown Content:
Reference: Toxicity | Metrics | Evals | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ToxicityMetric](https://mastra.ai/docs/reference/evals/toxicity#)[Basic Usage](https://mastra.ai/docs/reference/evals/toxicity#basic-usage)[Constructor Parameters](https://mastra.ai/docs/reference/evals/toxicity#constructor-parameters)[ToxicityMetricOptions](https://mastra.ai/docs/reference/evals/toxicity#toxicitymetricoptions)[measure() Parameters](https://mastra.ai/docs/reference/evals/toxicity#measure-parameters)[Returns](https://mastra.ai/docs/reference/evals/toxicity#returns)[Scoring Details](https://mastra.ai/docs/reference/evals/toxicity#scoring-details)[Scoring Process](https://mastra.ai/docs/reference/evals/toxicity#scoring-process)[Score interpretation](https://mastra.ai/docs/reference/evals/toxicity#score-interpretation)[Example with Custom Configuration](https://mastra.ai/docs/reference/evals/toxicity#example-with-custom-configuration)[Related](https://mastra.ai/docs/reference/evals/toxicity#related)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/evals/toxicity.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Evals](https://mastra.ai/docs/reference/evals/answer-relevancy "Evals")Toxicity

ToxicityMetric
==============

The `ToxicityMetric` class evaluates whether an LLM’s output contains racist, biased, or toxic elements. It uses a judge-based system to analyze responses for various forms of toxicity including personal attacks, mockery, hate speech, dismissive statements, and threats.

Basic Usage[](https://mastra.ai/docs/reference/evals/toxicity#basic-usage)
--------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
import { ToxicityMetric } from "@mastra/evals/llm";
 
// Configure the model for evaluation
const model = openai("gpt-4o-mini");
 
const metric = new ToxicityMetric(model, {
  scale: 1, // Default scale is 0-1
});
 
const result = await metric.measure(
  "How is Sarah as a person?",
  "Sarah is a dedicated team member who always delivers quality work.",
);
 
console.log(result.score); // Score from 0-1 (0 = not toxic, 1 = toxic)
console.log(result.info.reason); // Explanation of the toxicity assessment
```

Constructor Parameters[](https://mastra.ai/docs/reference/evals/toxicity#constructor-parameters)
------------------------------------------------------------------------------------------------

### model:

LanguageModel

Configuration for the model used to evaluate toxicity

### options?:

ToxicityMetricOptions

\= { scale: 1 }

Configuration options for the metric

### ToxicityMetricOptions[](https://mastra.ai/docs/reference/evals/toxicity#toxicitymetricoptions)

### scale?:

number

\= 1

Maximum score value (default is 1)

measure() Parameters[](https://mastra.ai/docs/reference/evals/toxicity#measure-parameters)
------------------------------------------------------------------------------------------

### input:

string

The original query or prompt

### output:

string

The LLM's response to evaluate

Returns[](https://mastra.ai/docs/reference/evals/toxicity#returns)
------------------------------------------------------------------

### score:

number

Toxicity score (0 to scale, default 0-1)

### info:

object

Detailed toxicity info

string

### reason:

string

Detailed explanation of the toxicity assessment

Scoring Details[](https://mastra.ai/docs/reference/evals/toxicity#scoring-details)
----------------------------------------------------------------------------------

The metric evaluates toxicity through multiple aspects:

*   Personal attacks
*   Mockery or sarcasm
*   Hate speech
*   Dismissive statements
*   Threats or intimidation

### Scoring Process[](https://mastra.ai/docs/reference/evals/toxicity#scoring-process)

1.  Analyzes toxic elements:
    
    *   Identifies personal attacks and mockery
    *   Detects hate speech and threats
    *   Evaluates dismissive statements
    *   Assesses severity levels
2.  Calculates toxicity score:
    
    *   Weighs detected elements
    *   Combines severity ratings
    *   Normalizes to scale

Final score: `(toxicity_weighted_sum / max_toxicity) * scale`

### Score interpretation[](https://mastra.ai/docs/reference/evals/toxicity#score-interpretation)

(0 to scale, default 0-1)

*   0.8-1.0: Severe toxicity
*   0.4-0.7: Moderate toxicity
*   0.1-0.3: Mild toxicity
*   0.0: No toxic elements detected

Example with Custom Configuration[](https://mastra.ai/docs/reference/evals/toxicity#example-with-custom-configuration)
----------------------------------------------------------------------------------------------------------------------

```
import { openai } from "@ai-sdk/openai";
 
const model = openai("gpt-4o-mini");
 
const metric = new ToxicityMetric(model, {
  scale: 10, // Use 0-10 scale instead of 0-1
});
 
const result = await metric.measure(
  "What do you think about the new team member?",
  "The new team member shows promise but needs significant improvement in basic skills.",
);
```

Related[](https://mastra.ai/docs/reference/evals/toxicity#related)
------------------------------------------------------------------

*   [Tone Consistency Metric](https://mastra.ai/docs/reference/evals/tone-consistency)
*   [Bias Metric](https://mastra.ai/docs/reference/evals/bias)

Last updated on February 25, 2025

[ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency "ToneConsistency")[Overview](https://mastra.ai/docs/reference/client-js "Overview")



================================================================================
Section 105: Content from https://mastra.ai/docs/reference/client-js
================================================================================

Title: Mastra Client SDK

URL Source: https://mastra.ai/docs/reference/client-js

Markdown Content:
Mastra Client SDK
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Mastra Client SDK](https://mastra.ai/docs/reference/client-js#)[Installation](https://mastra.ai/docs/reference/client-js#installation)[Requirements](https://mastra.ai/docs/reference/client-js#requirements)[Local Development](https://mastra.ai/docs/reference/client-js#local-development)[Basic Configuration](https://mastra.ai/docs/reference/client-js#basic-configuration)[Configuration Options](https://mastra.ai/docs/reference/client-js#configuration-options)[Configuration Options](https://mastra.ai/docs/reference/client-js#configuration-options-1)[Available Resources](https://mastra.ai/docs/reference/client-js#available-resources)[Quick Example](https://mastra.ai/docs/reference/client-js#quick-example)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/index.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")Client SDK - JSOverview

Mastra Client SDK
=================

The Mastra Client SDK provides a simple and type-safe interface to interact with Mastra REST APIs from TypeScript and JavaScript applications. It offers comprehensive support for all Mastra features including agents, vectors, memory, tools, and workflows.

Installation[](https://mastra.ai/docs/reference/client-js#installation)
-----------------------------------------------------------------------

npmyarnpnpm

```
npm install @mastra/client-js
```

```
yarn add @mastra/client-js
```

```
pnpm add @mastra/client-js 
```

### Requirements[](https://mastra.ai/docs/reference/client-js#requirements)

*   Node.js 16.x or later
*   TypeScript 4.7+ (for TypeScript users)
*   Modern browser environment with Fetch API support (for browser usage)

### Local Development[](https://mastra.ai/docs/reference/client-js#local-development)

When developing locally, the Client SDK makes it easy to interact with your Mastra server. Simply point the client to your local server:

```
const client = new MastraClient({
  baseUrl: "http://localhost:4111", // Default Mastra server port
});
```

For more information about local development, see the [Local Development Guide](https://mastra.ai/docs/local-dev/creating-projects).

Basic Configuration[](https://mastra.ai/docs/reference/client-js#basic-configuration)
-------------------------------------------------------------------------------------

The minimal configuration requires only the `baseUrl` of your Mastra API endpoint:

```
import { MastraClient } from "@mastra/client-js";
 
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
});
```

Configuration Options[](https://mastra.ai/docs/reference/client-js#configuration-options)
-----------------------------------------------------------------------------------------

Here’s a complete example showing all available configuration options:

```
const client = new MastraClient({
  // Required
  baseUrl: "http://localhost:4111",
 
  // Optional
  retries: 3, // Number of retry attempts (default: 3)
  backoffMs: 300, // Initial backoff time in ms (default: 300)
  maxBackoffMs: 5000, // Maximum backoff time in ms (default: 5000)
  headers: {
    // Custom headers to include in all requests
    "Custom-Header": "value",
  },
});
```

### Configuration Options[](https://mastra.ai/docs/reference/client-js#configuration-options-1)

| Option | Type | Default | Description |
| --- | --- | --- | --- |
| `baseUrl` | `string` | \- | The base URL of your Mastra API endpoint (required) |
| `retries` | `number` | `3` | Number of times to retry failed requests |
| `backoffMs` | `number` | `300` | Initial backoff time in milliseconds |
| `maxBackoffMs` | `number` | `5000` | Maximum backoff time in milliseconds |
| `headers` | `Record<string, string>` | `{}` | Custom headers to include in all requests |

Available Resources[](https://mastra.ai/docs/reference/client-js#available-resources)
-------------------------------------------------------------------------------------

The client provides access to the following resources:

*   **Agents**: Create and manage AI agents, generate responses, and handle streaming interactions
*   **Memory**: Manage conversation threads and message history
*   **Tools**: Access and execute tools available to agents
*   **Workflows**: Create and manage automated workflows
*   **Vectors**: Handle vector operations for semantic search and similarity matching

Each resource is documented in detail in its respective section.

Quick Example[](https://mastra.ai/docs/reference/client-js#quick-example)
-------------------------------------------------------------------------

Here’s a simple example of using the client with an agent:

```
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
});
 
// Get an agent instance
const agent = client.getAgent("your-agent-id");
 
// Generate a response
const response = await agent.generate({
  messages: [
    {
      role: "user",
      content: "Hello!",
    },
  ],
});
```

Last updated on February 25, 2025

[Toxicity](https://mastra.ai/docs/reference/evals/toxicity "Toxicity")[Agents API](https://mastra.ai/docs/reference/client-js/agents "Agents API")



================================================================================
Section 106: Content from https://mastra.ai/docs/reference/client-js/agents
================================================================================

Title: Agents API

URL Source: https://mastra.ai/docs/reference/client-js/agents

Markdown Content:
Agents API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Agents API](https://mastra.ai/docs/reference/client-js/agents#)[Getting All Agents](https://mastra.ai/docs/reference/client-js/agents#getting-all-agents)[Working with a Specific Agent](https://mastra.ai/docs/reference/client-js/agents#working-with-a-specific-agent)[Agent Methods](https://mastra.ai/docs/reference/client-js/agents#agent-methods)[Get Agent Details](https://mastra.ai/docs/reference/client-js/agents#get-agent-details)[Generate Response](https://mastra.ai/docs/reference/client-js/agents#generate-response)[Stream Response](https://mastra.ai/docs/reference/client-js/agents#stream-response)[Get Agent Tool](https://mastra.ai/docs/reference/client-js/agents#get-agent-tool)[Get Agent Evaluations](https://mastra.ai/docs/reference/client-js/agents#get-agent-evaluations)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/agents.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Agents API

Agents API
==========

The Agents API provides methods to interact with Mastra AI agents, including generating responses, streaming interactions, and managing agent tools.

Getting All Agents[](https://mastra.ai/docs/reference/client-js/agents#getting-all-agents)
------------------------------------------------------------------------------------------

Retrieve a list of all available agents:

```
const agents = await client.getAgents();
```

Working with a Specific Agent[](https://mastra.ai/docs/reference/client-js/agents#working-with-a-specific-agent)
----------------------------------------------------------------------------------------------------------------

Get an instance of a specific agent:

```
const agent = client.getAgent("agent-id");
```

Agent Methods[](https://mastra.ai/docs/reference/client-js/agents#agent-methods)
--------------------------------------------------------------------------------

### Get Agent Details[](https://mastra.ai/docs/reference/client-js/agents#get-agent-details)

Retrieve detailed information about an agent:

```
const details = await agent.details();
```

### Generate Response[](https://mastra.ai/docs/reference/client-js/agents#generate-response)

Generate a response from the agent:

```
const response = await agent.generate({
  messages: [
    {
      role: "user",
      content: "Hello, how are you?",
    },
  ],
  threadId: "thread-1", // Optional: Thread ID for conversation context
  resourceid: "resource-1", // Optional: Resource ID
  output: {}, // Optional: Output configuration
});
```

### Stream Response[](https://mastra.ai/docs/reference/client-js/agents#stream-response)

Stream a response from the agent for real-time interactions:

```
const response = await agent.stream({
  messages: [
    {
      role: "user",
      content: "Tell me a story",
    },
  ],
});
 
// Read from response body
const reader = response.body.getReader();
while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  console.log(new TextDecoder().decode(value));
}
```

### Get Agent Tool[](https://mastra.ai/docs/reference/client-js/agents#get-agent-tool)

Retrieve information about a specific tool available to the agent:

```
const tool = await agent.getTool("tool-id");
```

### Get Agent Evaluations[](https://mastra.ai/docs/reference/client-js/agents#get-agent-evaluations)

Get evaluation results for the agent:

```
// Get CI evaluations
const evals = await agent.evals();
 
// Get live evaluations
const liveEvals = await agent.liveEvals();
```

Last updated on February 25, 2025

[Overview](https://mastra.ai/docs/reference/client-js "Overview")[Memory API](https://mastra.ai/docs/reference/client-js/memory "Memory API")



================================================================================
Section 107: Content from https://mastra.ai/docs/reference/client-js/memory
================================================================================

Title: Memory API

URL Source: https://mastra.ai/docs/reference/client-js/memory

Markdown Content:
Memory API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Memory API](https://mastra.ai/docs/reference/client-js/memory#)[Memory Thread Operations](https://mastra.ai/docs/reference/client-js/memory#memory-thread-operations)[Get All Threads](https://mastra.ai/docs/reference/client-js/memory#get-all-threads)[Create a New Thread](https://mastra.ai/docs/reference/client-js/memory#create-a-new-thread)[Working with a Specific Thread](https://mastra.ai/docs/reference/client-js/memory#working-with-a-specific-thread)[Thread Methods](https://mastra.ai/docs/reference/client-js/memory#thread-methods)[Get Thread Details](https://mastra.ai/docs/reference/client-js/memory#get-thread-details)[Update Thread](https://mastra.ai/docs/reference/client-js/memory#update-thread)[Delete Thread](https://mastra.ai/docs/reference/client-js/memory#delete-thread)[Message Operations](https://mastra.ai/docs/reference/client-js/memory#message-operations)[Save Messages](https://mastra.ai/docs/reference/client-js/memory#save-messages)[Get Memory Status](https://mastra.ai/docs/reference/client-js/memory#get-memory-status)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/memory.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Memory API

Memory API
==========

The Memory API provides methods to manage conversation threads and message history in Mastra.

Memory Thread Operations[](https://mastra.ai/docs/reference/client-js/memory#memory-thread-operations)
------------------------------------------------------------------------------------------------------

### Get All Threads[](https://mastra.ai/docs/reference/client-js/memory#get-all-threads)

Retrieve all memory threads for a specific resource:

```
const threads = await client.getMemoryThreads({
  resourceid: "resource-1",
});
```

### Create a New Thread[](https://mastra.ai/docs/reference/client-js/memory#create-a-new-thread)

Create a new memory thread:

```
const thread = await client.createMemoryThread({
  title: "New Conversation",
  metadata: { category: "support" },
  resourceid: "resource-1",
});
```

### Working with a Specific Thread[](https://mastra.ai/docs/reference/client-js/memory#working-with-a-specific-thread)

Get an instance of a specific memory thread:

```
const thread = client.getMemoryThread("thread-id");
```

Thread Methods[](https://mastra.ai/docs/reference/client-js/memory#thread-methods)
----------------------------------------------------------------------------------

### Get Thread Details[](https://mastra.ai/docs/reference/client-js/memory#get-thread-details)

Retrieve details about a specific thread:

```
const details = await thread.get();
```

### Update Thread[](https://mastra.ai/docs/reference/client-js/memory#update-thread)

Update thread properties:

```
const updated = await thread.update({
  title: "Updated Title",
  metadata: { status: "resolved" },
  resourceid: "resource-1",
});
```

### Delete Thread[](https://mastra.ai/docs/reference/client-js/memory#delete-thread)

Delete a thread and its messages:

```
await thread.delete();
```

Message Operations[](https://mastra.ai/docs/reference/client-js/memory#message-operations)
------------------------------------------------------------------------------------------

### Save Messages[](https://mastra.ai/docs/reference/client-js/memory#save-messages)

Save messages to memory:

```
const savedMessages = await client.saveMessageToMemory({
  messages: [
    {
      role: "user",
      content: "Hello!",
      id: "1",
      threadId: "thread-1",
      createdAt: new Date(),
      type: "text",
    },
  ],
});
```

### Get Memory Status[](https://mastra.ai/docs/reference/client-js/memory#get-memory-status)

Check the status of the memory system:

```
const status = await client.getMemoryStatus();
```

Last updated on February 25, 2025

[Agents API](https://mastra.ai/docs/reference/client-js/agents "Agents API")[Tools API](https://mastra.ai/docs/reference/client-js/tools "Tools API")



================================================================================
Section 108: Content from https://mastra.ai/docs/reference/client-js/tools
================================================================================

Title: Tools API

URL Source: https://mastra.ai/docs/reference/client-js/tools

Markdown Content:
Tools API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Tools API](https://mastra.ai/docs/reference/client-js/tools#)[Getting All Tools](https://mastra.ai/docs/reference/client-js/tools#getting-all-tools)[Working with a Specific Tool](https://mastra.ai/docs/reference/client-js/tools#working-with-a-specific-tool)[Tool Methods](https://mastra.ai/docs/reference/client-js/tools#tool-methods)[Get Tool Details](https://mastra.ai/docs/reference/client-js/tools#get-tool-details)[Execute Tool](https://mastra.ai/docs/reference/client-js/tools#execute-tool)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/tools.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Tools API

Tools API
=========

The Tools API provides methods to interact with and execute tools available in the Mastra platform.

Getting All Tools[](https://mastra.ai/docs/reference/client-js/tools#getting-all-tools)
---------------------------------------------------------------------------------------

Retrieve a list of all available tools:

```
const tools = await client.getTools();
```

Working with a Specific Tool[](https://mastra.ai/docs/reference/client-js/tools#working-with-a-specific-tool)
-------------------------------------------------------------------------------------------------------------

Get an instance of a specific tool:

```
const tool = client.getTool("tool-id");
```

Tool Methods[](https://mastra.ai/docs/reference/client-js/tools#tool-methods)
-----------------------------------------------------------------------------

### Get Tool Details[](https://mastra.ai/docs/reference/client-js/tools#get-tool-details)

Retrieve detailed information about a tool:

```
const details = await tool.details();
```

### Execute Tool[](https://mastra.ai/docs/reference/client-js/tools#execute-tool)

Execute a tool with specific arguments:

```
const result = await tool.execute({
  args: {
    param1: "value1",
    param2: "value2",
  },
  threadId: "thread-1", // Optional: Thread context
  resourceid: "resource-1", // Optional: Resource identifier
});
```

Last updated on February 25, 2025

[Memory API](https://mastra.ai/docs/reference/client-js/memory "Memory API")[Workflows API](https://mastra.ai/docs/reference/client-js/workflows "Workflows API")



================================================================================
Section 109: Content from https://mastra.ai/docs/reference/client-js/workflows
================================================================================

Title: Workflows API

URL Source: https://mastra.ai/docs/reference/client-js/workflows

Markdown Content:
Workflows API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Workflows API](https://mastra.ai/docs/reference/client-js/workflows#)[Getting All Workflows](https://mastra.ai/docs/reference/client-js/workflows#getting-all-workflows)[Working with a Specific Workflow](https://mastra.ai/docs/reference/client-js/workflows#working-with-a-specific-workflow)[Workflow Methods](https://mastra.ai/docs/reference/client-js/workflows#workflow-methods)[Get Workflow Details](https://mastra.ai/docs/reference/client-js/workflows#get-workflow-details)[Execute Workflow](https://mastra.ai/docs/reference/client-js/workflows#execute-workflow)[Resume Workflow](https://mastra.ai/docs/reference/client-js/workflows#resume-workflow)[Watch Workflow](https://mastra.ai/docs/reference/client-js/workflows#watch-workflow)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/workflows.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Workflows API

Workflows API
=============

The Workflows API provides methods to interact with and execute automated workflows in Mastra.

Getting All Workflows[](https://mastra.ai/docs/reference/client-js/workflows#getting-all-workflows)
---------------------------------------------------------------------------------------------------

Retrieve a list of all available workflows:

```
const workflows = await client.getWorkflows();
```

Working with a Specific Workflow[](https://mastra.ai/docs/reference/client-js/workflows#working-with-a-specific-workflow)
-------------------------------------------------------------------------------------------------------------------------

Get an instance of a specific workflow:

```
const workflow = client.getWorkflow("workflow-id");
```

Workflow Methods[](https://mastra.ai/docs/reference/client-js/workflows#workflow-methods)
-----------------------------------------------------------------------------------------

### Get Workflow Details[](https://mastra.ai/docs/reference/client-js/workflows#get-workflow-details)

Retrieve detailed information about a workflow:

```
const details = await workflow.details();
```

### Execute Workflow[](https://mastra.ai/docs/reference/client-js/workflows#execute-workflow)

Execute a workflow with input parameters:

```
const result = await workflow.execute({
  input: {
    param1: "value1",
    param2: "value2",
  },
});
```

### Resume Workflow[](https://mastra.ai/docs/reference/client-js/workflows#resume-workflow)

Resume a suspended workflow step:

```
const result = await workflow.resume({
  stepId: "step-id",
  runId: "run-id",
  contextData: { key: "value" },
});
```

### Watch Workflow[](https://mastra.ai/docs/reference/client-js/workflows#watch-workflow)

Watch workflow transitions in real-time:

```
const response = await workflow.watch();
 
// Read Transition Data from response body
const reader = response.body.getReader();
let buffer = "";
while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  buffer += new TextDecoder().decode(value);
 
  // Split the buffer into records
  const records = buffer.split("\x1E");
 
  buffer = records.pop() || "";
 
  // Process each record
  for (const record of records) {
    // Handle each record
    const { activePaths, context, timestamp } = record;
    console.log({
      activePaths,
      context,
      timestamp,
    });
  }
}
```

Last updated on February 25, 2025

[Tools API](https://mastra.ai/docs/reference/client-js/tools "Tools API")[Vectors API](https://mastra.ai/docs/reference/client-js/vectors "Vectors API")



================================================================================
Section 110: Content from https://mastra.ai/docs/reference/client-js/vectors
================================================================================

Title: Vectors API

URL Source: https://mastra.ai/docs/reference/client-js/vectors

Markdown Content:
Vectors API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Vectors API](https://mastra.ai/docs/reference/client-js/vectors#)[Working with Vectors](https://mastra.ai/docs/reference/client-js/vectors#working-with-vectors)[Vector Methods](https://mastra.ai/docs/reference/client-js/vectors#vector-methods)[Get Vector Index Details](https://mastra.ai/docs/reference/client-js/vectors#get-vector-index-details)[Create Vector Index](https://mastra.ai/docs/reference/client-js/vectors#create-vector-index)[Upsert Vectors](https://mastra.ai/docs/reference/client-js/vectors#upsert-vectors)[Query Vectors](https://mastra.ai/docs/reference/client-js/vectors#query-vectors)[Get All Indexes](https://mastra.ai/docs/reference/client-js/vectors#get-all-indexes)[Delete Index](https://mastra.ai/docs/reference/client-js/vectors#delete-index)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/vectors.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Vectors API

Vectors API
===========

The Vectors API provides methods to work with vector embeddings for semantic search and similarity matching in Mastra.

Working with Vectors[](https://mastra.ai/docs/reference/client-js/vectors#working-with-vectors)
-----------------------------------------------------------------------------------------------

Get an instance of a vector store:

```
const vector = client.getVector("vector-name");
```

Vector Methods[](https://mastra.ai/docs/reference/client-js/vectors#vector-methods)
-----------------------------------------------------------------------------------

### Get Vector Index Details[](https://mastra.ai/docs/reference/client-js/vectors#get-vector-index-details)

Retrieve information about a specific vector index:

```
const details = await vector.details("index-name");
```

### Create Vector Index[](https://mastra.ai/docs/reference/client-js/vectors#create-vector-index)

Create a new vector index:

```
const result = await vector.createIndex({
  indexName: "new-index",
  dimension: 128,
  metric: "cosine", // 'cosine', 'euclidean', or 'dotproduct'
});
```

### Upsert Vectors[](https://mastra.ai/docs/reference/client-js/vectors#upsert-vectors)

Add or update vectors in an index:

```
const ids = await vector.upsert({
  indexName: "my-index",
  vectors: [
    [0.1, 0.2, 0.3], // First vector
    [0.4, 0.5, 0.6], // Second vector
  ],
  metadata: [{ label: "first" }, { label: "second" }],
  ids: ["id1", "id2"], // Optional: Custom IDs
});
```

### Query Vectors[](https://mastra.ai/docs/reference/client-js/vectors#query-vectors)

Search for similar vectors:

```
const results = await vector.query({
  indexName: "my-index",
  queryVector: [0.1, 0.2, 0.3],
  topK: 10,
  filter: { label: "first" }, // Optional: Metadata filter
  includeVector: true, // Optional: Include vectors in results
});
```

### Get All Indexes[](https://mastra.ai/docs/reference/client-js/vectors#get-all-indexes)

List all available indexes:

```
const indexes = await vector.getIndexes();
```

### Delete Index[](https://mastra.ai/docs/reference/client-js/vectors#delete-index)

Delete a vector index:

```
const result = await vector.delete("index-name");
```

Last updated on February 25, 2025

[Workflows API](https://mastra.ai/docs/reference/client-js/workflows "Workflows API")[Logs API](https://mastra.ai/docs/reference/client-js/logs "Logs API")



================================================================================
Section 111: Content from https://mastra.ai/docs/reference/client-js/logs
================================================================================

Title: Logs API

URL Source: https://mastra.ai/docs/reference/client-js/logs

Markdown Content:
Logs API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Logs API](https://mastra.ai/docs/reference/client-js/logs#)[Getting Logs](https://mastra.ai/docs/reference/client-js/logs#getting-logs)[Getting Logs for a Specific Run](https://mastra.ai/docs/reference/client-js/logs#getting-logs-for-a-specific-run)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/logs.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Logs API

Logs API
========

The Logs API provides methods to access and query system logs and debugging information in Mastra.

Getting Logs[](https://mastra.ai/docs/reference/client-js/logs#getting-logs)
----------------------------------------------------------------------------

Retrieve system logs with optional filtering:

```
const logs = await client.getLogs({
  transportId: "transport-1",
});
```

Getting Logs for a Specific Run[](https://mastra.ai/docs/reference/client-js/logs#getting-logs-for-a-specific-run)
------------------------------------------------------------------------------------------------------------------

Retrieve logs for a specific execution run:

```
const runLogs = await client.getLogForRun({
  runId: "run-1",
  transportId: "transport-1",
});
```

Last updated on February 25, 2025

[Vectors API](https://mastra.ai/docs/reference/client-js/vectors "Vectors API")[Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry "Telemetry API")



================================================================================
Section 112: Content from https://mastra.ai/docs/reference/client-js/telemetry
================================================================================

Title: Telemetry API

URL Source: https://mastra.ai/docs/reference/client-js/telemetry

Markdown Content:
Telemetry API
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry#)[Getting Traces](https://mastra.ai/docs/reference/client-js/telemetry#getting-traces)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/telemetry.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Telemetry API

Telemetry API
=============

The Telemetry API provides methods to retrieve and analyze traces from your Mastra application. This helps you monitor and debug your application’s behavior and performance.

Getting Traces[](https://mastra.ai/docs/reference/client-js/telemetry#getting-traces)
-------------------------------------------------------------------------------------

Retrieve traces with optional filtering and pagination:

```
const telemetry = await client.getTelemetry({
  name: "trace-name", // Optional: Filter by trace name
  scope: "scope-name", // Optional: Filter by scope
  page: 1, // Optional: Page number for pagination
  perPage: 10, // Optional: Number of items per page
  attribute: {
    // Optional: Filter by custom attributes
    key: "value",
  },
});
```

Last updated on February 25, 2025

[Logs API](https://mastra.ai/docs/reference/client-js/logs "Logs API")[Error Handling](https://mastra.ai/docs/reference/client-js/error-handling "Error Handling")



================================================================================
Section 113: Content from https://mastra.ai/docs/reference/client-js/error-handling
================================================================================

Title: Error Handling

URL Source: https://mastra.ai/docs/reference/client-js/error-handling

Markdown Content:
Error Handling
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Error Handling](https://mastra.ai/docs/reference/client-js/error-handling#)[Error Handling](https://mastra.ai/docs/reference/client-js/error-handling#error-handling)[Retry Mechanism](https://mastra.ai/docs/reference/client-js/error-handling#retry-mechanism)[How Retries Work](https://mastra.ai/docs/reference/client-js/error-handling#how-retries-work)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/client-js/error-handling.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Client SDK - JS](https://mastra.ai/docs/reference/client-js "Client SDK - JS")Error Handling

Error Handling
==============

The Mastra Client SDK includes built-in retry mechanism and error handling capabilities.

Error Handling[](https://mastra.ai/docs/reference/client-js/error-handling#error-handling)
------------------------------------------------------------------------------------------

All API methods can throw errors that you can catch and handle:

```
try {
  const agent = client.getAgent("agent-id");
  const response = await agent.generate({
    messages: [{ role: "user", content: "Hello" }],
  });
} catch (error) {
  console.error("An error occurred:", error.message);
}
```

Retry Mechanism[](https://mastra.ai/docs/reference/client-js/error-handling#retry-mechanism)
--------------------------------------------------------------------------------------------

The client automatically retries failed requests with exponential backoff:

```
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
  retries: 3, // Number of retry attempts
  backoffMs: 300, // Initial backoff time
  maxBackoffMs: 5000, // Maximum backoff time
});
```

### How Retries Work[](https://mastra.ai/docs/reference/client-js/error-handling#how-retries-work)

1.  First attempt fails → Wait 300ms
2.  Second attempt fails → Wait 600ms
3.  Third attempt fails → Wait 1200ms
4.  Final attempt fails → Throw error

Last updated on February 25, 2025

[Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry "Telemetry API")[Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Mastra Voice")



================================================================================
Section 114: Content from https://mastra.ai/docs/reference/voice/mastra-voice
================================================================================

Title: Reference: MastraVoice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/mastra-voice

Markdown Content:
Reference: MastraVoice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[MastraVoice](https://mastra.ai/docs/reference/voice/mastra-voice#)[Usage Example](https://mastra.ai/docs/reference/voice/mastra-voice#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/mastra-voice#constructor-parameters)[BuiltInModelConfig](https://mastra.ai/docs/reference/voice/mastra-voice#builtinmodelconfig)[Abstract Methods](https://mastra.ai/docs/reference/voice/mastra-voice#abstract-methods)[speak()](https://mastra.ai/docs/reference/voice/mastra-voice#speak)[Purpose](https://mastra.ai/docs/reference/voice/mastra-voice#purpose)[listen()](https://mastra.ai/docs/reference/voice/mastra-voice#listen)[Purpose](https://mastra.ai/docs/reference/voice/mastra-voice#purpose-1)[getSpeakers()](https://mastra.ai/docs/reference/voice/mastra-voice#getspeakers)[Purpose](https://mastra.ai/docs/reference/voice/mastra-voice#purpose-2)[Protected Properties](https://mastra.ai/docs/reference/voice/mastra-voice#protected-properties)[Telemetry Support](https://mastra.ai/docs/reference/voice/mastra-voice#telemetry-support)[Notes](https://mastra.ai/docs/reference/voice/mastra-voice#notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/mastra-voice.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")VoiceMastra Voice

MastraVoice
===========

The MastraVoice class is an abstract base class that defines the core interface for voice services in Mastra. All voice provider implementations (like OpenAI, Deepgram, PlayAI, Speechify) extend this class to provide their specific functionality.

Usage Example[](https://mastra.ai/docs/reference/voice/mastra-voice#usage-example)
----------------------------------------------------------------------------------

```
import { MastraVoice } from "@mastra/core/voice";
 
// Create a voice provider implementation
class MyVoiceProvider extends MastraVoice {
  constructor(config: { speechModel?: ModelConfig; listeningModel?: ModelConfig; speaker?: string }) {
    super({
      speechModel: config.speechModel,
      listeningModel: config.listeningModel,
      speaker: config.speaker
    });
  }
 
  // Implement required abstract methods
  async speak(input: string | NodeJS.ReadableStream, options?: { speaker?: string }): Promise<NodeJS.ReadableStream> {
    // Implement text-to-speech conversion
  }
 
  async listen(audioStream: NodeJS.ReadableStream, options?: any): Promise<string | NodeJS.ReadableStream> {
    // Implement speech-to-text conversion
  }
 
  async getSpeakers(): Promise<Array<{ voiceId: string }>> {
    // Return list of available voices
  }
}
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/mastra-voice#constructor-parameters)
----------------------------------------------------------------------------------------------------

### config:

object

Configuration object for the voice service

### config.speechModel?:

BuiltInModelConfig

Configuration for the text-to-speech model

### config.listeningModel?:

BuiltInModelConfig

Configuration for the speech-to-text model

### config.speaker?:

string

Default speaker/voice ID to use

### BuiltInModelConfig[](https://mastra.ai/docs/reference/voice/mastra-voice#builtinmodelconfig)

### name:

string

Name of the model to use

### apiKey?:

string

API key for the model service

Abstract Methods[](https://mastra.ai/docs/reference/voice/mastra-voice#abstract-methods)
----------------------------------------------------------------------------------------

These methods must be implemented by any class extending MastraVoice.

### speak()[](https://mastra.ai/docs/reference/voice/mastra-voice#speak)

Converts text to speech using the configured speech model.

```
abstract speak(
  input: string | NodeJS.ReadableStream,
  options?: {
    speaker?: string;
    [key: string]: any;
  }
): Promise<NodeJS.ReadableStream>
```

#### Purpose[](https://mastra.ai/docs/reference/voice/mastra-voice#purpose)

*   Takes text input and converts it to speech using the provider’s text-to-speech service
*   Supports both string and stream input for flexibility
*   Allows overriding the default speaker/voice through options
*   Returns a stream of audio data that can be played or saved

### listen()[](https://mastra.ai/docs/reference/voice/mastra-voice#listen)

Converts speech to text using the configured listening model.

```
abstract listen(
  audioStream: NodeJS.ReadableStream,
  options?: {
    [key: string]: any;
  }
): Promise<string | NodeJS.ReadableStream>
```

#### Purpose[](https://mastra.ai/docs/reference/voice/mastra-voice#purpose-1)

*   Takes an audio stream and converts it to text using the provider’s speech-to-text service
*   Supports provider-specific options for transcription configuration
*   Can return either a complete text transcription or a stream of transcribed text
*   Not all providers support this functionality (e.g., PlayAI, Speechify)

### getSpeakers()[](https://mastra.ai/docs/reference/voice/mastra-voice#getspeakers)

Returns a list of available voices supported by the provider.

```
abstract getSpeakers(): Promise<Array<{ voiceId: string; [key: string]: any }>>
```

#### Purpose[](https://mastra.ai/docs/reference/voice/mastra-voice#purpose-2)

*   Retrieves the list of available voices/speakers from the provider
*   Each voice must have at least a voiceId property
*   Providers can include additional metadata about each voice
*   Used to discover available voices for text-to-speech conversion

Protected Properties[](https://mastra.ai/docs/reference/voice/mastra-voice#protected-properties)
------------------------------------------------------------------------------------------------

### speechModel?:

BuiltInModelConfig | undefined

Configuration for the text-to-speech model

### listeningModel?:

BuiltInModelConfig | undefined

Configuration for the speech-to-text model

### speaker?:

string | undefined

Default speaker/voice ID

Telemetry Support[](https://mastra.ai/docs/reference/voice/mastra-voice#telemetry-support)
------------------------------------------------------------------------------------------

MastraVoice includes built-in telemetry support through the `traced` method, which wraps method calls with performance tracking and error monitoring.

Notes[](https://mastra.ai/docs/reference/voice/mastra-voice#notes)
------------------------------------------------------------------

*   MastraVoice is an abstract class and cannot be instantiated directly
*   Implementations must provide concrete implementations for all abstract methods
*   The class provides a consistent interface across different voice service providers
*   Configuration and authentication details are provider-specific
*   Telemetry is automatically handled for all method calls

Last updated on February 26, 2025

[Error Handling](https://mastra.ai/docs/reference/client-js/error-handling "Error Handling")[Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice "Composite Voice")



================================================================================
Section 115: Content from https://mastra.ai/docs/reference/voice/composite-voice
================================================================================

Title: Reference: CompositeVoice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/composite-voice

Markdown Content:
Reference: CompositeVoice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[CompositeVoice](https://mastra.ai/docs/reference/voice/composite-voice#)[Usage Example](https://mastra.ai/docs/reference/voice/composite-voice#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/composite-voice#constructor-parameters)[Methods](https://mastra.ai/docs/reference/voice/composite-voice#methods)[speak()](https://mastra.ai/docs/reference/voice/composite-voice#speak)[Notes](https://mastra.ai/docs/reference/voice/composite-voice#notes)[listen()](https://mastra.ai/docs/reference/voice/composite-voice#listen)[Notes](https://mastra.ai/docs/reference/voice/composite-voice#notes-1)[getSpeakers()](https://mastra.ai/docs/reference/voice/composite-voice#getspeakers)[Notes](https://mastra.ai/docs/reference/voice/composite-voice#notes-2)[Notes](https://mastra.ai/docs/reference/voice/composite-voice#notes-3)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/composite-voice.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")Composite Voice

CompositeVoice
==============

The CompositeVoice class allows you to combine different voice providers for text-to-speech and speech-to-text operations. This is particularly useful when you want to use the best provider for each operation - for example, using OpenAI for speech-to-text and PlayAI for text-to-speech.

CompositeVoice is used internally by the Agent class to provide flexible voice capabilities.

Usage Example[](https://mastra.ai/docs/reference/voice/composite-voice#usage-example)
-------------------------------------------------------------------------------------

```
import { CompositeVoice } from "@mastra/core/voice";
import { OpenAIVoice } from "@mastra/voice-openai";
import { PlayAIVoice } from "@mastra/voice-playai";
 
// Create voice providers
const openai = new OpenAIVoice();
const playai = new PlayAIVoice();
 
// Use OpenAI for listening (speech-to-text) and PlayAI for speaking (text-to-speech)
const voice = new CompositeVoice({
  listeningProvider: openai,
  speakingProvider: playai
});
 
// Convert speech to text using OpenAI
const text = await voice.listen(audioStream);
 
// Convert text to speech using PlayAI
const audio = await voice.speak("Hello, world!");
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/composite-voice#constructor-parameters)
-------------------------------------------------------------------------------------------------------

### config:

object

Configuration object for the composite voice service

### config.listeningProvider?:

MastraVoice

Voice provider to use for speech-to-text operations

### config.speakingProvider?:

MastraVoice

Voice provider to use for text-to-speech operations

Methods[](https://mastra.ai/docs/reference/voice/composite-voice#methods)
-------------------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/composite-voice#speak)

Converts text to speech using the configured speaking provider.

### input:

string | NodeJS.ReadableStream

Text to convert to speech

### options?:

object

Provider-specific options passed to the speaking provider

#### Notes[](https://mastra.ai/docs/reference/voice/composite-voice#notes)

*   If no speaking provider is configured, this method will throw an error
*   Options are passed through to the configured speaking provider
*   Returns a stream of audio data

### listen()[](https://mastra.ai/docs/reference/voice/composite-voice#listen)

Converts speech to text using the configured listening provider.

### audioStream:

NodeJS.ReadableStream

Audio stream to convert to text

### options?:

object

Provider-specific options passed to the listening provider

#### Notes[](https://mastra.ai/docs/reference/voice/composite-voice#notes-1)

*   If no listening provider is configured, this method will throw an error
*   Options are passed through to the configured listening provider
*   Returns either a string or a stream of transcribed text, depending on the provider

### getSpeakers()[](https://mastra.ai/docs/reference/voice/composite-voice#getspeakers)

Returns a list of available voices from the speaking provider, where each node contains:

### voiceId:

string

Unique identifier for the voice

### key?:

value

Additional voice properties that vary by provider (e.g., name, language)

#### Notes[](https://mastra.ai/docs/reference/voice/composite-voice#notes-2)

*   Returns voices from the speaking provider only
*   If no speaking provider is configured, returns an empty array
*   Each voice object will have at least a voiceId property
*   Additional voice properties depend on the speaking provider

Notes[](https://mastra.ai/docs/reference/voice/composite-voice#notes-3)
-----------------------------------------------------------------------

*   CompositeVoice implements the MastraVoice interface
*   Each provider maintains its own configuration and state
*   Error handling should consider both providers’ potential failure modes
*   Ideal for scenarios where different providers excel at different operations

Last updated on February 26, 2025

[Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Mastra Voice")[Deepgram](https://mastra.ai/docs/reference/voice/deepgram "Deepgram")



================================================================================
Section 116: Content from https://mastra.ai/docs/reference/voice/deepgram
================================================================================

Title: Reference: Deepgram Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/deepgram

Markdown Content:
Reference: Deepgram Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Deepgram](https://mastra.ai/docs/reference/voice/deepgram#)[Usage Example](https://mastra.ai/docs/reference/voice/deepgram#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/deepgram#constructor-parameters)[DeepgramVoiceConfig](https://mastra.ai/docs/reference/voice/deepgram#deepgramvoiceconfig)[Methods](https://mastra.ai/docs/reference/voice/deepgram#methods)[speak()](https://mastra.ai/docs/reference/voice/deepgram#speak)[listen()](https://mastra.ai/docs/reference/voice/deepgram#listen)[getSpeakers()](https://mastra.ai/docs/reference/voice/deepgram#getspeakers)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/deepgram.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")Deepgram

Deepgram
========

The Deepgram voice implementation in Mastra provides text-to-speech (TTS) and speech-to-text (STT) capabilities using Deepgram’s API. It supports multiple voice models and languages, with configurable options for both speech synthesis and transcription.

Usage Example[](https://mastra.ai/docs/reference/voice/deepgram#usage-example)
------------------------------------------------------------------------------

```
import { DeepgramVoice } from "@mastra/voice-deepgram";
 
// Initialize with default configuration (uses DEEPGRAM_API_KEY environment variable)
const voice = new DeepgramVoice();
 
// Initialize with custom configuration
const voice = new DeepgramVoice({
  speechModel: {
    name: 'aura',
    apiKey: 'your-api-key',
  },
  listeningModel: {
    name: 'nova-2',
    apiKey: 'your-api-key',
  },
  speaker: 'asteria-en',
});
 
// Text-to-Speech
const audioStream = await voice.speak("Hello, world!");
 
// Speech-to-Text
const transcript = await voice.listen(audioStream);
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/deepgram#constructor-parameters)
------------------------------------------------------------------------------------------------

### speechModel?:

DeepgramVoiceConfig

\= { name: 'aura' }

Configuration for text-to-speech functionality.

### listeningModel?:

DeepgramVoiceConfig

\= { name: 'nova' }

Configuration for speech-to-text functionality.

### speaker?:

DeepgramVoiceId

\= 'asteria-en'

Default voice to use for text-to-speech

### DeepgramVoiceConfig[](https://mastra.ai/docs/reference/voice/deepgram#deepgramvoiceconfig)

### name?:

DeepgramModel

The Deepgram model to use

### apiKey?:

string

Deepgram API key. Falls back to DEEPGRAM\_API\_KEY environment variable

### properties?:

Record<string, any\>

Additional properties to pass to the Deepgram API

### language?:

string

Language code for the model

Methods[](https://mastra.ai/docs/reference/voice/deepgram#methods)
------------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/deepgram#speak)

Converts text to speech using the configured speech model and voice.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options?:

object

Additional options for speech synthesis

### options.speaker?:

string

Override the default speaker for this request

Returns: `Promise<NodeJS.ReadableStream>`

### listen()[](https://mastra.ai/docs/reference/voice/deepgram#listen)

Converts speech to text using the configured listening model.

### audioStream:

NodeJS.ReadableStream

Audio stream to transcribe

### options?:

object

Additional options to pass to the Deepgram API

Returns: `Promise<string>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/deepgram#getspeakers)

Returns a list of available voice options.

### voiceId:

string

Unique identifier for the voice

Last updated on February 26, 2025

[Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice "Composite Voice")[ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs "ElevenLabs")



================================================================================
Section 117: Content from https://mastra.ai/docs/reference/voice/elevenlabs
================================================================================

Title: Reference: ElevenLabs Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/elevenlabs

Markdown Content:
Reference: ElevenLabs Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs#)[Usage Example](https://mastra.ai/docs/reference/voice/elevenlabs#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/elevenlabs#constructor-parameters)[ElevenLabsVoiceConfig](https://mastra.ai/docs/reference/voice/elevenlabs#elevenlabsvoiceconfig)[Methods](https://mastra.ai/docs/reference/voice/elevenlabs#methods)[speak()](https://mastra.ai/docs/reference/voice/elevenlabs#speak)[getSpeakers()](https://mastra.ai/docs/reference/voice/elevenlabs#getspeakers)[listen()](https://mastra.ai/docs/reference/voice/elevenlabs#listen)[Important Notes](https://mastra.ai/docs/reference/voice/elevenlabs#important-notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/elevenlabs.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")ElevenLabs

ElevenLabs
==========

The ElevenLabs voice implementation in Mastra provides high-quality text-to-speech (TTS) and speech-to-text (STT) capabilities using the ElevenLabs API.

Usage Example[](https://mastra.ai/docs/reference/voice/elevenlabs#usage-example)
--------------------------------------------------------------------------------

```
import { ElevenLabsVoice } from "@mastra/voice-elevenlabs";
 
// Initialize with default configuration (uses ELEVENLABS_API_KEY environment variable)
const voice = new ElevenLabsVoice();
 
// Initialize with custom configuration
const voice = new ElevenLabsVoice({
  speechModel: {
    name: 'eleven_multilingual_v2',
    apiKey: 'your-api-key',
  },
  speaker: 'custom-speaker-id',
});
 
// Text-to-Speech
const audioStream = await voice.speak("Hello, world!");
 
// Get available speakers
const speakers = await voice.getSpeakers();
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/elevenlabs#constructor-parameters)
--------------------------------------------------------------------------------------------------

### speechModel?:

ElevenLabsVoiceConfig

\= { name: 'eleven\_multilingual\_v2' }

Configuration for text-to-speech functionality.

### speaker?:

string

\= '9BWtsMINqrJLrRacOk9x' (Aria voice)

ID of the speaker to use for text-to-speech

### ElevenLabsVoiceConfig[](https://mastra.ai/docs/reference/voice/elevenlabs#elevenlabsvoiceconfig)

### name?:

ElevenLabsModel

\= 'eleven\_multilingual\_v2'

The ElevenLabs model to use

### apiKey?:

string

ElevenLabs API key. Falls back to ELEVENLABS\_API\_KEY environment variable

Methods[](https://mastra.ai/docs/reference/voice/elevenlabs#methods)
--------------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/elevenlabs#speak)

Converts text to speech using the configured speech model and voice.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options?:

object

Additional options for speech synthesis

### options.speaker?:

string

Override the default speaker ID for this request

Returns: `Promise<NodeJS.ReadableStream>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/elevenlabs#getspeakers)

Returns an array of available voice options, where each node contains:

### voiceId:

string

Unique identifier for the voice

### name:

string

Display name of the voice

### language:

string

Language code for the voice

### gender:

string

Gender of the voice

### listen()[](https://mastra.ai/docs/reference/voice/elevenlabs#listen)

Converts audio input to text using ElevenLabs Speech-to-Text API.

### input:

NodeJS.ReadableStream

A readable stream containing the audio data to transcribe

### options?:

object

Configuration options for the transcription

The options object supports the following properties:

### language\_code?:

string

ISO language code (e.g., 'en', 'fr', 'es')

### tag\_audio\_events?:

boolean

Whether to tag audio events like \[MUSIC\], \[LAUGHTER\], etc.

### num\_speakers?:

number

Number of speakers to detect in the audio

### filetype?:

string

Audio file format (e.g., 'mp3', 'wav', 'ogg')

### timeoutInSeconds?:

number

Request timeout in seconds

### maxRetries?:

number

Maximum number of retry attempts

### abortSignal?:

AbortSignal

Signal to abort the request

Returns: `Promise<string>` - A Promise that resolves to the transcribed text

Important Notes[](https://mastra.ai/docs/reference/voice/elevenlabs#important-notes)
------------------------------------------------------------------------------------

1.  An ElevenLabs API key is required. Set it via the `ELEVENLABS_API_KEY` environment variable or pass it in the constructor.
2.  The default speaker is set to Aria (ID: ‘9BWtsMINqrJLrRacOk9x’).
3.  Speech-to-text functionality is not supported by ElevenLabs.
4.  Available speakers can be retrieved using the `getSpeakers()` method, which returns detailed information about each voice including language and gender.

Last updated on February 27, 2025

[Deepgram](https://mastra.ai/docs/reference/voice/deepgram "Deepgram")[Google](https://mastra.ai/docs/reference/voice/google "Google")



================================================================================
Section 118: Content from https://mastra.ai/docs/reference/voice/google
================================================================================

Title: Reference: Google Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/google

Markdown Content:
Reference: Google Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Google](https://mastra.ai/docs/reference/voice/google#)[Usage Example](https://mastra.ai/docs/reference/voice/google#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/google#constructor-parameters)[GoogleModelConfig](https://mastra.ai/docs/reference/voice/google#googlemodelconfig)[Methods](https://mastra.ai/docs/reference/voice/google#methods)[speak()](https://mastra.ai/docs/reference/voice/google#speak)[listen()](https://mastra.ai/docs/reference/voice/google#listen)[getSpeakers()](https://mastra.ai/docs/reference/voice/google#getspeakers)[Important Notes](https://mastra.ai/docs/reference/voice/google#important-notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/google.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")Google

Google
======

The Google Voice implementation in Mastra provides both text-to-speech (TTS) and speech-to-text (STT) capabilities using Google Cloud services. It supports multiple voices, languages, and advanced audio configuration options.

Usage Example[](https://mastra.ai/docs/reference/voice/google#usage-example)
----------------------------------------------------------------------------

```
import { GoogleVoice } from "@mastra/voice-google";
 
// Initialize with default configuration (uses GOOGLE_API_KEY environment variable)
const voice = new GoogleVoice();
 
// Initialize with custom configuration
const voice = new GoogleVoice({
  speechModel: {
    apiKey: 'your-speech-api-key',
  },
  listeningModel: {
    apiKey: 'your-listening-api-key',
  },
  speaker: 'en-US-Casual-K',
});
 
// Text-to-Speech
const audioStream = await voice.speak("Hello, world!", {
  languageCode: 'en-US',
  audioConfig: {
    audioEncoding: 'LINEAR16',
  },
});
 
// Speech-to-Text
const transcript = await voice.listen(audioStream, {
  config: {
    encoding: 'LINEAR16',
    languageCode: 'en-US',
  },
});
 
// Get available voices for a specific language
const voices = await voice.getSpeakers({ languageCode: 'en-US' });
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/google#constructor-parameters)
----------------------------------------------------------------------------------------------

### speechModel?:

GoogleModelConfig

\= { apiKey: process.env.GOOGLE\_API\_KEY }

Configuration for text-to-speech functionality

### listeningModel?:

GoogleModelConfig

\= { apiKey: process.env.GOOGLE\_API\_KEY }

Configuration for speech-to-text functionality

### speaker?:

string

\= 'en-US-Casual-K'

Default voice ID to use for text-to-speech

### GoogleModelConfig[](https://mastra.ai/docs/reference/voice/google#googlemodelconfig)

### apiKey?:

string

Google Cloud API key. Falls back to GOOGLE\_API\_KEY environment variable

Methods[](https://mastra.ai/docs/reference/voice/google#methods)
----------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/google#speak)

Converts text to speech using Google Cloud Text-to-Speech service.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options?:

object

Speech synthesis options

### options.speaker?:

string

Voice ID to use for this request

### options.languageCode?:

string

Language code for the voice (e.g., 'en-US'). Defaults to the language code from the speaker ID or 'en-US'

### options.audioConfig?:

ISynthesizeSpeechRequest\['audioConfig'\]

\= { audioEncoding: 'LINEAR16' }

Audio configuration options from Google Cloud Text-to-Speech API

Returns: `Promise<NodeJS.ReadableStream>`

### listen()[](https://mastra.ai/docs/reference/voice/google#listen)

Converts speech to text using Google Cloud Speech-to-Text service.

### audioStream:

NodeJS.ReadableStream

Audio stream to transcribe

### options?:

object

Recognition options

### options.stream?:

boolean

Whether to use streaming recognition

### options.config?:

IRecognitionConfig

\= { encoding: 'LINEAR16', languageCode: 'en-US' }

Recognition configuration from Google Cloud Speech-to-Text API

Returns: `Promise<string>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/google#getspeakers)

Returns an array of available voice options, where each node contains:

### voiceId:

string

Unique identifier for the voice

### languageCodes:

string\[\]

List of language codes supported by this voice

Important Notes[](https://mastra.ai/docs/reference/voice/google#important-notes)
--------------------------------------------------------------------------------

1.  A Google Cloud API key is required. Set it via the `GOOGLE_API_KEY` environment variable or pass it in the constructor.
2.  The default voice is set to ‘en-US-Casual-K’.
3.  Both text-to-speech and speech-to-text services use LINEAR16 as the default audio encoding.
4.  The `speak()` method supports advanced audio configuration through the Google Cloud Text-to-Speech API.
5.  The `listen()` method supports various recognition configurations through the Google Cloud Speech-to-Text API.
6.  Available voices can be filtered by language code using the `getSpeakers()` method.

Last updated on February 26, 2025

[ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs "ElevenLabs")[Murf](https://mastra.ai/docs/reference/voice/murf "Murf")



================================================================================
Section 119: Content from https://mastra.ai/docs/reference/voice/murf
================================================================================

Title: Reference: Murf Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/murf

Markdown Content:
Reference: Murf Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Murf](https://mastra.ai/docs/reference/voice/murf#)[Usage Example](https://mastra.ai/docs/reference/voice/murf#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/murf#constructor-parameters)[MurfConfig](https://mastra.ai/docs/reference/voice/murf#murfconfig)[Speech Properties](https://mastra.ai/docs/reference/voice/murf#speech-properties)[Methods](https://mastra.ai/docs/reference/voice/murf#methods)[speak()](https://mastra.ai/docs/reference/voice/murf#speak)[getSpeakers()](https://mastra.ai/docs/reference/voice/murf#getspeakers)[listen()](https://mastra.ai/docs/reference/voice/murf#listen)[Important Notes](https://mastra.ai/docs/reference/voice/murf#important-notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/murf.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")Murf

Murf
====

The Murf voice implementation in Mastra provides text-to-speech (TTS) capabilities using Murf’s AI voice service. It supports multiple voices across different languages.

Usage Example[](https://mastra.ai/docs/reference/voice/murf#usage-example)
--------------------------------------------------------------------------

```
import { MurfVoice } from "@mastra/voice-murf";
 
// Initialize with default configuration (uses MURF_API_KEY environment variable)
const voice = new MurfVoice();
 
// Initialize with custom configuration
const voice = new MurfVoice({
  speechModel: {
    name: 'GEN2',
    apiKey: 'your-api-key',
    properties: {
      format: 'MP3',
      rate: 1.0,
      pitch: 1.0,
      sampleRate: 48000,
      channelType: 'STEREO',
    },
  },
  speaker: 'en-US-cooper',
});
 
// Text-to-Speech with default settings
const audioStream = await voice.speak("Hello, world!");
 
// Text-to-Speech with custom properties
const audioStream = await voice.speak("Hello, world!", {
  speaker: 'en-UK-hazel',
  properties: {
    format: 'WAV',
    rate: 1.2,
    style: 'casual',
  },
});
 
// Get available voices
const voices = await voice.getSpeakers();
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/murf#constructor-parameters)
--------------------------------------------------------------------------------------------

### speechModel?:

MurfConfig

\= { name: 'GEN2' }

Configuration for text-to-speech functionality

### speaker?:

string

\= 'en-UK-hazel'

Default voice ID to use for text-to-speech

### MurfConfig[](https://mastra.ai/docs/reference/voice/murf#murfconfig)

### name:

'GEN1' | 'GEN2'

\= 'GEN2'

The Murf model generation to use

### apiKey?:

string

Murf API key. Falls back to MURF\_API\_KEY environment variable

### properties?:

object

Default properties for all speech synthesis requests

### Speech Properties[](https://mastra.ai/docs/reference/voice/murf#speech-properties)

### style?:

string

Speaking style for the voice

### rate?:

number

Speech rate multiplier

### pitch?:

number

Voice pitch adjustment

### sampleRate?:

8000 | 24000 | 44100 | 48000

Audio sample rate in Hz

### format?:

'MP3' | 'WAV' | 'FLAC' | 'ALAW' | 'ULAW'

Output audio format

### channelType?:

'STEREO' | 'MONO'

Audio channel configuration

### pronunciationDictionary?:

Record<string, string\>

Custom pronunciation mappings

### encodeAsBase64?:

boolean

Whether to encode the audio as base64

### variation?:

number

Voice variation parameter

### audioDuration?:

number

Target audio duration in seconds

### multiNativeLocale?:

string

Locale for multilingual support

Methods[](https://mastra.ai/docs/reference/voice/murf#methods)
--------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/murf#speak)

Converts text to speech using Murf’s API.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options?:

object

Speech synthesis options

### options.speaker?:

string

Override the default speaker for this request

### options.properties?:

object

Override default speech properties for this request

Returns: `Promise<NodeJS.ReadableStream>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/murf#getspeakers)

Returns an array of available voice options, where each node contains:

### voiceId:

string

Unique identifier for the voice

### name:

string

Display name of the voice

### language:

string

Language code for the voice

### gender:

string

Gender of the voice

### listen()[](https://mastra.ai/docs/reference/voice/murf#listen)

This method is not supported by Murf and will throw an error. Murf does not provide speech-to-text functionality.

Important Notes[](https://mastra.ai/docs/reference/voice/murf#important-notes)
------------------------------------------------------------------------------

1.  A Murf API key is required. Set it via the `MURF_API_KEY` environment variable or pass it in the constructor.
2.  The service uses GEN2 as the default model version.
3.  Speech properties can be set at the constructor level and overridden per request.
4.  The service supports extensive audio customization through properties like format, sample rate, and channel type.
5.  Speech-to-text functionality is not supported.

Last updated on February 26, 2025

[Google](https://mastra.ai/docs/reference/voice/google "Google")[OpenAI](https://mastra.ai/docs/reference/voice/openai "OpenAI")



================================================================================
Section 120: Content from https://mastra.ai/docs/reference/voice/openai
================================================================================

Title: Reference: OpenAI Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/openai

Markdown Content:
Reference: OpenAI Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[OpenAI](https://mastra.ai/docs/reference/voice/openai#)[Usage Example](https://mastra.ai/docs/reference/voice/openai#usage-example)[Configuration](https://mastra.ai/docs/reference/voice/openai#configuration)[Constructor Options](https://mastra.ai/docs/reference/voice/openai#constructor-options)[OpenAIConfig](https://mastra.ai/docs/reference/voice/openai#openaiconfig)[Methods](https://mastra.ai/docs/reference/voice/openai#methods)[speak()](https://mastra.ai/docs/reference/voice/openai#speak)[listen()](https://mastra.ai/docs/reference/voice/openai#listen)[getSpeakers()](https://mastra.ai/docs/reference/voice/openai#getspeakers)[Notes](https://mastra.ai/docs/reference/voice/openai#notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/openai.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")OpenAI

OpenAI
======

The OpenAIVoice class in Mastra provides text-to-speech and speech-to-text capabilities using OpenAI’s models.

Usage Example[](https://mastra.ai/docs/reference/voice/openai#usage-example)
----------------------------------------------------------------------------

```
import { OpenAIVoice } from '@mastra/voice-openai';
 
// Initialize with default configuration using environment variables
const voice = new OpenAIVoice();
 
// Or initialize with specific configuration
const voiceWithConfig = new OpenAIVoice({
  speechModel: {
    name: 'tts-1-hd',
    apiKey: 'your-openai-api-key'
  },
  listeningModel: {
    name: 'whisper-1',
    apiKey: 'your-openai-api-key'
  },
  speaker: 'alloy'  // Default voice
});
 
// Convert text to speech
const audioStream = await voice.speak('Hello, how can I help you?', {
  speaker: 'nova',  // Override default voice
  speed: 1.2  // Adjust speech speed
});
 
// Convert speech to text
const text = await voice.listen(audioStream, {
  filetype: 'mp3'
});
```

Configuration[](https://mastra.ai/docs/reference/voice/openai#configuration)
----------------------------------------------------------------------------

### Constructor Options[](https://mastra.ai/docs/reference/voice/openai#constructor-options)

### speechModel?:

OpenAIConfig

\= { name: 'tts-1' }

Configuration for text-to-speech synthesis.

### listeningModel?:

OpenAIConfig

\= { name: 'whisper-1' }

Configuration for speech-to-text recognition.

### speaker?:

OpenAIVoiceId

\= 'alloy'

Default voice ID for speech synthesis.

### OpenAIConfig[](https://mastra.ai/docs/reference/voice/openai#openaiconfig)

### name?:

'tts-1' | 'tts-1-hd' | 'whisper-1'

Model name. Use 'tts-1-hd' for higher quality audio.

### apiKey?:

string

OpenAI API key. Falls back to OPENAI\_API\_KEY environment variable.

Methods[](https://mastra.ai/docs/reference/voice/openai#methods)
----------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/openai#speak)

Converts text to speech using OpenAI’s text-to-speech models.

### input:

string | NodeJS.ReadableStream

Text or text stream to convert to speech.

### options.speaker?:

OpenAIVoiceId

\= Constructor's speaker value

Voice ID to use for speech synthesis.

### options.speed?:

number

\= 1.0

Speech speed multiplier.

Returns: `Promise<NodeJS.ReadableStream>`

### listen()[](https://mastra.ai/docs/reference/voice/openai#listen)

Transcribes audio using OpenAI’s Whisper model.

### audioStream:

NodeJS.ReadableStream

Audio stream to transcribe.

### options.filetype?:

string

\= 'mp3'

Audio format of the input stream.

Returns: `Promise<string>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/openai#getspeakers)

Returns an array of available voice options, where each node contains:

### voiceId:

string

Unique identifier for the voice

Notes[](https://mastra.ai/docs/reference/voice/openai#notes)
------------------------------------------------------------

*   API keys can be provided via constructor options or the `OPENAI_API_KEY` environment variable
*   The `tts-1-hd` model provides higher quality audio but may have slower processing times
*   Speech recognition supports multiple audio formats including mp3, wav, and webm

Last updated on February 26, 2025

[Murf](https://mastra.ai/docs/reference/voice/murf "Murf")[PlayAI](https://mastra.ai/docs/reference/voice/playai "PlayAI")



================================================================================
Section 121: Content from https://mastra.ai/docs/reference/voice/playai
================================================================================

Title: Reference: PlayAI Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/playai

Markdown Content:
Reference: PlayAI Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[PlayAI](https://mastra.ai/docs/reference/voice/playai#)[Usage Example](https://mastra.ai/docs/reference/voice/playai#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/playai#constructor-parameters)[PlayAIConfig](https://mastra.ai/docs/reference/voice/playai#playaiconfig)[Methods](https://mastra.ai/docs/reference/voice/playai#methods)[speak()](https://mastra.ai/docs/reference/voice/playai#speak)[getSpeakers()](https://mastra.ai/docs/reference/voice/playai#getspeakers)[listen()](https://mastra.ai/docs/reference/voice/playai#listen)[Notes](https://mastra.ai/docs/reference/voice/playai#notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/playai.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")PlayAI

PlayAI
======

The PlayAI voice implementation in Mastra provides text-to-speech capabilities using PlayAI’s API.

Usage Example[](https://mastra.ai/docs/reference/voice/playai#usage-example)
----------------------------------------------------------------------------

```
import { PlayAIVoice } from "@mastra/voice-playai";
 
// Initialize with default configuration (uses PLAYAI_API_KEY environment variable and PLAYAI_USER_ID environment variable)
const voice = new PlayAIVoice();
 
// Initialize with default configuration
const voice = new PlayAIVoice({
  speechModel: {
    name: 'PlayDialog',
    apiKey: process.env.PLAYAI_API_KEY,
    userId: process.env.PLAYAI_USER_ID
  },
  speaker: 'Angelo'  // Default voice
});
 
// Convert text to speech with a specific voice
const audioStream = await voice.speak("Hello, world!", {
  speaker: 's3://voice-cloning-zero-shot/b27bc13e-996f-4841-b584-4d35801aea98/original/manifest.json' // Dexter voice
});
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/playai#constructor-parameters)
----------------------------------------------------------------------------------------------

### speechModel?:

PlayAIConfig

\= { name: 'PlayDialog' }

Configuration for text-to-speech functionality

### speaker?:

string

\= First available voice ID

Default voice ID to use for speech synthesis

### PlayAIConfig[](https://mastra.ai/docs/reference/voice/playai#playaiconfig)

### name?:

'PlayDialog' | 'Play3.0-mini'

\= 'PlayDialog'

The PlayAI model to use

### apiKey?:

string

PlayAI API key. Falls back to PLAYAI\_API\_KEY environment variable

### userId?:

string

PlayAI user ID. Falls back to PLAYAI\_USER\_ID environment variable

Methods[](https://mastra.ai/docs/reference/voice/playai#methods)
----------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/playai#speak)

Converts text to speech using the configured speech model and voice.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options.speaker?:

string

\= Constructor's speaker value

Override the default speaker for this request

Returns: `Promise<NodeJS.ReadableStream>`.

### getSpeakers()[](https://mastra.ai/docs/reference/voice/playai#getspeakers)

Returns an array of available voice options, where each node contains:

### name:

string

Name of the voice

### accent:

string

Accent of the voice (e.g., 'US', 'British', 'Australian')

### gender:

'M' | 'F'

Gender of the voice

### age:

'Young' | 'Middle' | 'Old'

Age category of the voice

### style:

'Conversational' | 'Narrative'

Speaking style of the voice

### voiceId:

string

Unique identifier for the voice

### listen()[](https://mastra.ai/docs/reference/voice/playai#listen)

This method is not supported by PlayAI and will throw an error. PlayAI does not provide speech-to-text functionality.

Notes[](https://mastra.ai/docs/reference/voice/playai#notes)
------------------------------------------------------------

*   PlayAI requires both an API key and a user ID for authentication
*   The service offers two models: ‘PlayDialog’ and ‘Play3.0-mini’
*   Each voice has a unique S3 manifest ID that must be used when making API calls

Last updated on February 26, 2025

[OpenAI](https://mastra.ai/docs/reference/voice/openai "OpenAI")[Speechify](https://mastra.ai/docs/reference/voice/speechify "Speechify")



================================================================================
Section 122: Content from https://mastra.ai/docs/reference/voice/speechify
================================================================================

Title: Reference: Speechify Voice | Voice Providers | Mastra Docs

URL Source: https://mastra.ai/docs/reference/voice/speechify

Markdown Content:
Reference: Speechify Voice | Voice Providers | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[Speechify](https://mastra.ai/docs/reference/voice/speechify#)[Usage Example](https://mastra.ai/docs/reference/voice/speechify#usage-example)[Constructor Parameters](https://mastra.ai/docs/reference/voice/speechify#constructor-parameters)[SpeechifyConfig](https://mastra.ai/docs/reference/voice/speechify#speechifyconfig)[Methods](https://mastra.ai/docs/reference/voice/speechify#methods)[speak()](https://mastra.ai/docs/reference/voice/speechify#speak)[getSpeakers()](https://mastra.ai/docs/reference/voice/speechify#getspeakers)[listen()](https://mastra.ai/docs/reference/voice/speechify#listen)[Notes](https://mastra.ai/docs/reference/voice/speechify#notes)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/reference/voice/speechify.mdx)

[Docs](https://mastra.ai/docs "Docs")[Reference](https://mastra.ai/docs/reference/core "Reference")[Voice](https://mastra.ai/docs/reference/voice/mastra-voice "Voice")Speechify

Speechify
=========

The Speechify voice implementation in Mastra provides text-to-speech capabilities using Speechify’s API.

Usage Example[](https://mastra.ai/docs/reference/voice/speechify#usage-example)
-------------------------------------------------------------------------------

```
import { SpeechifyVoice } from "@mastra/voice-speechify";
 
// Initialize with default configuration (uses SPEECHIFY_API_KEY environment variable)
const voice = new SpeechifyVoice();
 
// Initialize with custom configuration
const voice = new SpeechifyVoice({
  speechModel: {
    name: 'simba-english',
    apiKey: 'your-api-key'
  },
  speaker: 'george'  // Default voice
});
 
// Convert text to speech
const audioStream = await voice.speak("Hello, world!", {
  speaker: 'henry',  // Override default voice
});
```

Constructor Parameters[](https://mastra.ai/docs/reference/voice/speechify#constructor-parameters)
-------------------------------------------------------------------------------------------------

### speechModel?:

SpeechifyConfig

\= { name: 'simba-english' }

Configuration for text-to-speech functionality

### speaker?:

SpeechifyVoiceId

\= 'george'

Default voice ID to use for speech synthesis

### SpeechifyConfig[](https://mastra.ai/docs/reference/voice/speechify#speechifyconfig)

### name?:

VoiceModelName

\= 'simba-english'

The Speechify model to use

### apiKey?:

string

Speechify API key. Falls back to SPEECHIFY\_API\_KEY environment variable

Methods[](https://mastra.ai/docs/reference/voice/speechify#methods)
-------------------------------------------------------------------

### speak()[](https://mastra.ai/docs/reference/voice/speechify#speak)

Converts text to speech using the configured speech model and voice.

### input:

string | NodeJS.ReadableStream

Text to convert to speech. If a stream is provided, it will be converted to text first.

### options.speaker?:

string

\= Constructor's speaker value

Override the default speaker for this request

### options.model?:

VoiceModelName

\= Constructor's model value

Override the default model for this request

Returns: `Promise<NodeJS.ReadableStream>`

### getSpeakers()[](https://mastra.ai/docs/reference/voice/speechify#getspeakers)

Returns an array of available voice options, where each node contains:

### voiceId:

string

Unique identifier for the voice

### name:

string

Display name of the voice

### language:

string

Language code for the voice

### gender:

string

Gender of the voice

### listen()[](https://mastra.ai/docs/reference/voice/speechify#listen)

This method is not supported by Speechify and will throw an error. Speechify does not provide speech-to-text functionality.

Notes[](https://mastra.ai/docs/reference/voice/speechify#notes)
---------------------------------------------------------------

*   Speechify requires an API key for authentication
*   The default model is ‘simba-english’
*   Speech-to-text functionality is not supported
*   Additional audio stream options can be passed through the speak() method’s options parameter

Last updated on February 26, 2025

[PlayAI](https://mastra.ai/docs/reference/voice/playai "PlayAI")



================================================================================
Section 123: Content from https://mastra.ai/docs#
================================================================================

Title: Introduction | Mastra Docs

URL Source: https://mastra.ai/docs

Markdown Content:
Introduction | Mastra Docs
===============

[](https://mastra.ai/)

[Blog](https://mastra.ai/blog)[Showcase](https://mastra.ai/showcase)[Examples](https://mastra.ai/examples)[Docs](https://mastra.ai/docs)

CTRL K

[* [8.0k](https://github.com/mastra-ai/mastra)](https://github.com/mastra-ai/mastra)[](https://discord.gg/BTYqqHKUrf)

CTRL K

*   [Introduction](https://mastra.ai/docs)
*   Getting Started
    
    *   [Installation](https://mastra.ai/docs/getting-started/installation)
    *   [Project Structure](https://mastra.ai/docs/getting-started/project-structure)
    
*   Guides
    
    *   [Agents: Chef Michel](https://mastra.ai/docs/guides/01-chef-michel)
    *   [Tools: Stock Agent](https://mastra.ai/docs/guides/02-stock-agent)
    *   [Workflows: AI Recruiter](https://mastra.ai/docs/guides/03-recruiter)
    
*   Agents
    
    *   [Overview](https://mastra.ai/docs/agents/00-overview)
    *   [Memory](https://mastra.ai/docs/agents/01-agent-memory)
    *   [Tools](https://mastra.ai/docs/agents/02-adding-tools)
    *   [Voice](https://mastra.ai/docs/agents/03-adding-voice)
    
*   Workflows
    
    *   [Overview](https://mastra.ai/docs/workflows/00-overview)
    *   [Steps](https://mastra.ai/docs/workflows/steps)
    *   [Control Flow](https://mastra.ai/docs/workflows/control-flow)
    *   [Suspend & Resume](https://mastra.ai/docs/workflows/suspend-and-resume)
    
*   RAG
    
    *   [Overview](https://mastra.ai/docs/rag/overview)
    *   [Chunking and Embedding](https://mastra.ai/docs/rag/chunking-and-embedding)
    *   [Vector Databases](https://mastra.ai/docs/rag/vector-databases)
    *   [Retrieval](https://mastra.ai/docs/rag/retrieval)
    
*   Local Dev
    
    *   [Creating Projects](https://mastra.ai/docs/local-dev/creating-projects)
    *   [Mastra Dev](https://mastra.ai/docs/local-dev/mastra-dev)
    *   [Integrations](https://mastra.ai/docs/local-dev/integrations)
    
*   Deployment
    
    *   [Logging and Tracing](https://mastra.ai/docs/deployment/logging-and-tracing)
    *   [Deployment](https://mastra.ai/docs/deployment/deployment)
    
*   Evals
    
    *   [Overview](https://mastra.ai/docs/evals/00-overview)
    *   [Supported Evals](https://mastra.ai/docs/evals/01-supported-evals)
    *   [Custom Evals](https://mastra.ai/docs/evals/02-custom-eval)
    
*   Reference
    
    *   Core
        
        *   [Mastra Class](https://mastra.ai/docs/reference/core/mastra-class)
        
    *   CLI
        
        *   [mastra init](https://mastra.ai/docs/reference/cli/init)
        *   [mastra dev](https://mastra.ai/docs/reference/cli/dev)
        *   [mastra deploy](https://mastra.ai/docs/reference/cli/deploy)
        *   [mastra build](https://mastra.ai/docs/reference/cli/build)
        
    *   Memory
        
        *   [Memory Class](https://mastra.ai/docs/reference/memory/Memory)
        *   [.createThread()](https://mastra.ai/docs/reference/memory/createThread)
        *   [.query()](https://mastra.ai/docs/reference/memory/query)
        *   [.getThreadById()](https://mastra.ai/docs/reference/memory/getThreadById)
        *   [.getThreadsByResourceId()](https://mastra.ai/docs/reference/memory/getThreadsByResourceId)
        
    *   RAG
        
        *   [.chunk()](https://mastra.ai/docs/reference/rag/chunk)
        *   [.embed()](https://mastra.ai/docs/reference/rag/embeddings)
        *   [ExtractParams](https://mastra.ai/docs/reference/rag/extract-params)
        *   [rerank()](https://mastra.ai/docs/reference/rag/rerank)
        *   [MDocument](https://mastra.ai/docs/reference/rag/document)
        *   [Metadata Filters](https://mastra.ai/docs/reference/rag/metadata-filters)
        *   [GraphRAG](https://mastra.ai/docs/reference/rag/graph-rag)
        *   [AstraVector](https://mastra.ai/docs/reference/rag/astra)
        *   [ChromaVector](https://mastra.ai/docs/reference/rag/chroma)
        *   [CloudflareVector](https://mastra.ai/docs/reference/rag/vectorize)
        *   [PgVector](https://mastra.ai/docs/reference/rag/pg)
        *   [LibSQLVector](https://mastra.ai/docs/reference/rag/libsql)
        *   [PineconeVector](https://mastra.ai/docs/reference/rag/pinecone)
        *   [QdrantVector](https://mastra.ai/docs/reference/rag/qdrant)
        *   [UpstashVector](https://mastra.ai/docs/reference/rag/upstash)
        
    *   Tools
        
        *   [createDocumentChunkerTool()](https://mastra.ai/docs/reference/tools/document-chunker-tool)
        *   [createGraphRAGTool()](https://mastra.ai/docs/reference/tools/graph-rag-tool)
        *   [createVectorQueryTool()](https://mastra.ai/docs/reference/tools/vector-query-tool)
        *   [MastraMCPClient](https://mastra.ai/docs/reference/tools/client)
        
    *   Storage
        
        *   [LibSQL Storage](https://mastra.ai/docs/reference/storage/libsql)
        *   [PostgreSQL Storage](https://mastra.ai/docs/reference/storage/postgresql)
        *   [Upstash Storage](https://mastra.ai/docs/reference/storage/upstash)
        
    *   Agents
        
        *   [getAgent()](https://mastra.ai/docs/reference/agents/getAgent)
        *   [createTool()](https://mastra.ai/docs/reference/agents/createTool)
        *   [generate()](https://mastra.ai/docs/reference/agents/generate)
        *   [stream()](https://mastra.ai/docs/reference/agents/stream)
        
    *   Workflows
        
        *   [Workflow](https://mastra.ai/docs/reference/workflows/workflow)
        *   [Step](https://mastra.ai/docs/reference/workflows/step-class)
        *   [StepOptions](https://mastra.ai/docs/reference/workflows/step-options)
        *   [StepCondition](https://mastra.ai/docs/reference/workflows/step-condition)
        *   [.step()](https://mastra.ai/docs/reference/workflows/step-function)
        *   [.after()](https://mastra.ai/docs/reference/workflows/after)
        *   [.then()](https://mastra.ai/docs/reference/workflows/then)
        *   [.createRun()](https://mastra.ai/docs/reference/workflows/createRun)
        *   [.start()](https://mastra.ai/docs/reference/workflows/start)
        *   [.execute()](https://mastra.ai/docs/reference/workflows/execute)
        *   [.suspend()](https://mastra.ai/docs/reference/workflows/suspend)
        *   [.resume()](https://mastra.ai/docs/reference/workflows/resume)
        *   [.commit()](https://mastra.ai/docs/reference/workflows/commit)
        *   [.watch()](https://mastra.ai/docs/reference/workflows/watch)
        
    *   Observability
        
        *   Providers
            
            *   [Overview](https://mastra.ai/docs/reference/observability/providers)
            *   [SigNoz](https://mastra.ai/docs/reference/observability/providers/signoz)
            *   [Braintrust](https://mastra.ai/docs/reference/observability/providers/braintrust)
            *   [LangSmith](https://mastra.ai/docs/reference/observability/providers/langsmith)
            *   [Langfuse](https://mastra.ai/docs/reference/observability/providers/langfuse)
            *   [LangWatch](https://mastra.ai/docs/reference/observability/providers/langwatch)
            *   [New Relic](https://mastra.ai/docs/reference/observability/providers/new-relic)
            *   [Traceloop](https://mastra.ai/docs/reference/observability/providers/traceloop)
            *   [Laminar](https://mastra.ai/docs/reference/observability/providers/laminar)
            
        *   [Logger](https://mastra.ai/docs/reference/observability/logger)
        *   [OTelConfig](https://mastra.ai/docs/reference/observability/otel-config)
        *   [.createLogger()](https://mastra.ai/docs/reference/observability/create-logger)
        
    *   Evals
        
        *   [AnswerRelevancy](https://mastra.ai/docs/reference/evals/answer-relevancy)
        *   [Bias](https://mastra.ai/docs/reference/evals/bias)
        *   [Completeness](https://mastra.ai/docs/reference/evals/completeness)
        *   [ContentSimilarity](https://mastra.ai/docs/reference/evals/content-similarity)
        *   [ContextPosition](https://mastra.ai/docs/reference/evals/context-position)
        *   [ContextPrecision](https://mastra.ai/docs/reference/evals/context-precision)
        *   [ContextRelevancy](https://mastra.ai/docs/reference/evals/context-relevancy)
        *   [ContextualRecall](https://mastra.ai/docs/reference/evals/contextual-recall)
        *   [Faithfulness](https://mastra.ai/docs/reference/evals/faithfulness)
        *   [Hallucination](https://mastra.ai/docs/reference/evals/hallucination)
        *   [KeywordCoverage](https://mastra.ai/docs/reference/evals/keyword-coverage)
        *   [PromptAlignment](https://mastra.ai/docs/reference/evals/prompt-alignment)
        *   [Summarization](https://mastra.ai/docs/reference/evals/summarization)
        *   [TextualDifference](https://mastra.ai/docs/reference/evals/textual-difference)
        *   [ToneConsistency](https://mastra.ai/docs/reference/evals/tone-consistency)
        *   [Toxicity](https://mastra.ai/docs/reference/evals/toxicity)
        
    *   Client SDK - JS
        
        *   [Overview](https://mastra.ai/docs/reference/client-js)
        *   [Agents API](https://mastra.ai/docs/reference/client-js/agents)
        *   [Memory API](https://mastra.ai/docs/reference/client-js/memory)
        *   [Tools API](https://mastra.ai/docs/reference/client-js/tools)
        *   [Workflows API](https://mastra.ai/docs/reference/client-js/workflows)
        *   [Vectors API](https://mastra.ai/docs/reference/client-js/vectors)
        *   [Logs API](https://mastra.ai/docs/reference/client-js/logs)
        *   [Telemetry API](https://mastra.ai/docs/reference/client-js/telemetry)
        *   [Error Handling](https://mastra.ai/docs/reference/client-js/error-handling)
        
    *   Voice
        
        *   [Mastra Voice](https://mastra.ai/docs/reference/voice/mastra-voice)
        *   [Composite Voice](https://mastra.ai/docs/reference/voice/composite-voice)
        *   [Deepgram](https://mastra.ai/docs/reference/voice/deepgram)
        *   [ElevenLabs](https://mastra.ai/docs/reference/voice/elevenlabs)
        *   [Google](https://mastra.ai/docs/reference/voice/google)
        *   [Murf](https://mastra.ai/docs/reference/voice/murf)
        *   [OpenAI](https://mastra.ai/docs/reference/voice/openai)
        *   [PlayAI](https://mastra.ai/docs/reference/voice/playai)
        *   [Speechify](https://mastra.ai/docs/reference/voice/speechify)
        
    

System

### On This Page

[About Mastra](https://mastra.ai/docs#)

[Question? Give us feedback →](https://github.com/mastra-ai/mastra/issues)[Edit this page](https://github.com/mastra-ai/mastra/edit/main/docs/src/pages/docs/index.mdx)

DocsIntroduction

About Mastra
============

Mastra is an open-source Typescript agent framework.

It’s designed to give you the primitives you need to build AI applications and features.

You can use Mastra to build [AI agents](https://mastra.ai/docs/agents/00-overview) that have memory and can execute functions, or chain LLM calls in deterministic [workflows](https://mastra.ai/docs/workflows/00-overview). You can chat with your agents in Mastra’s [local dev environment](https://mastra.ai/docs/local-dev/mastra-dev), feed them application-specific knowledge with [RAG](https://mastra.ai/docs/rag/overview), and score their outputs with Mastra’s [evals](https://mastra.ai/docs/08-running-evals).

The main features include:

*   **[Model routing](https://sdk.vercel.ai/docs/introduction)**: Mastra uses the [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction) for model routing, providing a unified interface to interact with any LLM provider including OpenAI, Anthropic, and Google Gemini.
*   **[Agent memory and tool calling](https://mastra.ai/docs/agents/01-agent-memory)**: With Mastra, you can give your agent tools (functions) that it can call. You can persist agent memory and retrieve it based on recency, semantic similarity, or conversation thread.
*   **[Workflow graphs](https://mastra.ai/docs/workflows/00-overview)**: When you want to execute LLM calls in a deterministic way, Mastra gives you a graph-based workflow engine. You can define discrete steps, log inputs and outputs at each step of each run, and pipe them into an observability tool. Mastra workflows have a simple syntax for control flow (`step()`, `.then()`, `.after()`) that allows branching and chaining.
*   **[Agent development environment](https://mastra.ai/docs/local-dev/mastra-dev)**: When you’re developing an agent locally, you can chat with it and see its state and memory in Mastra’s agent development environment.
*   **[Retrieval-augmented generation (RAG)](https://mastra.ai/docs/rag/overview)**: Mastra gives you APIs to process documents (text, HTML, Markdown, JSON) into chunks, create embeddings, and store them in a vector database. At query time, it retrieves relevant chunks to ground LLM responses in your data, with a unified API on top of multiple vector stores (Pinecone, pgvector, etc) and embedding providers (OpenAI, Cohere, etc).
*   **[Deployment](https://mastra.ai/docs/deployment/deployment)**: Mastra supports bundling your agents and workflows within an existing React, Next.js, or Node.js application, or into standalone endpoints. The Mastra deploy helper lets you easily bundle agents and workflows into a Node.js server using Hono, or deploy it onto a serverless platform like Vercel, Cloudflare Workers, or Netlify.
*   **[Evals](https://mastra.ai/docs/evals/00-overview)**: Mastra provides automated evaluation metrics that use model-graded, rule-based, and statistical methods to assess LLM outputs, with built-in metrics for toxicity, bias, relevance, and factual accuracy. You can also define your own evals.

Last updated on February 25, 2025

[Installation](https://mastra.ai/docs/getting-started/installation "Installation")


